(self.webpackChunklath_docs=self.webpackChunklath_docs||[]).push([[48],{2929:e=>{e.exports='\n    \n<div class="card">\n  <h1>FAQ</h1>\n\n<p><strong>What does Lath bring?</strong></p>\n<p>It can take your page experience to the next level and achieve the effect comparable to native Apps, such as <a to-applet="docs?id=prerender" clone-as="popDoc">Preload secondary pages</a>, <a to-applet="docs?id=modality" clone-as="popDoc">Pop Sheet</a> interactive effect, <a to-applet="docs?id=pullToRefresh" clone-as="popDoc">smooth flicker-free pull-down refresh</a>, to achieve seamless<a to-applet="docs?id=segueEffect" clone-as="popDoc">Page segue effects</a>and smooth<a to-applet="docs?id=defaultSlideViewApplets" clone-as="popDoc">Page horizontal sliding effect</a>and many other implementation schemes.</p>\n<p>When you want to get all of this, you do not need to make changes to the original logic and framework, or even block the page performance when the initial page loads.</p>\n<p>Lath has a very good design in window management. It can not only automatically help you to recycle resources, but also automatically control the event process between pages. The applications created with it are truly Web Apps that are comparable to Native Apps.</p>\n<hr>\n<p><strong>How much does it cost?</strong></p>\n<p>Lath is a container, so it has no requirements for what framework your web program uses, and even you don&#39;t need to modify your program logic, just through some simple configurations and conventions to complete the transformation to Lath, such as you can use React, VueJs, and so on.</p>\n<hr>\n<p><strong>Where does the scroll event go when declared with &lt;define-applet&gt;?</strong></p>\n<p>Each Applet view is equivalent to a complete page content, and it should have its own scroll container, so when declared with &lt;define-applet&gt;, its internal logic related to scroll events needs to be moved from &quot;body&quot; Except, the modification is bound to its own &lt;define-applet&gt; tag element.</p>\n<hr>\n<p><strong>How to introduce cross-domain page views?</strong></p>\n<p>When using source to declare an Applet&#39;s view, if its src page points to a cross-domain page, the ability of the proxy type in the page will be limited. To solve this problem, you can also introduce Lath in the reference page and enable the option <a to-applet="docs?id=tunneling" clone-as="popDoc">PresetConfig &gt; tunneling</a> to lift some restriction.</p>\n<hr>\n<p><strong>Does Lath have timing requirements?</strong></p>\n<p>Lath as an experience enhancement container, is not necessary on the first screen, so we recommend executing the &#39;createApplication&#39; method after the first screen is loaded, so as not to block the rendering of the first screen content.</p>\n<hr>\n<p><strong>Typescript&amp;JSX warning?</strong></p>\n<p>When using Typescript in the React environment, we need to define the type of the container&#39;s label, otherwise &#39;ts&#39; will generate a warning. At this time, add &#39;the type.d.ts&#39; file to the project.</p>\n<pre><div class="docs-code"><code-highlight type="ts">// type.d.ts\nimport &#39;lath&#39;\ndeclare namespace JSX {\n  interface IntrinsicElements {\n    &#39;define-applet&#39;: {\n      children: Element\n      &#39;applet-id&#39;: string\n    }\n    &#39;define-application&#39;: {\n      children: Element\n      &#39;default-applet&#39;: string\n    }\n  }\n}\n</code-highlight></div></pre>\n\n</div>\n<div class="card">\n  <h1>See also</h1>\n\n<p><a href="https://github.com/ioing/lath-vue-example">A code example developed using Lath in a Vue project.</a></p>\n</div>\n    '},4003:e=>{e.exports='\n    \n<div class="card">\n  <h1>AllowHost</h1>\n\n<p><small>frameworksAppletConfig &gt; allowHost</small></p>\n<p>When [capture] is not set, insecure host addresses can be filtered out by this configuration, and vice versa. （frameworks Applet exclusive configuration)</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  allowHost?: Array&lt;string&gt;\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>This configuration is mainly used to prevent the application from accessing foreign websites as expected by splicing url parameters to prevent harm.</p>\n<p>This configuration is ignored when the frameworks module has [capture] set.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    frameworks: {\n      allowHost: [&#39;aaa.com&#39;, &#39;bbb.com&#39;, &#39;ccc.com&#39;],\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Generally, the jump behavior of A link in the Applet page will be automatically captured as a new window in the application to open, but sometimes this is not expected in all cases, so this option can be used to control an effective domain, when the domain does not match, it will not open a new window in the application, but directly open a new browser window for access.</p>\n<blockquote>\n<p>If your application may have accessible addresses entered by the user, you will most likely need this configuration to force new pages to be accessed as a new browser window.</p>\n</blockquote>\n</div>\n    '},7610:e=>{e.exports='\n    \n<div class="card">\n  <h1>Applet.color</h1>\n\n<p><small>Applet.color</small></p>\n<p>The background color of the Applet.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type color = string\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>&#39;Color&#39; comes from config configuration, returns the color setting of &#39;frameworks Applet&#39; if not configured; and returns black and white according to whether the browser is in the dark mode if it is still not configured or inherited.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const applet = await application.get(&#39;home&#39;)\nconsole.log(applet.color)\n</code-highlight></div></pre>\n</div>\n    '},3569:e=>{e.exports='\n    \n<div class="card">\n  <h1>Applet.dock</h1>\n\n<p><small>Applet.dock</small></p>\n<p>程序坞的控制对象（Applet Snap 效果的模块切换器对象）。&#39;The dock&#39;s control object (the module switcher object for the Applet Snap effect).</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface Dock {\n  to: (id: number | string) =&gt; Promise&lt;unknown&gt;\n  index: number\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>The &quot;to&quot; function is capable of accepting a sequence (corresponding to the sequence of modules in the configuration item &#39;defaultDockApplets&#39;) / module id.</p>\n<p>The &quot;index&quot; property gets the sequence of Applets that are currently active on the Dock.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const applet = await application.get(&#39;home&#39;)\nawait applet.dock.to(&#39;pageA&#39;)\nconsole.log(applet.dock.index)\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Dock object, that is, the dock, for its creation refer to the configuration item:&#39;DefaultDockApplets&#39;.</p>\n</div>\n    '},2654:e=>{e.exports='\n    \n<div class="card">\n  <h1>Applet Events</h1>\n\n<p><small>Applet &gt; on</small></p>\n<p>Common event listeners (on, one, off).</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type ApplicationSafeAreaValue = string | Array&lt;string&gt;\ntype GlobalCSSVariables = { [key: string]: string }\ntype TriggerEventArgsMap = {\n  show: []\n  hide: []\n  willShow: []\n  willHide: []\n  destroy: []\n  pullToRefreshEnd: []\n  pullToRefreshCancel: []\n}\ntype TriggerEventTypes = keyof TriggerEventArgsMap\ntype TriggerEventCallbackArgs&lt;N extends TriggerEventTypes&gt; =\n  TriggerEventArgsMap[N]\ntype TriggerEventCallback&lt;N extends TriggerEventTypes&gt; = (\n  ...args: TriggerEventArgsMap[N]\n) =&gt; void\ntype TriggerEventTypesCallbacks = Record&lt;\n  TriggerEventTypes,\n  TriggerEventCallback&lt;keyof TriggerEventArgsMap&gt;\n&gt;\ntype on = &lt;T extends TriggerEventTypes, F extends TriggerEventCallback&lt;T&gt;&gt;(\n  type: T,\n  fn: F,\n  groupName?: string\n) =&gt; this\ntype off = &lt;T extends TriggerEventTypes, F extends TriggerEventCallback&lt;T&gt;&gt;(\n  type: T,\n  fn: F\n) =&gt; this\ntype one = on\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p><strong>show</strong></p>\n<p>The Applet is displayed.</p>\n<p><strong>hide</strong></p>\n<p>The Applet disappears.</p>\n<p><strong>willShow</strong></p>\n<p>The Applet is about to appear.</p>\n<p><strong>willHide</strong></p>\n<p>The Applet is about to disappear.</p>\n<p><strong>destroy</strong></p>\n<p>The Applet is destroyed.</p>\n<p><strong>pullToRefreshEnd</strong></p>\n<p>The Applet drop-down refresh ends.</p>\n<p><strong>pullToRefreshCancel</strong></p>\n<p>The Applet drop-down refresh cancels.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const applet = await application.get(&#39;home&#39;)\napplet.on(&#39;willShow&#39;, () =&gt; {\n  //...\n})\n</code-highlight></div></pre>\n</div>\n    '},2840:e=>{e.exports='\n    \n<div class="card">\n  <h1>Applet.refresh</h1>\n\n<p><small>Applet.refresh</small></p>\n<p>The view object of the Applet.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type refresh = () =&gt; Promise&lt;void&gt;\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>Smooth refresh of the page, and return a &#39;Promise&#39; object.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const applet = await application.get(&#39;home&#39;)\napplet.refresh()\n</code-highlight></div></pre>\n</div>\n    '},9003:e=>{e.exports='\n    \n<div class="card">\n  <h1>Applet.sameOrigin</h1>\n\n<p><small>Applet.sameOrigin</small></p>\n<p>Whether the Applet pages are same origin.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type sameOrigin = boolean\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>The Applet configured by &#39;source.src&#39; that returns &#39;true&#39; if it is homologous.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const applet = await application.get(&#39;home&#39;)\nconsole.log(applet.sameOrigin)\n</code-highlight></div></pre>\n</div>\n    '},5554:e=>{e.exports='\n    \n<div class="card">\n  <h1>Applet.slide</h1>\n\n<p><small>Applet.slide</small></p>\n<p>The control object of the swipe applet (similar to the Snap effect).</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface Slide {\n  to: (id: number | string) =&gt; Promise&lt;unknown&gt;\n  index: number\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>The &quot;to&quot; function can accept a sequence (corresponding to the applet index in the configuration item defaultSlideViewApplets) / applet id.</p>\n<p>The &quot;index&quot; property gets the index of applets on the current SlideView.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const applet = await application.get(&#39;home&#39;)\nawait applet.slide.to(&#39;pageA&#39;)\nconsole.log(applet.slide.index)\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>For its creation, please refer to the configuration item: DefaultSlideViewAppts.</p>\n</div>\n    '},7252:e=>{e.exports='\n    \n<div class="card">\n  <h1>Applet.view</h1>\n\n<p><small>Applet.view</small></p>\n<p>The view object of the Applet.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type view = HTMLElement | HTMLPortalElement | HTMLIFrameElement | null\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>The different element types of a view are determined by the &#39;viewType&#39;.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const applet = await application.get(&#39;home&#39;)\nconsole.log(applet.view)\n</code-highlight></div></pre>\n</div>\n    '},5079:e=>{e.exports='\n    \n<div class="card">\n  <h1>Applet.viewType</h1>\n\n<p><small>Applet.viewType</small></p>\n<p>The type of Applet view.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type viewType = &#39;portal&#39; | &#39;iframe&#39; | &#39;shadow&#39;\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>The Applets generated from the configuration item &#39;source&#39; and &#39;render&#39; correspond to the &quot;iframe&quot; and &quot;shadow&quot; types respectively, while the Applets with both &#39;source&#39; and &#39;portal&#39; properties are of type &quot;portal&quot;.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const applet = await application.get(&#39;home&#39;)\nconsole.log(applet.viewType)\n</code-highlight></div></pre>\n</div>\n    '},8973:e=>{e.exports='\n    \n<div class="card">\n  <h1>Application.activityApplet</h1>\n\n<p><small>Application.activityApplet</small></p>\n<p>The currently active Applet.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">activityApplet: Applet\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>If the Applet[&#39;home&#39;] in the current viewport, accessing this value returns the Applet[&#39;home&#39;].</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const application = await createApplication({\n  applets: {\n    ...\n  }\n})\nconsole.log(application.activityApplet)\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>If the Applet in the current viewport is a Applet[type = SlideView], the returned value is the Applet[type = SlideView], not the sub Applet in the SlideView view.</p>\n<blockquote>\n<p>If you want to get the sub Applet in the active program card, see the SlideView introduction.</p>\n</blockquote>\n</div>\n    '},2201:e=>{e.exports='\n    \n<div class="card">\n  <h1>Application Events</h1>\n\n<p><small>Application &gt; on</small></p>\n<p>Common event listeners (on, one ,off).</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type ApplicationSafeAreaValue = string | Array&lt;string&gt;\ntype GlobalCSSVariables = { [key: string]: string }\ntype TriggerEventArgsMap = {\n  safeAreaChange: [ApplicationSafeAreaValue]\n  globalCSSVariablesChange: [GlobalCSSVariables]\n  transformStart: [Applet[]]\n  transformEnd: [Applet[]]\n  systemDidMount: [Applet]\n  frameworksDidMount: [Applet]\n  pullToRefreshReady: []\n  exit: [{ backoutCount: number }]\n  back: [Applet]\n  error: [e: unknown]\n}\ntype TriggerEventTypes = keyof TriggerEventArgsMap\ntype TriggerEventCallbackArgs&lt;N extends TriggerEventTypes&gt; =\n  TriggerEventArgsMap[N]\ntype TriggerEventCallback&lt;N extends TriggerEventTypes&gt; = (\n  ...args: TriggerEventArgsMap[N]\n) =&gt; void\ntype TriggerEventTypesCallbacks = Record&lt;\n  TriggerEventTypes,\n  TriggerEventCallback&lt;keyof TriggerEventArgsMap&gt;\n&gt;\ntype on = &lt;T extends TriggerEventTypes, F extends TriggerEventCallback&lt;T&gt;&gt;(\n  type: T,\n  fn: F,\n  groupName?: string\n) =&gt; this\ntype off = &lt;T extends TriggerEventTypes, F extends TriggerEventCallback&lt;T&gt;&gt;(\n  type: T,\n  fn: F\n) =&gt; this\ntype one = on\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p><strong>safeAreaChange</strong></p>\n<p>You can listen for safe margin updates and return safe margin objects if &#39;updateSafeArea&#39; is notified when it is called.</p>\n<p><strong>globalCSSVariablesChange</strong></p>\n<p>You can listen for global style variable updates, and if &#39;updateGlobalCSSVariables&#39; is called, the update style variable object is returned.</p>\n<p><strong>transformStart</strong></p>\n<p>When a window switch occurs, an array of window Applets is returned.</p>\n<p><strong>transformEnd</strong></p>\n<p>When a window switchover is completed, it is notified, returning an array of window Applets.</p>\n<p><strong>systemDidMount</strong></p>\n<p>When the system Applet execution is completed, it is notified and returns to System Applet.</p>\n<p><strong>frameworksDidMount</strong></p>\n<p>When the framework Applet execution is completed, it is notified and returns to Frameworks Applet.</p>\n<p><strong>pullToRefreshReady</strong></p>\n<p>Notification is given when a pull-down refresh is used in the configuration and the pull-refresh atomic power is ready to complete.</p>\n<p><strong>exit</strong></p>\n<p>Notifies the app when program triggers an exit, returning the cumulative number of exit attempts.</p>\n<p><strong>back</strong></p>\n<p>When the program triggers a notification when history returns, the target Applet is returned.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts"> const { application } = await createApplication({\n              applets: {\n                ...\n              }\n            })\n            application.on(&#39;frameworksDidMount&#39;, () =&gt; {\n              //...\n            })\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>The usage of events on Application Events is generally not high, and there are more commonly used events on Applet Events.</p>\n</div>\n    '},2063:e=>{e.exports='\n    \n<div class="card">\n  <h1>Application.exists</h1>\n\n<p><small>Application.exists</small></p>\n<p>Get the historical sequence which was whether loaded for the first time of the current page.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type exists = boolean\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>When you first access the link into the app, Lath will record the location of your current history node, and after any page activity occurs, it can detect whether the current position has changed. If the value is false, it means that the history has changed, that is, the current history is not the first entry.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">console.log(application.exists)\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>This method only records the location of the node that was first loaded, for example, if you refresh the browser on any page, it will cause the node to relabel the location.</p>\n</div>\n    '},3099:e=>{e.exports='\n    \n<div class="card">\n  <h1>Application.get</h1>\n\n<p><small>Application.get</small></p>\n<p>Obtain the Applet Object.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type get = (id: string) =&gt; Promise&lt;Applet&gt;\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>&quot;id&quot; is the Applet name to be obtained.</p>\n<p>&#39;Promise&#39; returned.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const home = await application.get(&#39;home&#39;)\n</code-highlight></div></pre>\n\n</div>\n<div class="card">\n  <h1>Application.del</h1>\n\n<p><small>Application.del</small></p>\n<p>Delete an Applet object.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type del = (id: string) =&gt; Promise&lt;boolean&gt;\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>&quot;id&quot; is the name of the Applet to be removed.</p>\n<p>&#39;Promise&#39; is returned, and you will get &#39;true&#39; if the deletion is successful.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const isDel = await application.del(&#39;demo&#39;)\n</code-highlight></div></pre>\n\n</div>\n<div class="card">\n  <h1>Application.add</h1>\n\n<p><small>Application.add</small></p>\n<p>Add an Applet object.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">declare interface AppletManifest {\n  config: AppletConfig\n  resources?: AppletResources\n  components?: ((w: Window) =&gt; CustomElementConstructor)[]\n  events?: Partial&lt;AppletEvents&gt;\n}\ntype add = (id: string, manifest: AppletManifest) =&gt; Applet\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>&quot;id&quot; is the new Applet name.</p>\n<p>New Applet object returned.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts"> const newApplet = await application.add(&#39;demo&#39;, {\n              config: {\n                title: &#39;title&#39;,\n                ...\n              }\n            })\n</code-highlight></div></pre>\n</div>\n    '},5050:e=>{e.exports='\n    \n<div class="card">\n  <h1>Application.preActivityApplet</h1>\n\n<p><small>Application.preActivityApplet</small></p>\n<p>Applet of the previous activity.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">preActivityApplet: Applet\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>Returns the previous Applet.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const { application } = await createApplication({\n  applets: {\n    ...\n  }\n})\nconsole.log(application.preActivityApplet)\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>The acquisition logic of the program card is consistent with <a href="?id=applicationActivityApplet#docs" preset-effect="slide" clone-as="doc-newWindow-applicationActivityApplet">Application.activeApplet</a>.</p>\n</div>\n    '},4295:e=>{e.exports='\n    \n<div class="card">\n  <h1>Application.PushWindow</h1>\n\n<p><small>Application.pushWindow</small></p>\n<p>Transform to the page that specifies the Applet or URL.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">declare interface TransformActionOrigin {\n  x: number\n  y: number\n}\ntype PushWindowOptions = [\n  url: string,\n  title: string,\n  preset: string,\n  cloneAs?: string,\n  touches?: TouchEvent | TransformActionOrigin\n]\ntype pushWindow = (\n  url: string,\n  title = &#39;&#39;,\n  preset = &#39;slide&#39;,\n  cloneAs?: string,\n  touches?: TouchEvent | TransformActionOrigin\n) =&gt; Promise&lt;void&gt;\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>Same as <a href="?id=applicationTo#docs" preset-effect="slide" clone-as="doc-newWindow-applicationTo" >Application.to</a>, the first parameter of &#39;pushWindow&#39; can be passed in not only an Applet ID, but also a page URL to open a newly generated Applet page.</p>\n<p><strong>cloneAs</strong></p>\n<p>Define the name of a new clone of the Applet that does not replace the original Applet instance, but exists independently as a new Applet.</p>\n<p><strong>preset</strong></p>\n<p>Define the built-in animation effect that is used when the Applet is opened, and its value is the built-in animation name.</p>\n<p><strong>title</strong></p>\n<p>Define the title of the opened Applet.</p>\n<p><strong>touches</strong></p>\n<p>Same as the part of the &#39;touches&#39; in the &#39;Application.to&#39;.</p>\n<p><strong>url</strong></p>\n<p>Open the url of the new page (the target page will be affected by the [capture] logic).</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">application.pushWindow(\n  &#39;http://www.xxxxx.com/index.html&#39;,\n  &#39;首页&#39;,\n  &#39;zoom&#39;,\n  &#39;newHome&#39;\n)\n</code-highlight></div></pre>\n<p>If you want to invoke this capability in an &#39;iframe&#39; page, you can use &#39;postMessage&#39; to send a request.</p>\n<pre><div class="docs-code"><code-highlight type="ts">parent.postMessage({\n  action: &#39;pushWindow&#39;,\n  data: [&#39;https://xxx.com/&#39;, &#39;title&#39;],\n})\n</code-highlight></div></pre>\n</div>\n    '},5838:e=>{e.exports='\n    \n<div class="card">\n  <h1>Application.to</h1>\n\n<p><small>Application.to</small></p>\n<p>Transform to the specified Applet.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type TransformToOptions = [\n  id: string,\n  param?: string,\n  history?: -1 | 0 | 1,\n  touches?: TouchEvent | TransformActionOrigin\n]\ntype to = (...args: TransformToOptions) =&gt; Promise&lt;void&gt;\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p><strong>id</strong></p>\n<p>Jump to the Applet with the specified &#39;id&#39;.</p>\n<p><strong>param</strong></p>\n<p>The parameter carried by the jumper card (parameter string).</p>\n<p><strong>history</strong></p>\n<p>The parameter is at&#39;-1&#39;, it would not be pushed to history; at &#39;0&#39;, then it would replace the current history; and at &#39;1&#39; it would be pushed in a new history.</p>\n<p><strong>touches</strong></p>\n<p>&#39;TouchEvent&#39; objects that are clicked on elements that occur in click-through behavior, or &#39;TransformActionOrigin&#39; objects that directly define the coordinate values of the occurrence event x, y, are used to animate some transitions that need to occur depending on the starting position.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">application.to(&#39;home&#39;, &#39;?id=100&#39;, 1)\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>The function is an asynchronous function, if the access Applet does not exist, it will try to enter the 404 Applet, and pass the original carrying parameter and the module id through the parameter &quot;__notFoundId&quot; to the 404 Applet.</p>\n</div>\n    '},3552:e=>{e.exports='\n    \n<div class="card">\n  <h1>Application.updateGlobalCSSVariables</h1>\n\n<p><small>Application.updateGlobalCSSVariables</small></p>\n<p>Update the app&#39;s global CSS variables (subject to the same-origin policy).</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type ApplicationSafeAreaValue = string | Array&lt;string&gt;\ntype updateSafeArea = (data: ApplicationSafeAreaValue) =&gt; void\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>When an update is performed, all modules within the lifecycle are updated with real-time style variables.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">application.updateGlobalCSSVariables({\n  &#39;---common-button-color&#39;: &#39;#000000&#39;,\n  &#39;---common-button-width&#39;: &#39;100%&#39;,\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>The cross-domain module page needs to be handled by itself, please refer to &#39;Application.updateSafeArea&#39;.</p>\n</div>\n    '},1747:e=>{e.exports='\n    \n<div class="card">\n  <h1>Application.updateSafeArea</h1>\n\n<p><small>Application.updateSafeArea</small></p>\n<p>Update the security margins of an App (subject to the same-origin policy).</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type ApplicationSafeAreaValue = string | Array&lt;string&gt;\ntype safeArea = (data: ApplicationSafeAreaValue) =&gt; void\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>For its initial value, refer to the module configuration item [safeArea].</p>\n<p>The &#39;updateSafeArea&#39; parameter is an array expressed in clockwise enumeration like &#39;CSS Margin&#39;.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">application.updateSafeArea([&#39;48px&#39;, 0, &#39;60px&#39;, 0])\napplication.updateSafeArea([&#39;48px&#39;, 0, &#39;60px&#39;])\napplication.updateSafeArea([&#39;60px&#39;, 0])\napplication.updateSafeArea([&#39;48px&#39;])\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>In the application, the safety distance does not necessarily refer to the system default notch screen, but the safety area superimposed by the framework Applet, and when the framework interaction changes the safety margin, the display logic of each Applet can be controlled by this method.</p>\n<p>Non-homology card pages are not under this control, but you can synchronize secondary operations by creating your own &#39;postMessage&#39;. In addition, &quot;on/one&quot; can be used to listen for &quot;safeAreaChange&quot; events on the Application object.</p>\n<pre><div class="docs-code"><code-highlight type="ts">application.on(&#39;safeAreaChange&#39;, (data) =&gt; {\n  console.log(data)\n  // Applet is a cross-domain page module\n  // applet.view is a cross-domain page iframe\n  applet.view.postMessage({\n    action: &#39;safeAreaChange&#39;,\n    data\n  }, &#39;*&#39;)\n}\n</code-highlight></div></pre>\n<blockquote>\n<p>The target Applet object can be obtained directly in the &#39;events&#39; definition function in the configuration and through methods such as &#39;Application.get&#39;.</p>\n</blockquote>\n</div>\n    '},5002:e=>{e.exports='\n    \n<div class="card">\n  <h1>AppletManifestProcess</h1>\n\n<p><small>frameworlksAppletConfig &gt; appletManifestProcess</small></p>\n<p>When the Applet is loaded, its configuration file will be processed by this function before returning. (Frameworks Applet exclusive configuration)</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  appletManifestProcess?: (config: AppletManifest) =&gt; AppletManifest\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>The handler function will be passed the current handler card configuration and receive a new one.</p>\n<p>All Applet configuration can be rewritten through this configuration, such as setting uniform animation effects or verifying some security options.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        appletManifestProcess: (manify) =&gt; {\n          ... process\n          return newManify\n        }\n      }\n    }\n  }\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>There are some complex options in the Applet configuration, such as &#39;inject&#39;, &#39;components&#39;, etc., through which the reusable configuration can be managed uniformly.</p>\n</div>\n    '},5948:e=>{e.exports='\n    \n<div class="card">\n  <h1>Apply&amp;UnApply</h1>\n\n<p><small>AppletConfig &gt; apply</small></p>\n<p>Enable presetable capabilities in the same-origin Applet.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type AppletApplyMabyeOptions =\n  | &#39;smart-setTimeout&#39;\n  | &#39;proxy-link&#39;\n  | &#39;tap-highlight&#39;\ntype AppletApplyOptions = Array&lt;AppletApplyMabyeOptions&gt;\ntype AppletApplyOptionsParam = {\n  &#39;tap-highlight&#39;?: {\n    selector: string\n  }\n}\ninterface AppletBaseConfig {\n  apply?: AppletApplyOptions\n  applyOptions?: AppletApplyOptionsParam\n  unApply?: AppletApplyOptions\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>&#39;apply&#39; presets the following available capabilities:</p>\n<ul>\n<li><strong>smart-setTimeout</strong> When the Applet window is not visible or is in the process of window animation, all &#39;setTimeout&#39; will automatically pause execution until the module animation stops and automatically resumes execution.</li>\n<li><strong>proxy-link</strong> When the &#39;a link&#39; or the &#39;window.open&#39; method is used to open the page in the Applet page, the Lath container will automatically capture and intercept, and generate a new Applet from the page content, and then load and display it. If the &#39;a link&#39; is set with target=&#39;_parent&#39; or target=&#39;_top&#39;, it will not be captured and will be opened in a new browser window. In the &#39;a link&#39;, you can also set the animation effect and set the clone as a new module preset-effect=&quot;preset animation name&quot;, clone-as=&quot;new module name&quot;</li>\n<li><strong>tap-highlight</strong> All &#39;a links&#39; will automatically add a translucent mask highlighting effect when clicked.</li>\n</ul>\n<blockquote>\n<p>When using the &#39;clone-as&#39; attribute on the &#39;a link&#39;, the purpose is to allow the same Applet to be opened with multiple avatars, such as the article details Applet. When its parameters are different, multiple articles can be opened with avatars at the same time, rather than in the same instance to update the article.</p>\n</blockquote>\n<p>The options above are enabled by default. If you do not want to enable them, you can use the &#39;unApply&#39; configuration item.</p>\n<p>&#39;unApply&#39; is the opposite of the &#39;apply&#39; option, which disables the ability to preconfigure in the configuration.</p>\n<p>&#39;applyOptions&#39; can add available parameters for each capability. Currently, a highlight selector &quot;selector&quot; can be provided for &quot;tap-highlight&quot;. When the click element matches, the highlight effect will be added, and &quot;tap-highlight&quot; will be added to the element. Properties that can be used for CSS style customization.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        unApply: [&#39;proxy-link&#39;],\n        applyOptions: {\n          &#39;tap-highlight&#39;: {\n            selector: &#39;.link&#39;,\n          },\n        },\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Note that using &quot;proxy-link&quot; does not capture the jump behavior implemented by the &quot;location.href&quot; method.</p>\n</div>\n    '},3554:e=>{e.exports='\n    \n<div class="card">\n  <h1>Background</h1>\n\n<p><small>AppletConfig &gt; background</small></p>\n<p>Whether the Applet is allowed to run in the background.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  background?: boolean | &#39;auto&#39;\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p><strong>value = false</strong></p>\n<p>Module transitions are destroyed immediately after the transition animation ends.</p>\n<p><strong>value = true</strong></p>\n<p>Modules are not destroyed (only if the page load succeeds); the exception is when &#39;timeout&#39; times out, before startup.</p>\n<p><strong>value = &#39;auto&#39;</strong></p>\n<p>When Automatic Mode is set, the module would intelligently determine whether to destroy, and is destroyed when the following conditions are triggered:</p>\n<ul>\n<li>When the page is set with SRC and the source is different</li>\n<li>When the page contains objects such as &#39;embed, applet, iframe&#39;</li>\n<li>When the page contains video or audio tags, and there is an error in automatically pausing playback when mediaGuard is enabled</li>\n<li>There are node churn operations in the page that occur more than 10 times in 3 seconds</li>\n<li>When the total node operations in the page run more than 1000 times in the background</li>\n</ul>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        background: true,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>If an Applet enters the Modality type non-full-screen Applet such as &#39;Pop Sheet&#39;, it will not be executed even if it meets the destruction conditions.</p>\n</div>\n    '},3274:e=>{e.exports='\n    \n<div class="card">\n  <h1>Capture</h1>\n\n<p><small>AppletConfig &gt; capture</small></p>\n<p>Capture jump links in other Applets, and jump to this Applet if they match.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  capture?:\n    | string\n    | ((\n        resolve: {\n          pathname: string\n          origin: string\n          host: string\n          hash: string\n          href: string\n          search: string\n          port: string\n          searchParams: URLSearchParams\n        },\n        url: string\n      ) =&gt; boolean)\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>Capture can accept a &#39;url path&#39;, or a capture function, which can be captured when jumping behavior is performed in other Applets.</p>\n<p>When the capture function returns true, it means that the jump link is matched, and the link target will be replaced by the Applet.</p>\n<p>After capture, if the jump link carries parameters, the carried parameters will be passed to the capture Applet together.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        capture: (resolve) =&gt; {\n          return resolve.path === &#39;/abc/abc&#39;\n        },\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Whether the Applet is loaded in advance is an important prerequisite for the capture program to work. Therefore, in order to ensure that the capture Applet has been loaded in advance, it is necessary to include the dependency Applet in the previous Applet configuration option [prerender].</p>\n<p>When this option is turned on, all link jump behavior that can be captured will be handed over to this option to determine whether to open a new window in the application, which means that your rules need to strictly protect the security of the application.</p>\n<p>If the frameworks Applet enables this option, all Applets do not set this option will be handled by the frameworks Applet by default, and it should be noted that the configuration time [allowHost] will be invalid, because capture will be processed first.</p>\n<blockquote>\n<p>The capturer Applet can be captured normally only when the current Applet is opened with proxy-link in [apply], otherwise it will not enter the capture logic, but this option is enabled by default unless you turn it off.</p>\n</blockquote>\n</div>\n    '},5834:e=>{e.exports='\n    \n<div class="card">\n  <h1>Color</h1>\n\n<p><small>AppletConfig &gt; color</small></p>\n<p>Define the initial window background color of the Applets.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  color?: string\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>The default background color can present a good visual transition when the Applet is not loaded.</p>\n<p>The default value automatically fills in black/white based on whether the browser is in &#39;Dark Mode&#39;.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        color: &#39;#000&#39;,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Please choose an appropriate background color to fill the Applet window to ensure visual consistency.</p>\n<blockquote>\n<p>When the background color does not match the Applet content, the user is likely to see a flicker.</p>\n</blockquote>\n</div>\n    '},5126:e=>{e.exports='\n    \n<div class="card">\n  <h1>Components</h1>\n\n<p><small>AppletManifest &gt; components</small></p>\n<p>Applet pages that belong to the same origin can share Web Components with the main Applet page.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletManifest {\n  components?: ((w: Window) =&gt; CustomElementConstructor)[]\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>As a future-oriented component standard, Web Components are not only easy to share, but also can greatly improve the experience performance of the page.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">export const getCodeHighlighter = (shadowWindow): CustomElementConstructor =&gt; {\n  class CodeHighlighter extends shadowWindow.HTMLElement {\n    constructor () {\n      super()\n      const shadowRoot = this.attachShadow({ mode: &#39;open&#39; })\n      shadowRoot.appendChild(tmpl.content.cloneNode(true))\n      ...\n    }\n  }\n\n  return CodeHighlighter as unknown as CustomElementConstructor\n}\ncreateApplication({\n  applets: {\n    home: {\n      config: {\n        title: &#39;Home Page&#39;\n      },\n      components: [getCodeHighlighter]\n    }\n  }\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Since Web Components are to be shared into each Applet Container, we need to register the component in the window variable of the Applet when we encapsulate the component.</p>\n</div>\n    '},794:e=>{e.exports='\n    \n<div class="card">\n  <h1>Custom Effect</h1>\n\n<p><small>AppletConfig &gt; animation</small></p>\n<p>Customize Applet window animations.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type AnimationFunction = (\n  e: TransformAnimateEvent\n) =&gt; undefined | Promise&lt;boolean&gt;\ntype AnimationPrestType =\n  | &#39;inherit&#39;\n  | &#39;fade&#39;\n  | &#39;zoom&#39;\n  | &#39;pop-sheet&#39;\n  | &#39;flip&#39;\n  | &#39;flip-left&#39;\n  | &#39;flip-down&#39;\n  | &#39;flip-right&#39;\n  | &#39;flip-up&#39;\n  | &#39;slide&#39;\n  | &#39;slide-left&#39;\n  | &#39;slide-right&#39;\n  | &#39;slide-up&#39;\n  | &#39;slide-down&#39;\ntype AnimationConfig =\n  | AnimationPrestType\n  | boolean\n  | Array&lt;AnimationPrestType&gt;\n  | [AnimationFunction, AnimationFunction]\ninterface AppletBaseConfig {\n  animation?: AnimationConfig\n}\n</code-highlight></div></pre>\n<p>TransformAnimateEvent is an available object provided in custom animations.</p>\n<pre><div class="docs-code"><code-highlight type="ts">interface TransformActionOrigin {\n  x: number\n  y: number\n}\ninterface TransformAnimateEvent {\n  x: number\n  y: number\n  in: Animate\n  out: Animate\n  view: Array&lt;HTMLElement&gt;\n  width: number\n  height: number\n  viewport: Array&lt;HTMLElement&gt;\n  applets: Array&lt;Applet&gt;\n  reverse: boolean\n  direction: number\n  backset: number\n  origin: string | Array&lt;number&gt;\n  attach: string | Array&lt;number&gt;\n  touches: TransformActionOrigin | undefined\n  historyDirection: number\n  callback: (stillness: boolean) =&gt; void\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>The first function in the array is forward animation and the second function is reverse animation. If the value is a function, the animation can be controlled by parameters, such as &#39;direction&#39;, &#39;historyDirection&#39;, etc.</p>\n<p>The Applet hierarchy will also reflect the effect of the transition animation: from small to large, it is a forward animation; and vice versa, from large to small, it is a reverse animation.</p>\n<p>When the history rolls back to the Applet with level 0, the singleLock event will be triggered. For details, please refer to the relevant description in the [singleLock] configuration.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">const getAnimate = (type: number) =&gt; {\n  return (e: TransformAnimateEvent) =&gt; {\n    let inO: number, outO: number, inV: Animate, outV: Animate\n    switch (type) {\n      case 0:\n        inO = 1\n        outO = 0\n        inV = e.in\n        outV = e.out\n        break\n      case 1:\n      default:\n        inO = 0\n        outO = 1\n        inV = outV = e.in\n    }\n    inV\n      .duration(0)\n      .ease(&#39;ease-out-expo&#39;)\n      .to(0, 0, 0)\n      .opacity(inO)\n      .end(function () {\n        outV\n          .duration(767)\n          .opacity(outO)\n          .end(function () {\n            e.callback(false)\n          })\n      })\n    return undefined\n  }\n}\ncreateApplication({\n  applets: {\n    home: {\n      config: {\n        animation: [getAnimate(0), getAnimate(1)],\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<p>We can see that by using the information provided in &#39;TransformAnimateEvent&#39;, the fade forward and backward animation can be done.</p>\n</div>\n    '},6702:e=>{e.exports='\n    \n<div class="card">\n  <h1>DefaultSlideViewApplets</h1>\n\n<p><small>AppletConfig &gt; defaultSlideViewApplets</small></p>\n<p>The slideView for the Snap transition effect, we call it SlideView.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type SlideViewApplets = Array&lt;{\n  id: string\n  activate: &#39;lazy&#39; | &#39;instant&#39; | &#39;passive&#39;\n}&gt;\ninterface AppletBaseConfig {\n  defaultSlideViewApplets?: SlideViewApplets\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>&#39;id&#39; indicates the name of the Applet to be loaded.\n&#39;activate&#39; indicates the activation type of the Applet, which is divided into the following three types:</p>\n<ul>\n<li>lazy: Load Applet page content when the browser is idle.</li>\n<li>instant: Instantly loads the Applet page content.</li>\n<li>passive: Load the Applet page content when activated.</li>\n</ul>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    frameworks: {\n      config: {\n        defaultSlideViewApplets: [\n          {\n            id: &#39;appletA&#39;,\n            activate: &#39;instant&#39;,\n          },\n          {\n            id: &#39;appletB&#39;,\n            activate: &#39;lazy&#39;,\n          },\n        ],\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Applet with &#39;defaultSlideViewApplets&#39; will no longer have their own views (except frameworks Applet), but other Applet views are nested within them, so this configuration conflicts with [source] and should not be set at the same time.</p>\n<blockquote>\n<p>In addition, use &quot;API-Applet.slide.to&quot; to slide the slideView to the specified Applet position.</p>\n</blockquote>\n\n</div>\n<div class="card">\n  <h1>OpenSlideViewLeftHolder</h1>\n\n<p><small>AppletConfig &gt; openSlideViewLeftHolder</small></p>\n<p>When enabled, under the &#39;SlideView&#39; effect (when &#39;defaultSlideViewApplets&#39; is configured), the leftmost edge will allow to exit the application when swiping.</p>\n<blockquote>\n<p>This configuration is mainly used to unblock the exit under the first history record. If the browsing history is greater than 1, there is no edge sliding blockage in most cases. If it is not enabled, only edge elasticity is triggered and it will not go back to the previous level when edge sliding may occur in iOS devices.</p>\n</blockquote>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  openSlideViewLeftHolder?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>The default value is false.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        defaultSlideViewApplets: [\n          {\n            id: &#39;appletA&#39;,\n            activate: &#39;instant&#39;,\n          },\n          {\n            id: &#39;appletB&#39;,\n            activate: &#39;lazy&#39;,\n          },\n        ],\n        openSlideViewLeftHolder: true,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>When this option is turned on ,it should be noted that a 20px non-feedback area will be generated on the left edge of the Applet, and this safe operating distance should be reserved during development.</p>\n</div>\n    '},1624:e=>{e.exports='\n    \n<div class="card">\n  <h1>Events</h1>\n\n<p><small>AppletManifest &gt; events</small></p>\n<p>Register event callbacks for Applets.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">declare interface AppletEvents {\n  transformStart: (applet: Applet) =&gt; undefined | &#39;break&#39;\n  transformEnd: (applet: Applet) =&gt; void\n  boot: (applet: Applet) =&gt; void\n  load: (applet: Applet) =&gt; void\n  loadError: (applet: Applet) =&gt; void\n  preload: (applet: Applet) =&gt; void\n  destroy: (applet: Applet) =&gt; void\n}\ndeclare interface AppletManifest {\n  events?: Partial&lt;AppletEvents&gt;\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>Register the event callback function in the life cycle in the Applet.</p>\n<ul>\n<li><strong>transformStart</strong> Applet transition animation start event. Note that &#39;transformStart&#39; can optionally return a string &#39;break&#39;, at which point the block transition will be terminated.</li>\n<li><strong>transformEnd</strong> Applet transition animation end event.</li>\n<li><strong>boot</strong> Applet start event (only once per lifetime).</li>\n<li><strong>load</strong> The source code loading completion event of &#39;source&#39; type Applet.</li>\n<li><strong>loadError</strong> The source code loading error event of &#39;source&#39; type Applet.</li>\n<li><strong>preload</strong> Applet preload finished event.</li>\n<li><strong>destroy</strong> Applet destroyed event.</li>\n</ul>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        title: &#39;home&#39;,\n      },\n      events: {\n        transformEnd: (applet) =&gt; {\n          // ...\n        },\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Only the necessary events are provided in the Applet registration event, you can use the listener function on the Applet object to cover more events. Please refer to &#39;API-Application Events&#39;.</p>\n<blockquote>\n<p>The events in the Applet configuration all run outside the Applet container. When the Applet is destroyed, the environment variables in the configuration will not disappear. Therefore, you must be responsible for the quality of the logic in the configuration file, avoid side effects, and be reasonable. Controls the logic size (complex logic is not recommended here).</p>\n</blockquote>\n</div>\n    '},9138:e=>{e.exports='\n    \n<div class="card">\n  <h1>Free</h1>\n\n<p><small>AppletConfig &gt; free</small></p>\n<p>Define the window display type of the APPLETS.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  free?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>When free equals true, the APPLET runs in &#39;full-screen mode&#39;, that is, it&#39;s not bound by the framework card.(Applets[id = frameworks]).</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        free: true,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Suppose the framework card is a module with tabBar function, at this time the applet will directly cover the entire framework card to run, otherwise the applet will run inside the framework card. (That is, the tabBar is overridden on the framework card).</p>\n</div>\n    '},12:e=>{e.exports='\n    \n<div class="card">\n  <h1>GlobalCSSVariables</h1>\n\n<p><small>FrameworksAppletConfig &gt; globalCSSVariables</small></p>\n<p>Set global CSS variables for the application. (Frameworks Applet exclusive configuration)</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type GlobalCSSVariables = { [key: string]: string }\ninterface AppletBaseConfig {\n  globalCSSVariables?: GlobalCSSVariables | (() =&gt; GlobalCSSVariables)\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>Similar to [safeArea], it can only take effect under the same domain Applet page.</p>\n<p>If you need to dynamically modify or increase this value, you can update it through the &quot;API-updateGlobalCSSVariables&quot; event.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        globalCSSVariables: {\n          &#39;--main-color&#39;: &#39;#fff&#39;,\n          &#39;--title-font-size&#39;: &#39;28px&#39;,\n        },\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Use with &quot;API-updateGlobalCSSVariables&quot; to create a smooth theme transition effect.</p>\n</div>\n    '},602:e=>{e.exports='\n    \n<div class="card">\n  <h1>HoldBack</h1>\n\n<p><small>FrameworksAppletConfig &gt; holdBack</small></p>\n<p>Prevent the main program from exiting. (Frameworks Applet exclusive configuration)</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface FrameworksAppletConfig {\n  holdBack?: (backoutCount: number) =&gt; boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>It is valid when [singleLock] is turned on. When the user performs a return operation and the page is about to exit, it will be verified through this function (if it is blocked, &#39;backCount&#39; is the number of clicks to return). When it returns &#39;true&#39;, it prevents the application page from exiting. Otherwise, the direct exit of the application will be allowed.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    frameworks: {\n      config: {\n        singleLock: true,\n        holdBack: (event) =&gt; {\n          // decide whether to quit\n          return true\n        },\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<p>As configured above, when jumping from other pages to enter the application, when you click the browser back button, you will not exit the application page, but will judge whether it should be exited through the [holdBack] configuration in the &#39;Frameworks Applet&#39;, and return the back button clicked times to the user at the same time.</p>\n</div>\n    '},9286:e=>{e.exports='\n    \n<div class="card">\n  <h1>Index</h1>\n\n<p><small>AppletConfig &gt; index</small></p>\n<p>Define the applet as default entrance for an App. (frameworks Applet exclusive configuration)</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  index?: string\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>When starting the Lath application, it will first start the frameworks applet, and then start the home page applet according to the &quot;index&quot; configuration.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    frameworks: {\n      config: {\n        index: &#39;home&#39;,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<p>The applet named &#39;home&#39; will firstly be initialized when the app starts.</p>\n</div>\n    '},6414:e=>{e.exports='\n    \n<div class="card">\n  <h1>Inject</h1>\n\n<p><small>AppletConfig &gt; inject</small></p>\n<p>When it is a same-origin Applet page, the set global varialbles and methods can be injected into the Applet page before the Applet page is loaded, such as injecting some &#39;JSBridge&#39;, common variables or rewriting global objects.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  inject?: (w: Window, m: Applet) =&gt; void\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>For example, the link jump in the Applet is carried out through &#39;JSBridge&#39;, so Lath cannot automatically capture it, so now you want to rewrite the logic, then you can use this option to rewrite it.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        inject: (appletWindow, applet) =&gt; {\n          appletWindow.open = (url) =&gt; {\n            return applet.application.pushWindow(url).catch(() =&gt; {\n              window.open(url)\n            })\n          }\n        },\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>It should be noted that the &#39;inject&#39; option is restricted by the same domain, so it cannot be used in cross-domain scenarios.</p>\n<p>&#39;injcect&#39; is a powerful capability, and you can develop incredible capabilities based on it.</p>\n</div>\n    '},9825:e=>{e.exports='\n    \n<div class="card">\n  <h1>Level</h1>\n\n<p><small>AppletConfig &gt; level</small></p>\n<p>The Applet View Window displays the hierarchy.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  level?: number\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>Generally, the level of the above-the-fold Applet is 0, and it increases gradually according to the access depth.</p>\n<p>The Applet hierarchy will also reflect the effect of the transition animation: from small to large, it is a forward animation； and vice versa, from large to small, it is a reverse animation.</p>\n<p>When the history rolls back to the Applet with level 0, the singleLock event will be triggered. For details, please refer to the relevant description in the [singleLock] configuration.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        level: 1,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>If the two modules to be jumped are modules of the same level, the transition animation effect will be automatically turned off.</p>\n<blockquote>\n<p>Why are sibling module animations turned off? The main scene when the animation of the same level module is turned off is for tab switching. Generally, a window animation effect is not required for tab switching, but animation effects may be required when switching from windows at other level.</p>\n</blockquote>\n</div>\n    '},8679:e=>{e.exports='\n    \n<div class="card">\n  <h1>Limit</h1>\n\n<p><small>frameworksAppletConfig &gt; limit</small></p>\n<p>Define the maximum number of Applet that the App can cache in the background. (Frameworks Applet exclusive configuration).</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        limit: 10,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>Default is 5, maximum is 100. It is expressed as the Applet that can be cached in the background at most at the same time in the application. When it exceeds, the modules accessed firstly will be destroyed in turn according to the order of access. If the module is configured with background running (background=true), it will not be affected by this rule.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        limit: 10,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>The number of limits will affect the memory usage of the application when it is running, and it is generally recommended to be 5-20.</p>\n</div>\n    '},4669:e=>{e.exports='\n    \n<div class="card">\n  <h1>MainScrollId</h1>\n\n<p><small>AppletConfig &gt; mainScrollId</small></p>\n<p>Specify the main scroll container for the Applet, which can be used in conjunction with [tapStatusBarToScrollToTop] and [pullToRefresh].</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  mainScrollId?: string\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>If no main scroll container is specified, the default &lt;define-applet&gt; is the main scroll.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        mainScrollId: &#39;root&#39;,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Note that the specified scroll container &quot;id&quot; cannot exist in the &#39;ShadowDom&#39;.</p>\n</div>\n    '},8332:e=>{e.exports='\n    \n<div class="card">\n  <h1>MediaGuard</h1>\n\n<p><small>AppletConfig &gt; mediaGuard</small></p>\n<p>When this setting is enabled, the video and audio in the same-origin Applet will be intelligently controlled. When the module is hidden, the audio/video being played will be automatically paused, otherwise, the paused audio/video will be resumed when module is visible.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  mediaGuard?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>In general scenarios, automatic media control can help you automatically process the media status. If the automatic processing fails, the Applet will be forcibly destroyed, except for background running (background=true).</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        mediaGuard: true,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Without this option, you can also manage manually via window visibility events - refer to API - Application - Events.</p>\n</div>\n    '},8681:e=>{e.exports='\n    \n<div class="card">\n  <h1>Modality</h1>\n\n<p><small>AppletConfig &gt; modality</small></p>\n<p>Whether the Applet is displayed in the form of a modal box.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type ModalityType = &#39;paper&#39; | &#39;sheet&#39; | &#39;overlay&#39;\ninterface AppletBaseConfig {\n  modality?: ModalityType\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p><strong>sheet</strong> A window effect that pops up from the bottom.</p>\n<p><strong>paper</strong> A window effect that zooms in from clicking on the block.</p>\n<p><strong>overlay</strong> A pop-up effect that pops up gradually from the bottom.</p>\n<p>The <strong>sheet</strong> type also provides a custom option <strong>SheetOptions</strong>, PaperOptions and OverlayOptions are subsets of SheetOptions and the options available are limited.</p>\n<pre><div class="docs-code"><code-highlight type="ts">type ModalityType = &#39;paper&#39; | &#39;sheet&#39; | &#39;overlay&#39;\ntype SheetOptions = {\n  top?: string\n  miniCardHeight?: number | string\n  maskOpacity?: number\n  blockedHolderWidth?: number | string\n  maskClosable?: boolean\n  noHandlebar?: boolean\n  backdropColor?: string\n  stillBackdrop?: boolean\n  swipeClosable?: boolean\n  borderRadius?: number | string\n  useFade?: boolean\n}\ntype PaperOptions = {\n  clipTop?: string\n  maskOpacity?: number\n  swipeClosable?: boolean\n}\ntype OverlayOptions = {\n  maskOpacity?: number\n  swipeClosable?: boolean\n}\ninterface AppletBaseConfig {\n  modality?: ModalityType\n  sheetOptions?: SheetOptions\n}\n</code-highlight></div></pre>\n<ul>\n<li><strong>top</strong>: The edge distance from the top of the view to the top of the window, CSS units are supported.</li>\n<li><strong>miniCardHeight</strong>: Two-stage cards render the smallest size window by default, and the backdrop content does not scale when the small card is rendered until you slide up to open all.</li>\n<li><strong>maskOpacity</strong>: The opacity of the background black mash, default is 0.3.</li>\n<li><strong>maskOpacity</strong>: The opacity of the background black mash, default is 0.3.</li>\n<li><strong>blockedHolderWidth</strong>: The safe margin of the left finger edge sliding (the size of the margin will cover the interactive area), and the boundary value determines the sensitivity of the left sliding closing.</li>\n<li><strong>maskClosable</strong>: Click whether the background mask is allowed to close the window, the default is closed.</li>\n<li><strong>noHandlebar</strong>: Instead of showing the default slide controls, you may need to redefine that look in the interior view.</li>\n<li><strong>backdropColor</strong>: The underlay color to render when the backdrop Applet is scaled.</li>\n<li><strong>swipeClose</strong>: When your finger slides horizontally from the middle, you can manipulate the card to close.</li>\n</ul>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    pageA: {\n      config: {\n        modality: &#39;sheet&#39;\n        sheetOptions: {\n          top: &#39;10%&#39;,\n          miniCardHeight: &#39;30vh&#39;,\n          maskOpacity: 0.5,\n          blockedHolderWidth: 20,\n          maskClosable: true\n        }\n      }\n    }\n  }\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Note that the sheetOptions option is a further feature description when the modality option is &#39;sheet&#39;, which needs to be used in conjunction and is not valid when used alone.</p>\n</div>\n    '},5192:e=>{e.exports='\n    \n<div class="card">\n  <h1>UnusedShadowDom</h1>\n\n<p><small>PresetConfig &gt; noShadowDom</small></p>\n<p>Whether the framework uses ShadowDom mode. (Preconfigured items before the app starts)</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface PresetConfig {\n  noShadowDom?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<blockquote>\n<p>For more information about ShadowDom, check out the introduction to W3C.</p>\n</blockquote>\n<p>If you start the application by &#39;createApplication&#39; to specify the &quot;index&quot; mode, the preset Applet node will be moved directly to ShadowDom, which will cause the absence of styles and dependencies outside the node (such as some dependent script event binding elements and dynamically injected global styles, etc.).</p>\n<p>ShadowDom mode has been turned off by default, you do not need to set the change option, if you do not have the above problems, and there will be no interference between the Applets of the Slice, you can turn off the Change option, at this time the same page of the slice to produce the Applet is related to each other.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  tunneling: true,\n  applets: {\n    ...\n  }\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>This configuration is rarely used, but it would be better if you could use &#39;&lt;define-applet&gt;&#39; instead.</p>\n</div>\n    '},9908:e=>{e.exports='\n    \n<div class="card">\n  <h1>NotFound</h1>\n\n<p><small>FrameworksAppletConfig &gt; notFound</small></p>\n<p>404 Applet (frameworks Applet exclusive configuration)</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface FrameworksAppletConfig {\n  notFound?: string\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>If the requested Applet page does not exist, it will be automatically routed to the Applet, and if it is not configured, it will automatically jump to the Apple whose &quot;id&quot; is &quot;404&quot;.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    frameworks: {\n      config: {\n        notFound: &#39;home&#39;,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<p>The 404 module is mainly used for the acceptance and statistics of abnormal access to the application.</p>\n</div>\n    '},3693:e=>{e.exports='\n    \n<div class="card">\n  <h1>OpenSlideViewLeftHolder</h1>\n\n<p><small>AppletConfig &gt; openSlideViewLeftHolder</small></p>\n<p>开启后，在 SlideView 效果下（defaultSlideViewApplets 配置时），最左侧边缘滑动时会允许退出应用。&#39;When enabled, under the &#39;SlideView&#39; effect (when &#39;defaultSlideViewApplets&#39; is configured), the leftmost edge will allow to exist the application when swiping.</p>\n<blockquote>\n<p>This configuration is mainly used to unblock the exit under the first history record. If the browsing history is greater than 1, there is no edge sliding blockage in most cases. If it is not enabled, the edge elasticity may occur in iOS devices when edge sliding without falling back to the previous level.</p>\n</blockquote>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  openSlideViewLeftHolder?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>该值默认为 false。</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        defaultSlideViewApplets: [\n          {\n            id: &#39;appletA&#39;,\n            activate: &#39;instant&#39;,\n          },\n          {\n            id: &#39;appletB&#39;,\n            activate: &#39;lazy&#39;,\n          },\n        ],\n        openSlideViewLeftHolder: true,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>When this option is turned on, it should be noted that a 20px non-feedback area will be generated on the left edge of the Applet, and this safe operating distance should be reserved during development.</p>\n</div>\n    '},6103:e=>{e.exports='\n    \n<div class="card">\n  <h1>Portal</h1>\n\n<p><small>AppletConfig &gt; portal</small></p>\n<p>When the Applet with this property is enabled, when the browser supports the portal feature, the activation operation of the portal will be performed after the transition animation ends, and the Applet page will run in a new context after activation.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  portal?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>The source configuration of the Applet should be in link mode and in the same domain as the main application.</p>\n<p>For an Applet set to portal, is [free] option should generally also be set to true.</p>\n<p>When the browser dose not support the portal capability, it will automatically downgrade to the general container mode.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        portal: true,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>This option is suitable for Applets with independent functions and no connection with the main application (such as apply, inject, etc.), otherwise, the configuration of these dependent contexts will be invalid.</p>\n</div>\n    '},4644:e=>{e.exports='\n    \n<div class="card">\n  <h1>PreIndex</h1>\n\n<p><small>FrameworksAppletConfig &gt; preIndex</small></p>\n<p>When accessing a Applet via a link, a pre-positioned Applet can be inserted before. (Frameworks Applet exclusive configuration)</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface FrameworksAppletConfig {\n  preIndex?: string\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>When anchoring to a Applet by visiting the page url, you can set a pre-Applet through this configuration item. At this time, when accessing the url link, the anchored Applet will still be preferentially accessed, but when the browser is clicked to return, it does not exit immediately, but falls back from the anchor Applet to the front Applet inserted through this configuration item.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    frameworks: {\n      config: {\n        preIndex: &#39;home&#39;,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<p>When the Applet anchored by the access link is equal to [preIndex] or [index], the pre-Applet will not be inserted again before.</p>\n</div>\n    '},9629:e=>{e.exports='\n    \n<div class="card">\n  <h1>Prerender</h1>\n\n<p><small>AppletConfig &gt; prerender</small></p>\n<p>Preloading &amp; pre-rendering of Applets.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  prerender?: Array&lt;string&gt;\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>If there are links to other Applet in the current Applet, and you want to preload these Applets, you can set this property. The page will preload the dependent Applet in the background when it is idle, including the preloading of static resources such as CSS and JS in the document.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      prerender: [${AppletName}, ${AppletName}]\n    }\n  }\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>When the preload is executed, the loading of the static resources of the internal link will be saved when the user accesses the Applet, but the dynamic data request of the script will not be advanced. If you want to load the data in advance, you need to use it with the previous Applet. The [inject] capability or the &#39;postMessage&#39; capability is prepended.</p>\n<blockquote>\n<p>Under &#39;prerender&#39; condition, the browser cannot complete the pre-rendering work, and its current capability expression is closer to &#39;prefetch&#39;. However, we hope to reserve the pre-rendering capability in the future, so it still retains this option as &#39;prerender&#39;.</p>\n</blockquote>\n</div>\n    '},464:e=>{e.exports='\n    \n<div class="card">\n  <h1>PullToRefresh</h1>\n\n<p><small>AppletConfig &gt; pullToRefresh</small></p>\n<p>When enabled, a seamless page refresh will be triggered when the main scroll container continues to pull down gestures.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  pullToRefresh?: boolean\n  pullToRefreshTargetScrollId?: string\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>The premise of enabling this option is that &quot;FrameworksApplet&quot; also enables this option, otherwise it will not take effect.</p>\n<p>Pull-to-refresh will be associated with a scroll container, the container &quot;id&quot; can be specified by &quot;pullToRefreshTargetScrollId&quot;.</p>\n<p>If no container is specified, it will be associated with the main scroll container by default. For the main scroll bar, please refer to the configuration item &quot;mainScrollID&quot;.By default, the main scroll is associated with the &lt;define-applet&gt; container of the Applet.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        pullToRefresh: true,\n        pullToRefreshTargetScrollId: &#39;root&#39;,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Note the specified scroll container &quot;id&quot; cannot exist in ShadowDom.</p>\n</div>\n    '},9022:e=>{e.exports='\n    \n<div class="card">\n  <h1>Render</h1>\n\n<p><small>AppletConfig &gt; render</small></p>\n<p>In addition to defining the Applet view through the configuration item [source], you can also directly render elements to the Applet through the render method.</p>\n<p>The Applet defined by render will use shadowDOM mode.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  render?: (target: HTMLElement) =&gt; void\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>The &#39;render&#39; function passes in the root node of the Applet, and developers can directly insert the rendering view into the node.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        render: (target) =&gt; {\n          target.innerHTML = `\n              &lt;p&gt;Hello World&lt;/p&gt;\n            `\n        },\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>The best practice solution for using the &#39;render&#39; function is to separate the business logic from the module configuration, and use dynamic &#39;import&#39; parts of the business logic.</p>\n</div>\n    '},1076:e=>{e.exports='\n    \n<div class="card">\n  <h1>Resource</h1>\n\n<p><small>AppletManifest &gt; resource</small></p>\n<p>Static resources that the Applet depends on when it runs.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletResources {\n  script?: Array&lt;string&gt;\n  image?: Array&lt;string&gt;\n  worker?: Array&lt;string&gt;\n  video?: Array&lt;string&gt;\n  audio?: Array&lt;string&gt;\n  font?: Array&lt;string&gt;\n  style?: Array&lt;string&gt;\n  html?: Array&lt;string&gt;\n}\ninterface AppletManifest {\n  resource?: AppletResources\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>When switching from the current Applet to the next Applet, if the current Applet is configured with pre-rendering dependencies (prerender=[${nextApplet}]), the static resources are preloaded before the new Applet is loaded, such as the &#39;script&#39;, &#39;css tags&#39; in HTML, etc., do not need to be declared and configured for the static resources of these internal links, but for the content dynamically loaded through scripts during the running of the page, such as fonts in CSS, dynamically generated media materials, etc., The preloading cannot be completed. At this time, the resources that may be loaded can be preloaded through the resource configuration item.</p>\n<p>The Applet hierarchy will also reflect the effect of the transition animation, from small to large, it is a forward animation; and vice versa, from large to small, it is a reverse animation.</p>\n<p>When the history rolls back to the Applet with level 0, the singleLock event will be triggered. For details, please refer to the relevant description in the [singleLock] configuration.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts"> createApplication({\n              applets: {\n                home: {\n                  resource: [\n                    image: [\n                      &#39;https://yourCDN.com/001.jpg&#39;,\n                      &#39;https://yourCDN.com/002.jpg&#39;,\n                      &#39;https://yourCDN.com/003.jpg&#39;\n                    ]\n                  ],\n                  config: {\n                    title: &#39;Home Page&#39;\n                  }\n                }\n              }\n            })\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>The preload work is not performed immediately, but is loaded sequentially when the browser is idle.</p>\n<blockquote>\n<p>Unknown types that do not exist in the AppletResources type can try preloading with the script type.</p>\n</blockquote>\n</div>\n    '},5491:e=>{e.exports='\n    \n<div class="card">\n  <h1>SafeArea</h1>\n\n<p><small>AppletConfig &gt; safeArea</small></p>\n<p>定义全局的 CSS 应用安全边距变量。（frameworks 程序卡专属配置）</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type ApplicationSafeAreaValue = string | Array&lt;string&gt;\ninterface AppletBaseConfig {\n  safeArea?: ApplicationSafeAreaValue | (() =&gt; ApplicationSafeAreaValue)\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>值为数字时，分别按顺序表示 顶部、右侧、底部、左侧 的安全边距。</p>\n<p>设置该值后将会在程序卡的全局样式中注入 CSS 全局变量：--application-safe-area-top、--application-safe-area-right、--application-safe-area-bottom、--application-safe-area-left 四个对应的安全边距值。</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        safeArea: [&#39;44px&#39;, &#39;0px&#39;, &#39;0px&#39;, &#39;0px&#39;],\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<p>如果需要动态的修改这个值则可以通过发送“safeAreaChange”事件来进行更新。</p>\n<pre><div class="docs-code"><code-highlight type="ts">application.trigger(&#39;safeAreaChange&#39;, [&#39;88px&#39;, &#39;0px&#39;, &#39;0px&#39;, &#39;0px&#39;])\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>当 frameworks 程序卡带有头部导航时，为了能让程序卡正常预留导航栏高度，使用该配置能动态调整该高度。</p>\n</div>\n    '},4006:e=>{e.exports='\n    \n<div class="card">\n  <h1>Sandbox</h1>\n\n<p><small>AppletConfig &gt; sandbox</small></p>\n<p>Sandbox restrictions for Applet containers.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">type SandboxOptions = Array&lt;\n  | &#39;allow-same-origin&#39;\n  | &#39;allow-scripts&#39;\n  | &#39;allow-forms&#39;\n  | &#39;allow-modals&#39;\n  | &#39;allow-orientation-lock&#39;\n  | &#39;allow-popups&#39;\n  | &#39;allow-pointer-lock&#39;\n  | &#39;allow-popups-to-escape-sandbox&#39;\n  | &#39;allow-presentation&#39;\n  | &#39;allow-top-navigation&#39;\n  | &#39;allow-top-navigation-by-user-activation&#39;\n  | &#39;allow-downloads-without-user-activation&#39;\n  | &#39;allow-storage-access-by-user-activation&#39;\n  | &#39;allow-top-navigation-by-user-activation&#39;\n  | string\n&gt;\ninterface AppletBaseConfig {\n  sandbox?: SandboxOptions\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>This option is only available for Applets that have the [source] option set.</p>\n<p>For more information on Sandbox, please refer to the W3C definition.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        sandbox: &#39;allow-modals&#39;,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>If your Applet page is a third-party link, you can use this option to restrict its unnecessary permissions for security reasons.</p>\n</div>\n    '},7281:e=>{e.exports='\n    \n<div class="card">\n  <h1>Animate Effect</h1>\n\n<p><small>AppletConfig &gt; animation</small></p>\n<p>Applet windows transition preset animation effect.</p>\n<hr>\n<p><small>AppletConfig &gt; animationUnderUntouchable</small>\nSets the animation effect when the program card window transitions on devices such as PCs that do not support touch screens.</p>\n<hr>\n<h3>Types</h3>\n\n<p>Lath already has built-in common animation effects, while also allowing developers to develop custom animation effects.</p>\n<pre><div class="docs-code"><code-highlight type="ts">type AnimationFunction = (e: SegueAnimateState) =&gt; undefined | Promise&lt;boolean&gt;\ntype AnimationPrestType =\n  | &#39;inherit&#39;\n  | &#39;fade&#39;\n  | &#39;zoom&#39;\n  | &#39;flip&#39;\n  | &#39;flip-left&#39;\n  | &#39;flip-down&#39;\n  | &#39;flip-right&#39;\n  | &#39;flip-up&#39;\n  | &#39;slide&#39;\n  | &#39;slide-left&#39;\n  | &#39;slide-right&#39;\n  | &#39;slide-up&#39;\n  | &#39;slide-down&#39;\n\ntype SwipeTransitionType = &#39;zoom&#39; | &#39;slide&#39;\n\ntype AnimationConfig =\n  | AnimationPrestType\n  | boolean\n  | Array&lt;AnimationPrestType&gt;\n  | [AnimationFunction, AnimationFunction]\n\ninterface AppletBaseConfig {\n  animation?: AnimationPrestType\n  animationUnderUntouchable?: AnimationConfig\n}\n</code-highlight></div></pre>\n<p>SegueAnimateState is an available object provided in custom animations.</p>\n<pre><div class="docs-code"><code-highlight type="ts">declare interface SegueActionOrigin {\n  x: number\n  y: number\n  target: HTMLElement\n}\ndeclare interface SegueAnimateState {\n  x: number\n  y: number\n  in: Animate\n  out: Animate\n  view: Array&lt;HTMLElement&gt;\n  width: number\n  height: number\n  viewports: Array&lt;HTMLElement&gt;\n  applets: Array&lt;Applet&gt;\n  reverse: boolean\n  direction: number\n  fallbackState: number\n  origin: string | Array&lt;number&gt;\n  attach: string | Array&lt;number&gt;\n  touches: SegueActionOrigin | undefined\n  swipeTransitionType: SwipeTransitionType\n  historyDirection: number\n  callback: (stillness: boolean) =&gt; void\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>Lath provides a choice of common animation effects, just specify your preset effect name to achieve cool windows animation.</p>\n<p>The default transition animation for the program is the <strong>slide-left</strong> effect. When the <a href="?id=swipeModel#docs">swipeModel</a> is enabled, this effect will be given performance acceleration on a separate thread on iOS devices, and compared to other transition effects, it is the <b>best performing option</b> in terms of frame rate performance.</p>\n<p>When the value is set to <strong>inherit</strong> and not configured, the option inherits the value from the FrameworksApplet.</p>\n<p>If the configuration item type is an array, the first function in the array is forward animation and the second function is reverse animation. If the value is a function, you can manually control the animation through the state information in <strong>SegueAnimateState</strong>, such as direction, historyDirection, etc.</p>\n<hr>\n<h3>Example</h3>\n\n<p>Defining built-in animation effects is simple, like this:</p>\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        animation: &#39;slide&#39;,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<p>Defining a custom animation will be a bit more complicated, take the fade animation as an example:</p>\n<pre><div class="docs-code"><code-highlight type="ts">import { SegueAnimateState, Animate } from &#39;lath/app/types&#39;\nconst getAnimate = (type: number) =&gt; {\n  return (type: number) =&gt; {\n    return async (state: SegueAnimateState) =&gt; {\n      let inO: number, outO: number, inV: Animate, outV: Animate\n      switch (type) {\n        case 0:\n          inO = 1\n          outO = 0\n          inV = state.in\n          outV = state.out\n          break\n        case 1:\n        default:\n          inO = 0\n          outO = 1\n          inV = outV = state.in\n      }\n      await inV.duration(0).to(0, 0, 0).opacity(inO).end()\n      await outV.duration(300).opacity(outO).end()\n      return Promise.resolve(false)\n    }\n  }\n}\ncreateApplication({\n  applets: {\n    home: {\n      config: {\n        animation: [getAnimate(0), getAnimate(1)],\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<p>Of course, you can also use functions directly to handle animation effects:</p>\n<pre><div class="docs-code"><code-highlight type="ts">import { SegueAnimateState, Animate } from &#39;lath/app/types&#39;\ncreateApplication({\n  applets: {\n    home: {\n      config: {\n        animation: async (state: SegueAnimateState) =&gt; {\n          if (!state.reverse) {\n            await inV.duration(0).to(0, 0, 0).opacity(1).end()\n            await outV.duration(300).opacity(0).end()\n          } else {\n            await inV.duration(0).to(0, 0, 0).opacity(0).end()\n            await outV.duration(300).opacity(1).end()\n          }\n          return Promise.resolve(false)\n        },\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>Transition animations may fail in some scenarios, such as when the applet is set to <strong>modality</strong> mode, custom animations will be cast.</p>\n<blockquote>\n<p>Each pre-made animation includes a forward animation and a backward animation which effect will be determined by the direction of your browsing history and the [level] level between the Applets.</p>\n</blockquote>\n\n</div>\n<div class="card">\n  <h1>Demo:</h1>\n\n<ul>\n<li><a href="#empty" preset-effect="slide-left" clone-as="empty-left">slide-left</a></li>\n<li><a href="#empty" preset-effect="slide-right" clone-as="empty-right">slide-right</a></li>\n<li><a href="#empty" preset-effect="slide-up" clone-as="empty-up">slide-up</a></li>\n<li><a href="#empty" preset-effect="slide-down" clone-as="empty-down">slide-down</a></li>\n<li><a href="#empty" preset-effect="zoom" clone-as="empty-zoom">zoom</a></li>\n<li><a href="#empty" preset-effect="flip" clone-as="empty-flip">flip</a></li>\n<li><a href="#empty" preset-effect="flip-left" clone-as="empty-flip-left">flip-left</a></li>\n<li><a href="#empty" preset-effect="flip-right" clone-as="empty-flip-right">flip-right</a></li>\n<li><a href="#empty" preset-effect="flip-up" clone-as="empty-flip-up">flip-up</a></li>\n<li><a href="#empty" preset-effect="flip-down" clone-as="empty-flip-down">flip-down</a></li>\n<li><a href="#empty" preset-effect="fade" clone-as="empty-fade">fade</a></li>\n</ul>\n</div>\n    '},4274:e=>{e.exports='\n    \n<div class="card">\n  <h1>SingleFlow</h1>\n\n<p><small>FrameworksAppletConfig &gt; singleFlow</small></p>\n<p>Turn on historical hierarchical flow direction control. (Frameworks Applet exclusive configuration)</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface FrameworksAppletConfig {\n  singleFlow?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>Only the historical fallback direction of the Applet is allowed to fall back to the Applet with a smaller level, if the returned Applet level is greater than or equal to the current Applet level, the Applet is directly skipped and continues to return to the earlier Applet in the history until the conditions are met.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    frameworks: {\n      config: {\n        singleFlow: true,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>For example, from the Applet that generates the order function to the Applet that pays the order, after the successful payment enters the &#39;My Order Module Applet&#39;, when it is completed to roll back, it can be returned directly to the order card by opening the configuration item and combining the Applet level rules, so that it can directly return to the order to generate the Applet, without going through the various Applets in the order completion process.</p>\n</div>\n    '},9157:e=>{e.exports='\n    \n<div class="card">\n  <h1>SingleLock</h1>\n\n<p><small>FrameworksAppletConfig &gt; singleLock</small></p>\n<p>When an Applet falls back to the program exit (level === 0 Applet),the organization history continues to fallback when the return operation is performed.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface FrameworksAppletConfig {\n  singleLock?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>When a fallback is locked, continuing to fallback begins recording the number of fallbacks and can be used to decide whether the Applet is allowed to exit through the [holdBack] configuration in &#39;frameworks Applets&#39;.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    frameworks: {\n      config: {\n        singleLock: true,\n        holdBack: (event) =&gt; {\n          // Determine whether to exit\n          return true\n        },\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<p>As configured above, when jumping from other pages to the application, when the browser back button is clicked, it will not exit the application page, but will be judged whether it should be exited through the [holdBack] configuration in frameworks applet, and the number of times the user clicks the back button is returned.</p>\n</div>\n    '},5816:e=>{e.exports='\n    \n<div class="card">\n  <h1>Source</h1>\n\n<p><small>AppletConfig &gt; source</small></p>\n<p>Define the HTML source code for the applet, which will run inside the container created by Lath.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  source?: EitherOr&lt;\n    {\n      src?: string\n      html?: string | (() =&gt; Promise&lt;string&gt; | string)\n    },\n    &#39;src&#39;,\n    &#39;html&#39;\n  &gt;\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>Can be divided into Source Mode and Link Mode.</p>\n<hr>\n<h3>Example</h3>\n\n<p><strong>Source Mode</strong></p>\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        title: &#39;Home Page&#39;,\n        source: {\n          html: `\n            &lt;html lang=&quot;en&quot;&gt;\n            &lt;head&gt;&lt;/head&gt;\n            &lt;body&gt;\n              Hello World!\n            &lt;/body&gt;\n            &lt;/html&gt;\n            `,\n        },\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<p><strong>Link Mode</strong></p>\n<pre><div class="docs-code"><code-highlight type="js">export default {\n  config: {\n    title: &#39;Home Page&#39;,\n    source: {\n      src: &#39;http://yoursite.com&#39;,\n    },\n  },\n}\n</code-highlight></div></pre>\n<p>Choose one of the two modes. And if they coexist, the src Link Mode will take precedence.</p>\n<hr>\n<h3>Notes</h3>\n\n<blockquote>\n<p>When using Link Mode, you need to comply with the same-origin policy, otherwise some capabilities will not be enabled, such as Capture, Apply, Inject, etc. If you need to use these features, you need to also connect the target page to Lath and turn on the &#39;tunneling&#39; mode, which can be referred to &quot;PresetConfig &gt; tunneling&quot;.</p>\n</blockquote>\n</div>\n    '},4755:e=>{e.exports='\n    \n<div class="card">\n  <h1>Why use it?</h1>\n\n<p>IF YOU WANT TO CREATE DELIGHTFUL APP EXPERIENCES WITH WEB TECHNOLOGY, <strong>YOU&#39;LL TYPICALLY FACE THE FOLLOWING QUESTIONS</strong>:</p>\n<ul>\n<li>Assemble pages of different technology types together and make sure they don&#39;t interfere with each other</li>\n<li>Routing between pages requires smooth transitions and gestures, which can be a challenge especially in terms of performance</li>\n<li>You need to complete complex system design such as page preload acceleration and lifecycle management</li>\n<li>Create a good configuration and automation system In practice, you may face more difficulties and challenges. Now, it&#39;s all going to be much simpler, and you just need to use Lath.</li>\n</ul>\n\n</div>\n<div class="card">\n  <h1>Concept</h1>\n\n<p>Before getting started quickly, let&#39;s first understand the basic concepts and terms.</p>\n<ul>\n<li><strong>Lath</strong>: Lath is an experience enhancement container with a first dependency of only about <strong>5kb</strong>. Its atomic core capabilities are automatically on-demand.</li>\n<li><strong>Application</strong>: A Lath application is composed of several Applets.</li>\n<li><strong>Applet</strong>: An Applet is composed of one page or one View and its related configuration files.</li>\n<li><strong>FrameworksApplet</strong>: Each Lath Application must have a frame-type Applet, which mainly carries public capabilities, such as navigation bars and so on.</li>\n</ul>\n<blockquote>\n<p>Lath application is actually a SPA (single page application), its corresponding routing view can be a slice view inside itself or an external page view, no matter what type of view it is, it is used as an applet the entity content exists.</p>\n</blockquote>\n\n</div>\n<div class="card">\n  <h1>Apply</h1>\n\n<p>Using <strong>npm / yarn</strong> to install</p>\n<pre><div class="docs-code"><code-highlight type="bash">$ npm install lath --save\n// or\n$ yarn add lath\n</code-highlight></div></pre>\n<hr>\n<p>Suppose we want to make a SPA (single page application) now, and we have made each routing page corresponding to the application, then we only need to assemble it in the following way:</p>\n<p>Use the <strong>&lt;define-application&gt;</strong> container as the root node to wrap the entire content of the page, so that the page is declared as a Lath application, and then use <strong>&lt;define-applet&gt;</strong> container inside it to wrap a specific routing view (we can understand it as a page in a traditional SPA) so that the wrapping view is declared as a view of an Applet entity.</p>\n<pre><div class="docs-code"><code-highlight type="html">&lt;body&gt;\n  &lt;define-application default-applet=&quot;appletA&quot;&gt;\n    &lt;define-applet applet-id=&quot;appletA&quot;&gt;\n      &lt;div&gt;This is the content of &#39;appletA&#39;&lt;/div&gt;\n    &lt;/define-applet&gt;\n    &lt;define-applet applet-id=&quot;appletB&quot;&gt;\n      &lt;div&gt;This is the content of &#39;appletB&#39;&lt;/div&gt;\n    &lt;/define-applet&gt;\n  &lt;/define-application&gt;\n&lt;/body&gt;\n</code-highlight></div></pre>\n<ul>\n<li>The attribute <strong>“default-applet”</strong> on &lt;define-application&gt; can specify an applet name as the default view when the application is initialized, that is, the earliest view visible to the user.</li></li>\n<li>The attribute <strong>“applet-id”</strong> on &lt;define-applet&gt; is the declared applet name</li></li>\n</ul>\n<blockquote>\n<p>&quot;default-applet&quot; is the applet declared by &lt;define-applet&gt; in the &lt;define-application&gt; package. When the page is opened in the browser, only the specified applet view is visible, and other views are not visible.</p>\n</blockquote>\n<p>Using lable wrapping is the first step in creating a Lath application. Next, we also need to configure properties for each declared applet, such as setting a title for each applet.</p>\n<pre><div class="docs-code"><code-highlight type="ts">import { createApplication } from &#39;lath&#39;\ncreateApplication({\n  applets: {\n    frameworks: {\n      config: {\n        title: &#39;Lath Demo&#39;,\n      },\n    },\n    appletA: {\n      config: {\n        title: &#39;Page A&#39;,\n      },\n    },\n    appletB: {\n      config: {\n        title: &#39;Page B&#39;,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<p>We use the &lt;define-application&gt; container to declare the application, but to actually start the application we also need to execute the <strong>createApplication</strong> method, and pass in the Applet related configuration.</p>\n<p>Unsurprisingly we will get a &quot;magic&quot; page, at which point we can do this via the A link or <a to-applet="docs?id=apiApplicationTo" clone-as="popDoc">Application.to</a> etc. methods are routed to a defined Applet view.</p>\n<hr>\n<p>In general, we will not integrate all the routing pages that may be loaded in the application into one page at one time, but hope to load on demand, then we only need to express it through the configuration information:</p>\n<pre><div class="docs-code"><code-highlight type="ts">import { createApplication } from &#39;lath&#39;\ncreateApplication({\n  applets: {\n    frameworks: {\n      config: {\n        title: &#39;Lath Demo&#39;,\n      },\n    },\n    home: {\n      config: {\n        title: &#39;home&#39;,\n        source: {\n          src: &#39;https://www.yoursite.com/home.html&#39;,\n        },\n      },\n    },\n  },\n}).then((application) =&gt; {\n  // return application\n  console.log(application)\n})\n</code-highlight></div></pre>\n<p>Applet views can be declared not only through &lt;define-applet&gt;, but also through configuration items <a to-applet="docs?id=source" clone-as="popDoc">source</a>.</p>\n<p>When using source to define an applet view, there is no need to declare it with &lt;define-applet&gt;.</p>\n<blockquote>\n<p>Generally, we will declare the frameworks Applets and the first screen Applet by the method of &lt;define-applet&gt;, and the other Applets will be declared by configuring the &#39;source&#39; method, which can ensure the maximum loading speed of the first screen.</p>\n</blockquote>\n</div>\n    '},7448:e=>{e.exports='\n    \n<div class="card">\n  <h1>TapStatusBarToScrollToTop</h1>\n\n<p><small>AppletConfig &gt; tapStatusBarToScrollToTop</small></p>\n<p>When turned on, when you click on the status bar at the top of the window, the main scroll container scrolls to the top.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  tapStatusBarToScrollToTop?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>This option will be reflected on the main scroll, the main scroll bar refers to the configuration item &quot;mainScrollID&quot;, the default main scroll is associated as the &#39;body&#39; container of the Applet.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        tapStatusBarToScrollToTop: true,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>The launch of this option depends on the configuration item &quot;mainScrollID&quot;.</p>\n</div>\n    '},5174:e=>{e.exports='\n    \n<div class="card">\n  <h1>Timeout</h1>\n\n<p><small>AppletConfig &gt; timeout</small></p>\n<p>The valid duration of the Applet life cycle, in milliseconds.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  timeout?: number\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>When the Applet meets the cache conditions or is set to allow background running (background=true), the Applet will check the expiration status before the second entry, and will perform an update operation when it is checked that the Applet has expired.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        timeout: 36000,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>If the value is set to 0, background running (background=true) will not take effect.</p>\n</div>\n    '},5960:e=>{e.exports='\n    \n<div class="card">\n  <h1>title</h1>\n\n<p><small>AppletConfig &gt; title</small></p>\n<p>Applet titles, mainly used for the display of browser window titles.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  title?: string\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>When the window is switched, the configuration item acts as the Title tab in the page.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        title: &#39;Home Page&#39;,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<blockquote>\n<p>When the system Applets, framework Applets and home page Applets are set to title at the same time, their display weights are: home page &gt; framework &gt; system. In fact, this option for the system type Applet is unnecessary because it never takes effect.</p>\n</blockquote>\n</div>\n    '},7977:e=>{e.exports='\n    \n<div class="card">\n  <h1>Transient</h1>\n\n<p><small>AppletConfig &gt; transient</small></p>\n<p>Mark the Applet as a temporary module.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  transient?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>When the Applet switches to the background, it is immediately destroyed and all temporary configuration data for the Applet is deleted at the same time.</p>\n<p>URL-type Applets (i.e. temporary modules without custom configuration) opened through a new window (A link or API - pushWindow) are automatically marked.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    demoPage: {\n      config: {\n        transient: true,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>This parameter can generally be used when there is no reuse of your Applet, such as dynamically generated Applets that cannot be enumerated.</p>\n<blockquote>\n<p>What is the significance of this configuration item? When a build module accessed by the A link accumulates a lot of useless Applet configurations because the links cannot be enumerated, turning on this option eliminates these meaningless memory consumption.</p>\n</blockquote>\n\n</div>\n<div class="card">\n  <h1>DisableTransient</h1>\n\n<p><small>AppletConfig &gt; disableTransient</small></p>\n<p>&#39;DisableTransient&#39; echoes &#39;Transient&#39;, and this parameter allows you to turn off the default &#39;Transient&#39; behavior.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  disableTransient?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>If, in a particular case, the module does not need to define any configuration (or the developers is lazy to set it) and the module is actually enumerable (the automatically generated configuration is also meaningful, and there is a possibility of reuse rather than temporary Applets), so configuring this option turns off the mechanism for automatically clearing the generated Applet configuration.</p>\n</div>\n    '},5991:e=>{e.exports='\n    \n<div class="card">\n  <h1>Tunneling</h1>\n\n<p><small>PresetConfig &gt; tunneling</small></p>\n<p>Set the app to &quot;Tunnel Mode&quot;. (Preconfigured items before the app starts.)</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface PresetConfig {\n  tunneling?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<blockquote>\n<p>If you access a cross-domain Applet under the current domain, the cross-domain Applet cannot be implemented due to the same-origin policy, the global style variable update, and the ability in [Apply] (such as a new window).</p>\n</blockquote>\n<p>Some of the limitations of the cross-domain Applet page are addressed by plugging the cross-domain Applet page to Lath and turning on [tunneling].</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  tunneling: true,\n  applets: {\n    ...\n  }\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>When the page is connected to Lath and [tunneling] is turned on, the page itself is a separate application, but when the page is embedded in another Lath application as a Applet, the page opened through the A link (i.e. pushWindow) will not be opened within the application, but will proxied to open in the parent application, if the parent application is also embedded Lath application, and also opened [tunneling] will continue to &quot;tunnel&quot; upwards.</p>\n</div>\n    '},2331:e=>{e.exports='\n    \n<div class="card">\n  <h1>UseMirroring</h1>\n\n<p><small>AppletConfig &gt; useMirroring</small></p>\n<p>Persists the last accessed image file for quick rendering on the next access.</p>\n<hr>\n<h3>Types</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">interface AppletBaseConfig {\n  useMirroring?: boolean\n}\n</code-highlight></div></pre>\n<hr>\n<h3>Details</h3>\n\n<p>When an Applet page is destroyed, its internal HTML is localized and persistently stored, and the last access result is rendered immediately on the next visit until the new content is loaded and disappears.</p>\n<hr>\n<h3>Example</h3>\n\n<pre><div class="docs-code"><code-highlight type="ts">createApplication({\n  applets: {\n    home: {\n      config: {\n        useMirroring: true,\n      },\n    },\n  },\n})\n</code-highlight></div></pre>\n<hr>\n<h3>Notes</h3>\n\n<p>When the local storage overflows, all localStorage local data is cleared, which is generally used in some scenarios with low frequency of change, so please fully consider the rationality of the logic before use.</p>\n<blockquote>\n<p>Mirror restore cannot store and restore &#39;Web Components&#39;, &#39;ShadowDom&#39;, and embedded media such as &#39;iframe&#39;, &#39;canvases&#39;, &#39;objects&#39;, etc. in pages, and should be considered when using this option.</p>\n</blockquote>\n</div>\n    '},3048:(e,n,t)=>{"use strict";t.r(n),t.d(n,{FAQ:()=>i,allowHost:()=>V,apiAppletColor:()=>P,apiAppletDock:()=>se,apiAppletEvents:()=>o,apiAppletRefresh:()=>a,apiAppletSameOrigin:()=>p,apiAppletSlideView:()=>l,apiAppletView:()=>s,apiAppletViewType:()=>r,apiApplicationActivityApplet:()=>h,apiApplicationEvents:()=>c,apiApplicationExists:()=>d,apiApplicationGet:()=>g,apiApplicationPreActivityApplet:()=>u,apiApplicationPushWindow:()=>m,apiApplicationTo:()=>f,apiApplicationUpdateGlobalCSSVariables:()=>y,apiApplicationUpdateSafeArea:()=>v,appletManifestProcess:()=>w,apply:()=>A,background:()=>b,capture:()=>k,color:()=>T,components:()=>x,customEffect:()=>S,defaultSlideViewApplets:()=>C,events:()=>E,free:()=>q,globalCSSVariables:()=>D,holdBack:()=>W,index:()=>pe,inject:()=>le,level:()=>L,limit:()=>O,mainScrollId:()=>I,mediaGuard:()=>M,modality:()=>N,noShadowDom:()=>F,notFound:()=>j,openSlideViewLeftHolder:()=>B,portal:()=>H,preIndex:()=>R,prerender:()=>G,pullToRefresh:()=>z,render:()=>U,resource:()=>Y,safeArea:()=>J,sandbox:()=>_,segueEffect:()=>$,singleFlow:()=>Q,singleLock:()=>X,source:()=>K,start:()=>Z,tapStatusBarToScrollToTop:()=>ee,timeout:()=>ne,title:()=>te,transient:()=>ie,tunneling:()=>oe,useMirroring:()=>ae});var i=t(2929),o=t(2654),a=t(2840),p=t(9003),l=t(5554),s=t(7252),r=t(5079),h=t(8973),c=t(2201),d=t(2063),g=t(3099),u=t(5050),m=t(4295),f=t(5838),y=t(3552),v=t(1747),w=t(5002),A=t(5948),b=t(3554),k=t(3274),T=t(5834),x=t(5126),S=t(794),C=t(6702),E=t(1624),q=t(9138),D=t(12),W=t(602),V=t(4003),P=t(7610),L=t(9825),O=t(8679),I=t(4669),M=t(8332),N=t(8681),F=t(5192),j=t(9908),B=t(3693),H=t(6103),R=t(4644),G=t(9629),z=t(464),U=t(9022),Y=t(1076),J=t(5491),_=t(4006),$=t(7281),Q=t(4274),X=t(9157),K=t(5816),Z=t(4755),ee=t(7448),ne=t(5174),te=t(5960),ie=t(7977),oe=t(5991),ae=t(2331),pe=t(9286),le=t(6414),se=t(3569)}}]);