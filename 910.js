"use strict";(self.webpackChunklath_docs=self.webpackChunklath_docs||[]).push([[910],{910:(e,t,p)=>{p.r(t),p.d(t,{allowHost:()=>w,appletColor:()=>ie,appletEvents:()=>oe,appletManifestProcess:()=>C,appletRefresh:()=>le,appletSameOrigin:()=>ae,appletSlideView:()=>te,appletView:()=>pe,appletViewType:()=>ne,applicationActiveApplet:()=>X,applicationEvents:()=>K,applicationExists:()=>Y,applicationGet:()=>Q,applicationPreActiveApplet:()=>q,applicationPushWindow:()=>J,applicationTo:()=>$,applicationUpdateGlobalCSSVariables:()=>ee,applicationUpdateSafeArea:()=>Z,apply:()=>O,background:()=>g,capture:()=>S,color:()=>r,components:()=>m,customEffect:()=>u,defaultSlideViewApplets:()=>M,events:()=>j,free:()=>h,globalCSSVariables:()=>V,holdBack:()=>G,index:()=>o,inject:()=>k,install:()=>n,level:()=>y,limit:()=>d,mainScrollId:()=>z,mediaGuard:()=>A,modality:()=>c,noShadowDom:()=>B,notFound:()=>W,openSlideViewLeftHolder:()=>P,portal:()=>b,preIndex:()=>I,prerender:()=>f,presetEffect:()=>s,pullToRefresh:()=>N,render:()=>E,resource:()=>x,safeArea:()=>D,sandbox:()=>T,singleFlow:()=>F,singleLock:()=>R,source:()=>i,start:()=>l,tapStatusBarToScrollToTop:()=>H,timeout:()=>v,title:()=>a,transient:()=>_,tunneling:()=>L,tutorialSlidingCards:()=>he,useMirroring:()=>U});const n={title:"Install & Preface",content:[[{type:"title",value:"安装"},{type:"text",value:"使用 <b>npm / yarn</b> 安装"},{type:"code",value:'\n          <code-highlight type="bash">\n            $ npm install lath --save\n            // or\n            $ yarn add lath\n          </code-highlight>\n        '},{type:"text",value:"Lath(中文名：板条) 是一个体验增强容器，其初始依赖非常小，仅有 <b>5kb</b> 左右。它的核心能力都是原子化的，只有在被需要时才会动态载入依赖。"}],[{type:"title",value:"为什么使用它？"},{type:"text",value:'它能让你的页面体验更上一阶，实现媲美原生 Apps 的效果，比如<a to-applet="doc?id=modality" clone-as="popDoc">预载二级页面</a>，<a to-applet="doc?id=pullToRefresh" clone-as="popDoc">Pop Sheet</a> 交互效果，<a to-applet="doc?id=pullToRefresh" clone-as="popDoc">平滑无闪烁下拉刷新</a>，实现无缝的<a to-applet="doc?id=presetEffect" clone-as="popDoc">页面转场效果</a>以及流畅的<a to-applet="doc?id=presetEffect" clone-as="popDoc">页面横滑效果</a>等等诸多实现方案。'},{type:"text",value:"当你要获得这一切时并无需对原有逻辑和框架做出改变，甚至在初始页面的加载时也不会有对页面性能产生阻塞。"},{type:"text",value:"Lath 在窗口管理上有着非常优秀的设计，不仅能自动帮你进行资源回收，还能对页面间的事件进程进行自动管控，用它创建的应用是真正能达到媲美 Native Apps 的 Web App。"},{type:"text",value:"接下来就开始上手吧！"}]]},l={title:"Install & Preface",content:[[{type:"title",value:"概念"},{type:"text",value:"快速入门前，让我们先了解一下基本概念。"},{type:"text",value:"\n          <ul>\n            <li><b>Application</b>: 一个 Lath 应用是由若干个程序卡（Applet）组成的。</li>\n            <li><b>Applet</b>: 一个程序卡是由一个页面或一个 View、以及其有关配置文件所组成的。</li>\n            <li><b>FrameworksApplet</b>: 每个 Lath 应用必有一个框架类型的程序卡，其主要承载公共能力，比如导航栏等等。</li>\n          </ul>\n        "},{type:"tips",value:"Lath 应用实际上是一个 SPA（单页应用），它所对应的路由视图可以是自己内部的一个切片视图也可以是外部的一个页面视图，无论是哪种类型的视图，其都是作为一个 Applet 的实体内容存在的。"}],[{type:"title",value:"使用"},{type:"text",value:"假使我们现在要制作一个 SPA（单页面）应用，并且我们已经制作好应用对应的每一个路由页面，那么我们只需要通过下面的方式将其组装："},{type:"text",value:"使用 <b>&lt;define-application></b> 容器作为根节点来包裹页整个面内容，使页面被声明为一个 Lath 应用，然后在其内部使用 <b>&lt;define-applet></b> 容器包裹具体的路由视图（我们可以理解为传统 SPA 应用中的一个页面）使包裹视图被声明为一个 Applet 实体的视图。"},{type:"code",value:"\n          <code-highlight type='html'>\n            &lt;body>\n              &lt;define-application default-applet=\"appletA\">\n                &lt;define-applet applet-id=\"appletA\">\n                  &lt;div>\n                    This is the content of 'appletA'\n                  &lt;/div>\n                &lt;/define-applet>\n                &lt;define-applet applet-id=\"appletB\">\n                  &lt;div>\n                    This is the content of 'appletB'\n                  &lt;/div>\n                &lt;/define-applet>\n              &lt;/define-application>\n            &lt;/body>\n          </code-highlight>\n        "},{type:"text",value:"\n          <ul>\n            <li>&lt;define-application> 上的属性 <b>“default-applet”</b> 可指定一个 Applet 名，做为初始化应用时的默认视图，即用户最早可见的视图。</li>\n            <li>&lt;define-applet> 上的属性 <b>“applet-id”</b> 为声明的 Applet 名。</li>\n          </ul>\n        "},{type:"tips",value:"“default-applet” 为 &lt;define-application> 包裹中已经通过 &lt;define-applet> 所声明的 Applet，当页面在浏览器中打开时仅该指定的 Applet 视图是可见的，其余视图则不可见。"},{type:"text",value:"使用标签包裹是创建 Lath 应用的第一步，下面我们还要为每个已声明的 Applet 进行特性配置，比如为每个 Applet 设定一个标题。"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            import { createApplication } from 'lath'\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    title: 'Lath Demo'\n                  }\n                },\n                appletA: {\n                  config: {\n                    title: 'Page A'\n                  }\n                },\n                appletB: {\n                  config: {\n                    title: 'Page B'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"text",value:'我们使用 &lt;define-application> 容器是为了声明应用，但要真正启动应用还需要执行 <a to-applet="doc?id=install" clone-as="popDoc">createApplication</a> 方法，并传入 Applet 相关配置。'},{type:"text",value:'不出意外我们将得到一个“施了魔法”的页面，此时我们可以通过 A 链接或 <a to-applet="doc?id=applicationTo" clone-as="popDoc">Application.to</a> 等方法路由到已定义的程序卡视图上。'},{type:"hr"},{type:"text",value:"一般情况下我们不会将应用中所有可能被加载的路由页面都一次性集成在一个页面中，而是希望能按需载入，那我们只需通过配置信息来表达即可："},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            import { createApplication } from 'lath'\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    title: 'Lath Demo'\n                  }\n                },\n                home: {\n                  config: {\n                    title: 'home',\n                    source: {\n                      src: 'https://www.yoursite.com/home.html' \n                    }\n                  }\n                }\n              }\n            }).then((application) => {\n              // 返回 application 对象\n              console.log(application)\n            })\n          </code-highlight>\n        "},{type:"text",value:'Applet 的视图不光可以通过 &lt;define-applet> 进行声明，也可以通过配置项  <a to-applet="doc?id=source" clone-as="popDoc">source</a> 进行声明。'},{type:"text",value:"当使用 source 定义 Applet 视图时则无需再使用 &lt;define-applet> 进行声明。"},{type:"tips",value:"一般我们会将 frameworks 程序卡和首屏程序卡通过 &lt;define-applet> 的方式进行声明，其余程序卡则通过配置 source 的方式进行声明，这样可以保证最大程度的首屏加载速度。"}],[{type:"title",value:"常见问题"},{type:"text",value:"<b>使用 &lt;define-applet> 声明后滚动事件去哪了？</b>"},{type:"text",value:"每一个 Applet 视图都相当于是一个完整的页面内容，其都应具有自身的滚动容器，因此当使用 &lt;define-applet> 进行声明后，其内部和滚动事件相关的逻辑需要从“body”中移除，修改绑定到自身的 &lt;define-applet> 标签元素上。"},{type:"hr"},{type:"text",value:"<b>如何引入跨域的页面视图？</b>"},{type:"text",value:'当使用 source 声明 Applet 的视图，若其 src 页面指向为一个跨域页面，则该页面中的被代理类型的能力将会受到限制，若要解决此问题可在引用页面中同样引入 Lath 并开启选项 <a to-applet="doc?id=tunneling" clone-as="popDoc">PresetConfig > tunneling</a> 来解除一些限制。'},{type:"hr"},{type:"text",value:"<b>Lath 对执行时机有要求吗？</b>"},{type:"text",value:"Lath 作为体验加强容器并非是首屏上所必须的，因此我们建议在首屏加载完成后再执行 createApplication 方法，不阻塞首屏内容呈现。"},{type:"hr"},{type:"text",value:"<b>Typescript&JSX 警告？</b>"},{type:"text",value:"当使用 Typescript 在 React 环境时，我们需要对容器的标签进行类型定义，否则 ts 将会产生警告，此时在项目中添加该 type.d.ts 文件即可。"},{type:"code",value:"\n          <code-highlight type='ts'>\n            // type.d.ts\n            import 'lath'\n            declare namespace JSX {\n              interface IntrinsicElements {\n                'define-applet': {\n                  children: Element\n                  'applet-id': string\n                }\n                'define-application': {\n                  children: Element\n                  'default-applet': string\n                }\n              }\n            }\n          </code-highlight>\n        "}],[{type:"title",value:"相关链接"},{type:"text",value:'<a href="https://github.com/ioing/lath-vue-example">一个在 Vue 项目中使用 Lath 进行开发的代码示例</a>'}]]},a={title:"Title",content:[[{type:"title",value:"Title"},{type:"sub",value:"AppletConfig > title"},{type:"text",value:"程序卡标题，主要用于浏览器窗口标题的显示。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              title?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:'当窗口切换时，该配置项相当于页面中的 "Title" 标签的作用。'},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    title: 'Home Page'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"tips",value:"当 system 程序卡、 frameworks 程序卡 以及首页程序卡同时设置 title 时，它们的显示权重是： 首页程序卡 > frameworks 程序卡 > system 程序卡。而实际上 system 类型程序卡的此选项是不必要的，因为它从不会生效。"}]]},i={title:"Source",content:[[{type:"title",value:"Source"},{type:"sub",value:"AppletConfig > source"},{type:"text",value:"定义程序卡的 HTML 源代码，该源代码将在 Lath 创建的容器内运行。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            interface AppletBaseConfig {\n              source?: EitherOr<{\n                src?: string\n                html?: string | (() => Promise<string> | string)\n              }, 'src', 'html'>,\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"可设置为源码模式与链接模式两种模式。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"text",value:"<b>源码模式</b>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    title: \'Home Page\',\n                    source: {\n                      html: `\n                        &lt;html lang="en">\n                        &lt;head>&lt;/head>\n                        &lt;body>\n                          Hello World!\n                        &lt;/body>\n                        &lt;/html>\n                        `\n                    },\n                    ...\n                  }\n                },\n                ...\n              }\n            })\n          </code-highlight>\n        '},{type:"text",value:"<b>链接模式</b>"},{type:"code",value:"\n          <code-highlight type=\"js\">\n            export default {\n              config: {\n                  title: 'Home Page',\n                  source: {\n                  src: 'http://yoursite.com'\n                }\n              }\n            }\n          </code-highlight>\n        "},{type:"text",value:"两种模式选其一，若共存时将以 src 链接模式优先。"},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"使用链接模式时需符合同源策略，否者某些能力将无法开启，比如 Capture、Apply、Inject 等。若需要使用这些特性，则需要将目标页面也同样接入 lath，并开启“隧穿”模式，可参考“PresetConfig > tunneling”。"}]]},o={title:"Index",content:[[{type:"title",value:"Index"},{type:"sub",value:"FrameworksAppletConfig > index"},{type:"text",value:"定义应用的默认入口的程序卡。（frameworks 程序卡专属配置）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface FrameworksAppletConfig {\n              index?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"启动 Lath 应用时首先会先启动 frameworks 程序卡，然后根据“index”配置启动首页程序卡。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    index: 'home'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"text",value:"当应用启动时将首先初始化名称为“home”的程序卡。"}]]},h={title:"Free",content:[[{type:"title",value:"Free"},{type:"sub",value:"AppletConfig > free"},{type:"text",value:"定义程序卡的窗口展示类型。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              free?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"free 等于 true 时，程序卡以“全屏模式”运行，即不受框架程序卡（Applets[id = frameworks]）的约束。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    free: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"假设 frameworks 程序卡是一个带有 tabBar 功能的模块，此时程序卡将直接覆盖整个框架程序卡运行，反之程序卡则会在框架程序卡之内运行（即表现为 tabBar 覆盖在程序卡之上）。"}]]},y={title:"Level",content:[[{type:"title",value:"Level"},{type:"sub",value:"AppletConfig > level"},{type:"text",value:"程序卡视图窗口显示层级。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              level?: number\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"一般首屏程序卡的层级为 0，根据访问深度而逐级增大。"},{type:"text",value:"程序卡层级关系还将反应在转场动画的效果上，从小到大为正向动画，反之从大到小时为逆向动画。"},{type:"text",value:"当历史回退到层级为 0 的程序卡时，会触发 singleLock 事件，具体可查看 [singleLock] 配置中的相关描述。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    level: 1\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"若跳转的两个模块是为同层级模块，则转场动画效果会被自动关闭。"},{type:"tips",value:"为什么同级模块动画关闭？：同级模块动画关闭主要场景是用于 tab 切换，一般 tab 切换时不需要一个窗口动画效果，但是从其它层级的窗口切换过来时可能又是需要动画效果的。"}]]},r={title:"Color",content:[[{type:"title",value:"Color"},{type:"sub",value:"AppletConfig > color"},{type:"text",value:"定义程序卡的初始窗口背景色。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              color?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"默认背景色可以在程序卡未加载完成时呈现良好的视觉过渡。"},{type:"text",value:"默认值会根据浏览器是否为“Dark 模式”来自动填充黑色/白色。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    color: '#000'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"请选用合适的背景色来填充程序卡窗口，以确保视觉效果的连贯性。"},{type:"tips",value:"当背景色与程序卡内容不一致时，用户很有可能见到一个闪烁。"}]]},s={title:"Animate Effect",content:[[{type:"title",value:"Animate Effect"},{type:"sub",value:"AppletConfig > animation"},{type:"text",value:"程序卡窗口转场预置动画效果。"},{type:"hr"},{type:"title",value:"Demo"},{type:"text",value:'\n          <ul>\n            <li>\n              <svg t="1661238867400" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="25438" width="200" height="200"><path d="M512 17.066667C238.933333 17.066667 17.066667 238.933333 17.066667 512S238.933333 1006.933333 512 1006.933333 1006.933333 785.066667 1006.933333 512 785.066667 17.066667 512 17.066667z m358.4 477.866666c0 54.613333-47.786667 102.4-102.4 102.4h-276.48l44.373333 44.373334c37.546667 37.546667 37.546667 95.573333 0 129.706666-17.066667 17.066667-40.96 27.306667-64.853333 27.306667s-47.786667-10.24-64.853333-27.306667L170.666667 535.893333c-23.893333-23.893333-23.893333-61.44 0-85.333333l235.52-235.52c34.133333-34.133333 95.573333-34.133333 129.706666 0 37.546667 37.546667 37.546667 95.573333 0 129.706667l-44.373333 47.786666h276.48c54.613333 0 102.4 44.373333 102.4 102.4z" fill="#707070" p-id="25439"></path></svg>\n              左侧滑动(默认) <a href="#empty" preset-effect="slide-left" clone-as="empty-left">slide-left</a>\n            </li>\n            <li>\n              <svg t="1661238590211" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="15411" width="200" height="200"><path d="M512 1006.933333c273.066667 0 494.933333-221.866667 494.933333-494.933333S785.066667 17.066667 512 17.066667 17.066667 238.933333 17.066667 512 238.933333 1006.933333 512 1006.933333z m-358.4-477.866666c0-54.613333 47.786667-102.4 102.4-102.4h276.48l-44.373333-44.373334c-37.546667-37.546667-37.546667-95.573333 0-129.706666 17.066667-17.066667 40.96-27.306667 64.853333-27.306667s47.786667 10.24 64.853333 27.306667l235.52 235.52c23.893333 23.893333 23.893333 61.44 0 85.333333l-235.52 235.52c-34.133333 34.133333-95.573333 34.133333-129.706666 0-37.546667-37.546667-37.546667-95.573333 0-129.706667l44.373333-47.786666H256c-54.613333 0-102.4-44.373333-102.4-102.4z" fill="#707070" p-id="15412"></path></svg>\n              右侧滑动 <a href="#empty" preset-effect="slide-right" clone-as="empty-right">slide-right</a>\n            </li>\n            <li>\n              <svg t="1661238767871" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="20430" width="200" height="200"><path d="M512 0C228.693333 0 0 228.693333 0 512s228.693333 512 512 512 512-228.693333 512-512S795.306667 0 512 0z m279.893333 556.373333c-34.133333 34.133333-95.573333 34.133333-129.706666 0L614.4 508.586667V785.066667c0 58.026667-44.373333 102.4-102.4 102.4s-102.4-44.373333-102.4-102.4v-273.066667l-44.373333 44.373333c-34.133333 34.133333-95.573333 34.133333-129.706667 0-37.546667-37.546667-37.546667-95.573333 0-129.706666l235.52-235.52c23.893333-23.893333 61.44-23.893333 85.333333 0l235.52 235.52c17.066667 17.066667 27.306667 40.96 27.306667 64.853333s-10.24 47.786667-27.306667 64.853333z" fill="#707070" p-id="20431"></path></svg>\n              上侧滑动 <a href="#empty" preset-effect="slide-up" clone-as="empty-up">slide-up</a>\n            </li>\n            <li>\n              <svg t="1661238893748" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="25711" width="200" height="200"><path d="M512 0C228.693333 0 0 228.693333 0 512s228.693333 512 512 512 512-228.693333 512-512S795.306667 0 512 0z m276.48 597.333333l-235.52 235.52c-10.24 13.653333-27.306667 20.48-40.96 20.48s-30.72-6.826667-40.96-17.066666l-235.52-235.52c-20.48-20.48-30.72-44.373333-30.72-68.266667s10.24-47.786667 27.306667-64.853333c34.133333-34.133333 95.573333-34.133333 129.706666 0L409.6 512V238.933333c0-58.026667 44.373333-102.4 102.4-102.4s102.4 44.373333 102.4 102.4v273.066667l44.373333-44.373333c34.133333-34.133333 95.573333-34.133333 129.706667 0 37.546667 37.546667 37.546667 95.573333 0 129.706666z" fill="#707070" p-id="25712"></path></svg>\n              下侧滑动 <a href="#empty" preset-effect="slide-down" clone-as="empty-down">slide-down</a>\n            </li>\n            <li>\n              <svg t="1661238015684" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="6735" width="200" height="200"><path d="M789.333333 64a170.666667 170.666667 0 0 1 170.666667 170.666667v311.466666a8.533333 8.533333 0 0 1-8.533333 8.533334h-46.933334a8.533333 8.533333 0 0 1-8.533333-8.533334V234.666667a106.666667 106.666667 0 0 0-102.037333-106.56L789.333333 128H234.666667a106.666667 106.666667 0 0 0-106.56 102.037333L128 234.666667v554.666666a106.666667 106.666667 0 0 0 102.037333 106.56L234.666667 896h311.466666c4.693333 0 8.533333 3.84 8.533334 8.533333v46.933334a8.533333 8.533333 0 0 1-8.533334 8.533333H234.666667a170.666667 170.666667 0 0 1-170.666667-170.666667V234.666667a170.666667 170.666667 0 0 1 170.666667-170.666667h554.666666z m85.333334 554.666667a85.333333 85.333333 0 0 1 85.333333 85.333333v170.666667a85.333333 85.333333 0 0 1-85.333333 85.333333h-170.666667a85.333333 85.333333 0 0 1-85.333333-85.333333v-170.666667a85.333333 85.333333 0 0 1 85.333333-85.333333h170.666667z m0 64h-170.666667a21.333333 21.333333 0 0 0-21.184 18.837333L682.666667 704v170.666667a21.333333 21.333333 0 0 0 18.837333 21.184L704 896h170.666667a21.333333 21.333333 0 0 0 21.184-18.837333L896 874.666667v-170.666667a21.333333 21.333333 0 0 0-18.837333-21.184L874.666667 682.666667zM460.8 192c4.693333 0 8.533333 3.84 8.533333 8.533333v46.933334a8.533333 8.533333 0 0 1-8.533333 8.533333h-159.530667l229.162667 229.184-45.248 45.248L256 301.269333V460.8a8.533333 8.533333 0 0 1-8.533333 8.533333H200.533333a8.533333 8.533333 0 0 1-8.533333-8.533333V256a64 64 0 0 1 60.245333-63.893333L256 192h204.8z" fill="#707070" p-id="6736"></path></svg>\n              放大镜 <a href="#empty" preset-effect="zoom" clone-as="empty-zoom">zoom</a>\n            </li>\n            <li>\n              <svg t="1661237566437" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3402" width="200" height="200"><path d="M640 896h85.333333v-85.333333h-85.333333v85.333333z m170.666667-512h85.333333v-85.333333h-85.333333v85.333333zM128 213.333333v597.333334c0 47.146667 38.186667 85.333333 85.333333 85.333333h170.666667v-85.333333h-170.666667V213.333333h170.666667V128h-170.666667c-47.146667 0-85.333333 38.186667-85.333333 85.333333z m682.666667-85.333333v85.333333h85.333333c0-47.146667-38.186667-85.333333-85.333333-85.333333zM469.333333 981.333333h85.333334V42.666667h-85.333334v938.666666z m341.333334-256h85.333333v-85.333333h-85.333333v85.333333z m-170.666667-512h85.333333V128h-85.333333v85.333333z m170.666667 341.333334h85.333333v-85.333334h-85.333333v85.333334z m0 341.333333c47.146667 0 85.333333-38.186667 85.333333-85.333333h-85.333333v85.333333z" p-id="3403" fill="#707070"></path></svg>\n              翻转 <a href="#empty" preset-effect="flip" clone-as="empty-flip">flip</a>\n            </li>\n            <li>\n              <svg t="1661239202576" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="40451" width="200" height="200"><path d="M731.0336 859.8528V164.1472c0-40.1408-48.5376-60.3136-77.0048-31.8464L306.176 480.1536c-17.6128 17.6128-17.6128 46.1824 0 63.7952l347.8528 347.8528c28.4672 28.3648 77.0048 8.2944 77.0048-31.9488z" p-id="40452" fill="#707070"></path></svg>\n              左侧翻转 <a href="#empty" preset-effect="flip-left" clone-as="empty-flip-left">flip-left</a>\n            </li>\n            <li>\n              <svg t="1661239231548" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="40762" width="200" height="200"><path d="M292.9664 164.1472v695.808c0 40.1408 48.5376 60.3136 77.0048 31.8464L717.824 543.8464c17.6128-17.6128 17.6128-46.1824 0-63.7952L369.9712 132.1984c-28.4672-28.3648-77.0048-8.2944-77.0048 31.9488z" p-id="40763" fill="#707070"></path></svg>\n              右侧翻转 <a href="#empty" preset-effect="flip-right" clone-as="empty-flip-right">flip-right</a>\n            </li>\n            <li>\n              <svg t="1661239272632" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="41033" width="200" height="200"><path d="M164.1472 731.0336h695.808c40.1408 0 60.3136-48.5376 31.8464-77.0048L543.8464 306.176c-17.6128-17.6128-46.1824-17.6128-63.7952 0L132.1984 654.0288c-28.3648 28.4672-8.2944 77.0048 31.9488 77.0048z" p-id="41034" fill="#707070"></path></svg>\n              上侧翻转 <a href="#empty" preset-effect="flip-up" clone-as="empty-flip-up">flip-up</a>\n            </li>\n            <li>\n              <svg t="1661239101001" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="29928" width="200" height="200"><path d="M65.582671 288.791335l446.417329 446.41733 446.417329-446.41733z" p-id="29929" fill="#707070"></path></svg>\n              下侧反转 <a href="#empty" preset-effect="flip-down" clone-as="empty-flip-down">flip-down</a>\n            </li>\n            <li>\n              <svg t="1661239016758" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="28039" width="200" height="200"><path d="M810.666667 128H213.333333a85.333333 85.333333 0 0 0-85.333333 85.333333v597.333334a85.333333 85.333333 0 0 0 85.333333 85.333333h597.333334a85.333333 85.333333 0 0 0 85.333333-85.333333V213.333333a85.333333 85.333333 0 0 0-85.333333-85.333333zM213.333333 810.666667v-122.026667L335.36 810.666667z m227.413334 0L213.333333 583.253333v-105.813333L546.56 810.666667z m211.2 0L213.333333 371.626667V266.24L757.76 810.666667zM810.666667 757.76L266.24 213.333333h105.386667L810.666667 652.373333z m0-213.333333L477.44 213.333333h105.386667L810.666667 441.173333z m0-211.2L688.64 213.333333H810.666667z" p-id="28040" fill="#707070"></path></svg>\n              渐变 <a href="#empty" preset-effect="fade" clone-as="empty-fade">fade</a>\n            </li>\n          </ul>\n        '},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type AnimationPrestType = 'inherit'\n            | 'fade' | 'zoom' | 'pop-sheet'\n            | 'flip' | 'flip-left' | 'flip-down' | 'flip-right' | 'flip-up'\n            | 'slide' | 'slide-left' | 'slide-right' | 'slide-up' | 'slide-down'\n            interface AppletBaseConfig {\n              animation?: AnimationPrestType\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"Lath 提供了常见的动画效果选择，只需指定你预置的效果名即可实现炫酷的窗口动画。"},{type:"text",value:"默认选项为 <b>slide-left</b> 效果，也是所有效果中<b>性能最佳的选项</b>。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    animation: 'slide'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"未设置程序卡动画效果时会默认继承 frameworks 程序卡中的动画效果。"},{type:"text",value:"未被定义为程序卡的超链接新开窗口时的默认窗口效果为 slide。"},{type:"tips",value:"每个预制的动画都包涵一个前进动画以及倒退动画，采用哪种效果将会受到你浏览历史的方向以及程序卡之间的[level]层级所决定。"}]]},u={title:"Custom Effect",content:[[{type:"title",value:"Custom Effect"},{type:"sub",value:"AppletConfig > animation"},{type:"text",value:"自定义程序卡窗口动画。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type AnimationFunction = (e: TransformAnimateEvent) => undefined | Promise&lt;boolean>\n            type AnimationPrestType = 'inherit'\n            | 'fade' | 'zoom' | 'pop-sheet'\n            | 'flip' | 'flip-left' | 'flip-down' | 'flip-right' | 'flip-up'\n            | 'slide' | 'slide-left' | 'slide-right' | 'slide-up' | 'slide-down'\n            type AnimationConfig = AnimationPrestType | boolean | Array&lt;AnimationPrestType> | [AnimationFunction, AnimationFunction]\n            interface AppletBaseConfig {\n              animation?: AnimationConfig\n            }\n          </code-highlight>\n        "},{type:"text",value:"TransformAnimateEvent 为自定义动画中提供的可用对象。"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface TransformActionOrigin {\n              x: number,\n              y: number\n            }\n            interface TransformAnimateEvent {\n              x: number\n              y: number\n              in: Animate\n              out: Animate\n              view: Array&lt;HTMLElement>\n              width: number\n              height: number\n              viewport: Array&lt;HTMLElement>\n              applets: Array&lt;Applet>\n              reverse: boolean\n              direction: number\n              backset: number\n              origin: string | Array&lt;number>\n              attach: string | Array&lt;number>\n              touches: TransformActionOrigin | undefined\n              historyDirection: number\n              callback: (stillness: boolean) => void\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"数组中的第一个函数为正向动画，第二个函数为逆向动画。如果值为函数，则可通过参数进行动画控制，比如 direction、historyDirection 等。"},{type:"text",value:"程序卡层级关系还将反应在转场动画的效果上，从小到大为正向动画，反之从大到小时为逆向动画。"},{type:"text",value:"当历史回退到层级为 0 的程序卡时，会触发 singleLock 事件，具体可查看 [singleLock] 配置中的相关描述。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const getAnimate = (type: number) => {\n              return (e: TransformAnimateEvent) => {\n                let inO: number, outO: number, inV: Animate, outV: Animate\n                switch (type) {\n                  case 0:\n                    inO = 1\n                    outO = 0\n                    inV = e.in\n                    outV = e.out\n                    break\n                  case 1:\n                  default:\n                    inO = 0\n                    outO = 1\n                    inV = outV = e.in\n                }\n                inV.duration(0).ease('ease-out-expo').to(0, 0, 0).opacity(inO).end(function () {\n                  outV.duration(767).opacity(outO).end(function () {\n                    e.callback(false)\n                  })\n                })\n                return undefined\n              }\n            }\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    animation: [getAnimate(0), getAnimate(1)]\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"我们可以看到通过使用 TransformAnimateEvent 中提供的信息，即可完成 fade 的前进和后退动画效果。"}]]},c={title:"Modality",content:[[{type:"title",value:"Modality"},{type:"sub",value:"AppletConfig > modality"},{type:"text",value:"程序卡是否以模态框形式展示。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type ModalityType = 'sheet'\n            interface AppletBaseConfig {\n              modality?: ModalityType\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"目前仅支持 <b>sheet</b> 这一种类型的模态效果，是一个可上下滑动的弹出窗口。"},{type:"text",value:"<b>sheet</b> 类型在 config 中还提供有一个自定义选项 <b>SheetOptions</b>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type ModalityType = 'sheet'\n            type SheetOptions = {\n              top?: string,\n              miniCardHeight?: number | string\n              maskOpacity?: number\n              blockedHolderWidth?: number | string\n              alwaysPopUp?: boolean\n              maskClosable?: boolean\n              noHandlebar?: boolean\n            }\n            interface AppletBaseConfig {\n              modality?: ModalityType\n              sheetOptions?: SheetOptions\n            }\n          </code-highlight>\n        "},{type:"text",value:"\n          <ul>\n            <li>\n              <b>top</b>: 视图顶部距离窗口顶部的边距离距离，支持 CSS 单位。\n            </li>\n            <li>\n              <b>miniCardHeight</b>: 两段式卡片，默认呈现最小尺寸窗口，线上滑打开全部。\n            </li>\n            <li>\n              <b>maskOpacity</b>: 背景黑色蒙层的不透明度，默认为 0.3。\n            </li>\n            <li>\n              <b>blockedHolderWidth</b>: 左侧手指边缘滑动的安全边距（边距大小会覆盖可交互区域），边界值决定了左侧滑动关闭的灵敏度。\n            </li>\n            <li>\n              <b>alwaysPopUp</b>: 在窗口切换时是否始终保持弹出动画，默认为关闭，场景切换时窗口保持静止。\n            </li>\n            <li>\n              <b>maskClosable</b>: 点击背景蒙层是否允许关闭窗口，默认为关闭。\n            </li>\n            <li>\n              <b>noHandlebar</b>: 不展示默认的滑动控制手柄，可能你需要在内部视图中重新定义该外观。\n            </li>\n          </ul>\n        "},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                pageA: {\n                  config: {\n                    modality: 'sheet'\n                    sheetsBottomOptions: {\n                      top: '10%',\n                      miniCardHeight: '30vh',\n                      maskOpacity: 0.5,\n                      blockedHolderWidth: 20,\n                      alwaysPopUp: false,\n                      maskClosable: true\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"注意 sheetsBottomOptions 选项是 modality 选项为 'sheet' 时的进一步特性描述，需配合使用，单独使用时无效。"}]]},g={title:"Background",content:[[{type:"title",value:"Background"},{type:"sub",value:"AppletConfig > background"},{type:"text",value:"程序卡是否被允许在后台运行。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            interface AppletBaseConfig {\n              background?: boolean | 'auto'\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"<b>value = false</b>"},{type:"text",value:"模块切换动画结束后会被立即销毁。"},{type:"text",value:"<b>value = true</b>"},{type:"text",value:"模块不会被销毁（仅当页面 load 成功时）；例外情况是当 timeout 超时时，在启动前会被销毁。"},{type:"text",value:"<b>value = 'auto'</b>"},{type:"text",value:"当设置成自动时模块会进行智能的判断是否销毁，当触发以下几种情况时则会被销毁："},{type:"text",value:"\n          <ul>\n            <li>页面设置了 src，且不同源时</li>\n            <li>页面中包含了 object、embed、applet、iframe 对象时</li>\n            <li>页面中包含了 video、audio 标签时，且开启智能媒体管理（mediaGuard）时进行自动暂停播放出错时</li>\n            <li>页面中存在节点变动操作在 3 秒钟内超过 10 次时</li>\n            <li>页面中总的节点操作在后台运行超过 1000 次时</li>\n          </ul>\n        "},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    background: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:'若从该程序卡进入 “Pop Sheet" 等 Modality 类型非全屏程序卡时，即便符合销毁条件也将不会执行。'}]]},v={title:"Timeout",content:[[{type:"title",value:"Timeout"},{type:"sub",value:"AppletConfig > timeout"},{type:"text",value:"程序卡生命周期的有效时长，单位为毫秒。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              timeout?: number\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"程序卡符合缓存条件或设置为允许背景运行(background=true)时，程序卡在二次进入前会检查过期情况，当检查到程序卡已过期时将会进行更新操作。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    timeout: 36000\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"若该值设置为 0 时，则背景运行(background=true)将不会生效。"}]]},d={title:"Limit",content:[[{type:"title",value:"Limit"},{type:"sub",value:"frameworksAppletConfig > limit"},{type:"text",value:"定义应用最大可缓存在后台的程序卡数量。（frameworks 程序卡专属配置）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              limit?: number\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"默认为 5, 最大值为 100。其表示为应用中所允许的最多可同时缓存在后台的程序卡，当超过时会根据访问的顺序，对先访问的模块进行依次销毁，若模块配置了背景运行(background = true)时则不受此规则的影响。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    limit: 10\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"limit 数量将影响应用运行时的内存占用，一般建议在 5-20。"}]]},x={title:"Resource",content:[[{type:"title",value:"Resource"},{type:"sub",value:"AppletManifest > resource"},{type:"text",value:"程序卡运行时所依赖的静态资源。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletResources {\n              script?: Array&lt;string>\n              image?: Array&lt;string>\n              worker?: Array&lt;string>\n              video?: Array&lt;string>\n              audio?: Array&lt;string>\n              font?: Array&lt;string>\n              style?: Array&lt;string>\n              html?: Array&lt;string>\n            }\n            interface AppletManifest {\n              resource?: AppletResources\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"从当前程序卡切换到下一程序卡时，若当前程序卡配置了预渲染依赖(prerender=[${nextApplet}])时，在下一个程序卡被加载前进行其静态资源的预载入，如 html 中的 script、css 标签等，对于这些内链的静态资源是无需进行声明配置的，但是对于页面运行期间通过脚本动态加载的内容，如 css 中的 font字体，动态产生的的媒体素材等，并不能完成预先的载入，此时则可通过 resource 配置项将可能发生加载的资源进行预载。"},{type:"text",value:"程序卡层级关系还将反应在转场动画的效果上，从小到大为正向动画，反之从大到小时为逆向动画。"},{type:"text",value:"当历史回退到层级为 0 的程序卡时，会触发 singleLock 事件，具体可查看 [singleLock] 配置中的相关描述。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  resource: [\n                    image: [\n                      'https://yourCDN.com/001.jpg',\n                      'https://yourCDN.com/002.jpg',\n                      'https://yourCDN.com/003.jpg'\n                    ]\n                  ],\n                  config: {\n                    title: 'Home Page'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"预载工作并不是立刻执行的，而是在浏览器空闲时按顺序依次载入。"},{type:"tips",value:"非存在于 AppletResources 类型中的未知类型可尝试使用 script 类型进行预载。"}]]},f={title:"Prerender",content:[[{type:"title",value:"Prerender"},{type:"sub",value:"AppletConfig > prerender"},{type:"text",value:"程序卡的预加载&预渲染。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              prerender?: Array&lt;string>\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"当前程序卡中如果存在链接到其它程序卡，且希望能预先载入这些程序卡时，则可进行设置该属性。页面会在空闲时对依赖的程序卡进行后台的预加载，包括文档中的 css 以及 js 等静态资源的预加载。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  prerender: [${AppletName}, ${AppletName}]\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"当预载执行时，用户访问该程序卡时将节省内链静态资源的加载，但是对于脚本的动态数据请求并不会有所提前，如果想提前数据的加载，则需配合前一个程序卡使用[inject]能力或“postMessage”能力进行前置。"},{type:"tips",value:"prerender 目前浏览器尚无法完成预渲染工作，其当前阶段的能力表述更接近“prefetch”，尽管如此，但我们希望在未来能预留预渲染的能力，因此它依旧保留该选项为“prerender”的称呼。"}]]},m={title:"Components",content:[[{type:"title",value:"Components"},{type:"sub",value:"AppletManifest > components"},{type:"text",value:"属于同源的程序卡页面可与主程序卡页面共享 Web Components。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletManifest {\n              components?: ((w: Window) => CustomElementConstructor)[]\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"Web Components 作为面向未来的组件标准，不仅易于共享也能极大程度上提升页面的体验性能。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            export const getCodeHighlighter = (shadowWindow): CustomElementConstructor => {\n              class CodeHighlighter extends shadowWindow.HTMLElement {\n                constructor () {\n                  super()\n                  const shadowRoot = this.attachShadow({ mode: 'open' })\n                  shadowRoot.appendChild(tmpl.content.cloneNode(true))\n                  ...\n                }\n              }\n      \n              return CodeHighlighter as unknown as CustomElementConstructor\n            }\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    title: 'Home Page'\n                  },\n                  components: [getCodeHighlighter]\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"由于 Web Components 是要共享到各个程序卡容器内，因此我们封装组件时需要将组件注册到该程序卡的 window 变量中。"}]]},A={title:"MediaGuard",content:[[{type:"title",value:"MediaGuard"},{type:"sub",value:"AppletConfig > mediaGuard"},{type:"text",value:"该设置开启时，会对同源程序卡页面中的视频和音频进行智能的管控，当模块隐藏时则自动暂停正在播放的音/视频，反之模块可见时则恢复暂停的音/视频。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              mediaGuard?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"一般场景下，自动媒体管控能帮你自动处理媒体状态，若自动处理失败则会强制销毁程序卡，背景运行(background=true)除外。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    mediaGuard: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"不开启此选项，你同样可以通过窗口可见事件进行手动管理 - 请参考 API - Application - Events。"}]]},b={title:"Portal",content:[[{type:"title",value:"Portal"},{type:"sub",value:"AppletConfig > portal"},{type:"text",value:"开启该属性的程序卡在浏览器支持 portal 特性时，在转场动画结束后会执行 portal 的激活操作，激活后程序卡页面将在新的上下文中运行。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              portal?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"程序卡的 source 配置应为链接模式，且与主应用同域。"},{type:"text",value:"设置为 portal 的程序卡， 其[free]选项一般也应设置为 true。"},{type:"text",value:"当浏览器不支持 portal 能力时会自动降级为一般容器模式。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    portal: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"该选项适用于功能独立且与主应用没有任何的联系的（如 apply、inject 等）程序卡，否则，将会导致这些依赖上下文的配置失效。"}]]},w={title:"AllowHost",content:[[{type:"title",value:"AllowHost"},{type:"sub",value:"frameworksAppletConfig > allowHost"},{type:"text",value:"当没有设置 [capture] 时，可通过该配置来过滤掉不安全的 host 地址，反之则不受限。（frameworks 程序卡专属配置）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              allowHost?: Array&lt;string>\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"该配置主要用于防止通过 url 参数拼接的方式使应用不按预期的访问外域网站，以防止产生危害。"},{type:"text",value:"当 frameworks 模块设置了 [capture] 时，则会忽略该配置。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                frameworks: {\n                  allowHost: [\n                    'aaa.com',\n                    'bbb.com',\n                    'ccc.com'\n                  ]\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"一般程序卡页面中的 A 链接跳转行为会被自动捕获为应用内的新窗口打开，但有时并不希望所有的情况都是如此，因此可通过该选项进行一个有效域的管控，当域不匹配时则不会进行应用内的新窗口打开，而是直接新开浏览器窗口进行访问。"},{type:"tips",value:"如果你的应用中可能存在由用户输入的可访问地址，那么你很可能需要这项配置，以此来强制新页面以新开浏览器窗口的方式访问。"}]]},T={title:"Sandbox",content:[[{type:"title",value:"Sandbox"},{type:"sub",value:"AppletConfig > sandbox"},{type:"text",value:"程序卡容器的沙盒限制。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type SandboxOptions = Array&lt;'allow-same-origin' | 'allow-scripts' | 'allow-forms' | 'allow-modals' | 'allow-orientation-lock' | 'allow-popups'\n            | 'allow-pointer-lock' | 'allow-popups-to-escape-sandbox' | 'allow-presentation' | 'allow-top-navigation' | 'allow-top-navigation-by-user-activation'\n            | 'allow-downloads-without-user-activation' | 'allow-storage-access-by-user-activation' | 'allow-top-navigation-by-user-activation' | string>\n            interface AppletBaseConfig {\n              sandbox?: SandboxOptions\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"该选项仅适用于拥有[source]选项设定的程序卡。"},{type:"text",value:"关于 Sandbox 的更多信息，请参照 W3C 定义。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    sandbox: 'allow-modals'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"若你的程序卡页面为第三方链接，出于对安全性的考虑可通过此选项对其不必要的权限进行限制。"}]]},S={title:"Capture",content:[[{type:"title",value:"Capture"},{type:"sub",value:"AppletConfig > capture"},{type:"text",value:"捕捉其它程序卡中的跳转链接，若匹配时则跳转至该程序卡。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              capture?: string | ((resolve: {\n                pathname: string\n                origin: string\n                host: string\n                hash: string\n                href: string\n                search: string\n                port: string\n                searchParams: URLSearchParams\n              }, url: string) => boolean)\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"capture 可接受一个“url path”，或一个捕捉函数，当其它程序卡中进行跳转行为时则可受到该捕获。"},{type:"text",value:"捕捉函数返回 true 时，则代表跳转链接匹配，链接目标将由该程序卡替代。"},{type:"text",value:"在捕捉后，如若跳转链接携带参数，将会把携带参数一并传与捕获者程序卡。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    capture: (resolve) => {\n                      return resolve.path === '/abc/abc'\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"该程序卡是否被提前载入是捕获程序是否工作的重要前提，因此为确保该捕获者程序卡已经被提前依赖加载，则需要在之前程序卡配置选项[prerender]中包含对该依赖程序卡的提前载入。"},{type:"text",value:"当开启此选项时，所有可被捕获的链接跳转行为都将交由该选项决定是否在应用内打开新窗，这意味着你的规则需要严谨的保障应用的安全性。"},{type:"text",value:"若 frameworks 程序卡开启此选项时，所有未设置该选项的程序卡将默认由 frameworks 程序卡代为处理，同时需要注意的是配置项[allowHost]将失效，因为 capture 将优先代为处理。"},{type:"tips",value:"仅当前程序卡在 [apply] 中开启了 proxy-link 时，捕获者程序卡才能正常捕获，否则不会进入捕获逻辑，但该选项是默认开启，除非你将其关闭。"}]]},C={title:"AppletManifestProcess",content:[[{type:"title",value:"AppletManifestProcess"},{type:"sub",value:"frameworlksAppletConfig > appletManifestProcess"},{type:"text",value:"当程序卡载入时，其配置文件会先经此函数加工后再返回。（frameworks 程序卡专属配置）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              appletManifestProcess?: (config: AppletManifest) => AppletManifest\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"处理函数将传入当前处理程序卡配置，并接收一个新程序卡配置。"},{type:"text",value:"可通过该配置对所有程序卡配置进行重写，比如设定统一的动画效果或对一些安全选项进行校验。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    appletManifestProcess: (manify) => {\n                      ... 处理\n                      return newManify\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"程序卡配置中存在一些复杂选项，比如 inject、components 等，可通过此选项将可复用配置进行统一化管理。"}]]},k={title:"Inject",content:[[{type:"title",value:"Inject"},{type:"sub",value:"AppletConfig > inject"},{type:"text",value:"当为同源程序卡页面时，可在程序卡页面载入前对程序卡页面内注入设定的全局变量与方法，比如注入一些“jsBridge”、通用变量或者改写全局对象等。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              inject?: (w: Window, m: Applet) => void\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"比如程序卡中的链接跳转是通过“jsBridge”进行的，因此 Lath 并无法自动捕捉，因此现在你想要改写该逻辑，那么现在你则可以通过该选项来进行对其改写。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    inject: (appletWindow, applet) => {\n                      appletWindow.open = (url) => {\n                        return applet.application.pushWindow(url).catch(() => {\n                          window.open(url)\n                        })\n                      }\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"需要注意的是 inject 选项受同域限制，因此在跨域场景下无法使用。"},{type:"text",value:"inject 是一个强大的能力，你可以基于此开发出不可思议的能力。"}]]},E={title:"Render",content:[[{type:"title",value:"Render"},{type:"sub",value:"AppletConfig > render"},{type:"text",value:"除了通过配置项[source]定义程序卡视图，还可以通过 render 方法来直接渲染元素到程序卡内。"},{type:"text",value:"render 进行定义的程序卡将使用 shadowDom 模式。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              render?: (target: HTMLElement) => void\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"render 函数将程序卡的根节点传入，开发者可将渲染视图直接插入到节点内。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    render: (target) => {\n                      target.innerHTML = `\n                        &lt;p>Hello World&lt;/p>\n                      `\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"使用 render 函数的最佳实践方案是把业务逻辑与模块配置进行分离，可使用动态 import 来引入业务逻辑的部分。"}]]},D={title:"SafeArea",content:[[{type:"title",value:"SafeArea"},{type:"sub",value:"AppletConfig > safeArea"},{type:"text",value:"定义全局的 CSS 应用安全边距变量。（frameworks 程序卡专属配置）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type ApplicationSafeAreaValue = string | Array<string>\n            interface AppletBaseConfig {\n              safeArea?: ApplicationSafeAreaValue | (() => ApplicationSafeAreaValue)\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"值为数字时，分别按顺序表示 顶部、右侧、底部、左侧 的安全边距。"},{type:"text",value:"设置该值后将会在程序卡的全局样式中注入 CSS 全局变量：--application-safe-area-top、--application-safe-area-right、--application-safe-area-bottom、--application-safe-area-left 四个对应的安全边距值。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    safeArea: ['44px', '0px', '0px', '0px']\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"text",value:"如果需要动态的修改这个值则可以通过发送“safeAreaChange”事件来进行更新。"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            application.trigger('safeAreaChange', ['88px', '0px', '0px', '0px'])\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"当 frameworks 程序卡带有头部导航时，为了能让程序卡正常预留导航栏高度，使用该配置能动态调整该高度。"}]]},V={title:"GlobalCSSVariables",content:[[{type:"title",value:"GlobalCSSVariables"},{type:"sub",value:"FrameworksAppletConfig > globalCSSVariables"},{type:"text",value:"设定应用的全局 CSS 变量。（frameworks 程序卡专属配置）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type GlobalCSSVariables = { [key: string]: string }\n            interface AppletBaseConfig {\n              globalCSSVariables?: GlobalCSSVariables | (() => GlobalCSSVariables)\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"与 [safeArea] 相似，同样只能在同域程序卡页面下生效。"},{type:"text",value:"如果需要动态的修改或增加这个值则可以通过 “API-updateGlobalCSSVariables” 事件来进行更新"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    globalCSSVariables: {\n                      '--main-color': '#fff',\n                      '--title-font-size': '28px'\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"配合 “API-updateGlobalCSSVariables” 使用，可创造出丝滑的主题切换效果。"}]]},L={title:"Tunneling",content:[[{type:"title",value:"Tunneling"},{type:"sub",value:"PresetConfig > tunneling"},{type:"text",value:"设定应用为“隧穿模式”。（应用启动前的预配置项）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface PresetConfig {\n              tunneling?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"tips",value:"若在当前域下访问跨域的程序卡，此时会因同源策略导致跨域的程序卡无法实现，全局样式变量更新以及[Apply]中的能力（比如新开窗口）。"},{type:"text",value:"通过将跨域程序卡页面接入 Lath，并开启 [tunneling]来解决跨域程序卡页面的一些受限能力。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              tunneling: true,\n              applets: {\n                ...\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"当页面接入 Lath 且开启 [tunneling] 时，页面本身即为一个单独应用，但当该页面嵌入到另一个 Lath 应用作为程序卡时，其通过 A链接（即pushWindow）打开的页面将不会在本应用内打开，而是被代理到父级应用中打开，若父级应用也是被嵌入的 Lath 应用，且也开启了 [tunneling] 则会继续向上“隧穿”。"}]]},B={title:"UnuseShadowDom",content:[[{type:"title",value:"UnusedShadowDom"},{type:"sub",value:"PresetConfig > noShadowDom"},{type:"text",value:"框架是否使用 ShadowDom 模式。（应用启动前的预配置项）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface PresetConfig {\n              noShadowDom?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"tips",value:"关于 ShadowDom 的更多信息，请查看 W3C 的介绍。"},{type:"text",value:"若你通过 createApplication 指定“index”的模式启动应用时，进行预置的程序卡节点会被直接移动到 ShadowDom 中，此时会造成存在节点外的样式及依赖缺失（比如一些依赖的脚本事件绑定元素和动态注入的全局样式等）。"},{type:"text",value:"默认情况下 ShadowDom 模式已经时关闭的，你无需设定改选项，如果你不存在上述问题，且希切片的程序卡之间不会产生一些干扰，则可以关闭改选项，此时同页面中的切片产生的程序卡则互相之间产生作用域。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              tunneling: true,\n              applets: {\n                ...\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"极少情况下会使用到该配置，当然如果你能使用 &lt;define-applet> 来代替将会是更好的选择。"}]]},M={title:"DefaultSlideViewApplets",content:[[{type:"title",value:"DefaultSlideViewApplets"},{type:"sub",value:"AppletConfig > defaultSlideViewApplets"},{type:"text",value:"Snap 切换效果的程序坞，我们称之为 SlideView。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type SlideViewApplets = Array<{\n              id: string,\n              activate: 'lazy' | 'instant' | 'passive'\n            }>\n            interface AppletBaseConfig {\n              defaultSlideViewApplets?: SlideViewApplets\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"“id”表示要被加载的程序卡名"},{type:"text",value:"“activate”表示程序卡的激活类型，共分为以下三种："},{type:"text",value:"\n          <ul>\n            <li>lazy: 在浏览器空闲时加载 Applet 页面内容。</li>\n            <li>instant: 即刻加载 Applet 页面内容。</li>\n            <li>passive: 在被激活时加载 Applet 页面内容。</li>\n          </ul>\n        "},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n        <code-highlight type="ts">\n          createApplication({\n            applets: {\n              frameworks: {\n                config: {\n                  defaultSlideViewApplets: [\n                    {\n                      id: "appletA",\n                      activate: \'instant\'\n                    },\n                    {\n                      id: "appletB",\n                      activate: \'lazy\'\n                    }\n                  ]\n                }\n              }\n            }\n          })\n        </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"设定 defaultSlideViewApplets 的程序卡将不再具有自身的视图（frameworks Applet 除外），而是其中嵌套了其它的程序卡视图，因此该配置与[source]相冲突，不应同时设置。"},{type:"tips",value:"另外使用“API-Applet.slide.to”可使程序坞滑动到到指定程序卡位置。"}],[{type:"title",value:"OpenSlideViewLeftHolder"},{type:"sub",value:"AppletConfig > openSlideViewLeftHolder"},{type:"text",value:"开启后，在 SlideView 效果下（defaultSlideViewApplets 配置时），最左侧边缘滑动时会允许退出应用。"},{type:"tips",value:"该配置主要用于解除在首条历史记录下的退出受阻，若浏览历史记录大于 1 时则大多情况下不存在边缘滑动受阻的情况，若不开启则，在 ios 设备中可能出现边缘滑动时仅会触发边缘弹性，而不会回退到上一级。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              openSlideViewLeftHolder?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"该值默认为 false。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    defaultSlideViewApplets: [\n                      {\n                        id: "appletA",\n                        activate: \'instant\'\n                      },\n                      {\n                        id: "appletB",\n                        activate: \'lazy\'\n                      }\n                    ],\n                    openSlideViewLeftHolder: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"开启该选项后需要注意程序卡左侧边缘将产生 20px 的无反馈区域，开发时应注意预留该安全操作距离。"}]]},P={title:"OpenSlideViewLeftHolder",content:[[{type:"title",value:"OpenSlideViewLeftHolder"},{type:"sub",value:"AppletConfig > openSlideViewLeftHolder"},{type:"text",value:"开启后，在 SlideView 效果下（defaultSlideViewApplets 配置时），最左侧边缘滑动时会允许退出应用。"},{type:"tips",value:"该配置主要用于解除在首条历史记录下的退出受阻，若浏览历史记录大于 1 时则大多情况下不存在边缘滑动受阻的情况，若不开启则，在 ios 设备中可能出现边缘滑动时仅会触发边缘弹性，而不会回退到上一级。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              openSlideViewLeftHolder?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"该值默认为 false。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    defaultSlideViewApplets: [\n                      {\n                        id: "appletA",\n                        activate: \'instant\'\n                      },\n                      {\n                        id: "appletB",\n                        activate: \'lazy\'\n                      }\n                    ],\n                    openSlideViewLeftHolder: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"开启该选项后需要注意程序卡左侧边缘将产生 20px 的无反馈区域，开发时应注意预留该安全操作距离。"}]]},N={title:"PullToRefresh",content:[[{type:"title",value:"PullToRefresh"},{type:"sub",value:"AppletConfig > pullToRefresh"},{type:"text",value:"开启后，在主滚动容器持续下拉手势时将会触发页面无缝刷新。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              pullToRefresh?: boolean\n              pullToRefreshTargetScrollId?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"开启该选项的前提是“FrameworksApplet”也开启了该选项，否则将无法生效。"},{type:"text",value:"下拉刷新将关联一个滚动容器，可通过“pullToRefreshTargetScrollId”指定容器“id”。"},{type:"text",value:"若未指定容器，则会默认关联主滚动容器，主滚动条请参考配置项“mainScrollId”，默认主滚动关联为程序卡的 &lt;define-applet> 容器。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    pullToRefresh: true,\n                    pullToRefreshTargetScrollId: 'root'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"注意指定的滚动容器“id”不可存在于 ShadowDom 中。"}]]},H={title:"TapStatusBarToScrollToTop",content:[[{type:"title",value:"TapStatusBarToScrollToTop"},{type:"sub",value:"AppletConfig > tapStatusBarToScrollToTop"},{type:"text",value:"开启后，在点击窗口顶部状态栏时，主滚动容器将滚动到顶部。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              tapStatusBarToScrollToTop?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"该选项将将反映在主滚动上，主滚动条请参考配置项“mainScrollId”，默认主滚动关联为程序卡的 body 容器。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    tapStatusBarToScrollToTop: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"该选项的启动须依赖配置项“mainScrollId”。"}]]},z={title:"MainScrollId",content:[[{type:"title",value:"MainScrollId"},{type:"sub",value:"AppletConfig > mainScrollId"},{type:"text",value:"指定 Applet 的主滚动容器，其与 [tapStatusBarToScrollToTop] 和 [pullToRefresh] 能够联合使用。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              mainScrollId?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"如果没有指定主滚动容器，则默认 &lt;define-applet> 元素为主滚动。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    mainScrollId: 'root'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"注意指定的滚动容器“id”不可存在于 ShadowDom 中。"}]]},O={title:"Apply&UnApply",content:[[{type:"title",value:"Apply&UnApply"},{type:"sub",value:"AppletConfig > apply"},{type:"text",value:"在同源程序卡中启用可预置的能力。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type AppletApplyMabyeOptions = 'smart-setTimeout' | 'proxy-link' | 'tap-highlight'\n            type AppletApplyOptions = Array&lt;AppletApplyMabyeOptions>\n            type AppletApplyOptionsParam = {\n              'tap-highlight'?: {\n                selector: string\n              }\n            }\n            interface AppletBaseConfig {\n              apply?: AppletApplyOptions\n              applyOptions?: AppletApplyOptionsParam\n              unApply?: AppletApplyOptions\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"apply 预置了以下可用能力："},{type:"text",value:"\n          <ul>\n            <li><b>smart-setTimeout</b> 当程序卡窗口不可见时或正处于窗口动画过程中时，所有 setTimeout 会自动暂停执行，直到模块动画停止并可见时自动恢复执行。</li>\n            <li><b>proxy-link</b> 当程序卡页面中有使用 a链接或 window.open 方法打开页面时，Lath 容器会自动进行捕捉拦截，并将页面内容生成新的程序卡，之后再进行加载展示。若 A链接设置 target='_parent' 或 target='_top' 时则不会进行捕获，以浏览器新开窗口打开。在 A链接中还可以设置动画效果和设置克隆为新模块 preset-effect=\"预置动画名\"，clone-as=\"新模块名\"</li>\n            <li><b>tap-highlight</b> 所有 a链接 在点击时会自动添加半透明蒙层高亮提示效果</li>\n          </ul>\n        "},{type:"tips",value:"在 A链接上使用 clone-as属性时，目的是为了让同一程序卡以多个分身打开，比如文章详情程序卡，当其参数不同时可同时以分身打开多篇文章，而不是在同一个实例中更新文章。"},{type:"text",value:"以上选项默认均开启，若不想开启可使用 unApply 配置项。"},{type:"text",value:"unApply 同 apply 选项相背，它将禁止配置中的预置能力。"},{type:"text",value:'applyOptions 可针对每项能力增加可用参数，目前可为"tap-highlight"提供高亮选择器"selector"，当点击元素匹配时将增加高亮效果，同时会在元素上新增"tap-highlight"属性，可用作 CSS 样式自定义。'},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    unApply: ['proxy-link'],\n                    applyOptions: {\n                      'tap-highlight': {\n                        selector: '.link'\n                      }\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"注意，使用“proxy-link”时不能捕捉通过“location.href”方法实现的跳转行为。"}]]},F={title:"SingleFlow",content:[[{type:"title",value:"SingleFlow"},{type:"sub",value:"FrameworksAppletConfig > singleFlow"},{type:"text",value:"开启历史层级流向控制。（frameworks 程序卡专属配置）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface FrameworksAppletConfig {\n              singleFlow?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"只允许程序卡的历史回退方向往 level 较小的程序卡回退，若在返回时，返回的程序卡 level 层级若大于或等于当前程序卡层级，则直接跳过该程序卡，继续返回到历史记录中更早的程序卡，直至条件符合。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    singleFlow: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"例如从生成订单功能的程序卡到支付订单的程序卡付款成功后进入我的订单模块程序卡，其在完成后进行回退时可通过开启配置项并结合程序卡level规则，使其直接回到订单生程序卡，而无需经过订单完成过程中的各个程序卡。"}]]},R={title:"SingleLock",content:[[{type:"title",value:"SingleLock"},{type:"sub",value:"FrameworksAppletConfig > singleLock"},{type:"text",value:"当程序卡回退到程序出口（level === 0 的程序卡）时，进行返回操作时组织历史继续回退。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface FrameworksAppletConfig {\n              singleLock?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"当回退被锁定时，继续回退会开始记录回退次数，并可通过 frameworks Applet 中的 [holdBack] 配置来决定程序卡是否允许退出。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    singleLock: true,\n                    holdBack: (event) => {\n                      // 判断是否退出\n                      return true\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"text",value:"如上配置，从其它页面跳转进入到应用时，当点击浏览器返回按钮时并不会退出应用页面，而是会通过 Frameworks Applet 中的 [holdBack] 配置进行判断是否应该被退出，并同时返回用户点击返回按钮的次数。"}]]},I={title:"PreIndex",content:[[{type:"title",value:"PreIndex"},{type:"sub",value:"FrameworksAppletConfig > preIndex"},{type:"text",value:"通过链接访问某个程序卡时，可在之前插入一个前置的程序卡。（frameworks 程序卡专属配置）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface FrameworksAppletConfig {\n              preIndex?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"当通过访问页面 url 锚定到某个程序卡时，可以通过此配置项设置一个前置程序卡，此时访问该 url 链接时依然会优先访问锚定的程序卡，但当点击浏览器返回时并不会立刻退出，而是从锚定程序卡回退到通过该配置项插入的前置程序卡。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    preIndex: 'home'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"text",value:"当访问链接所锚定的程序卡和 [preIndex] 或 [index] 相等时则不会在之前再次插入前置程序卡。"}]]},W={title:"NotFound",content:[[{type:"title",value:"NotFound"},{type:"sub",value:"FrameworksAppletConfig > notFound"},{type:"text",value:"404 程序卡。（frameworks 程序卡专属配置）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface FrameworksAppletConfig {\n              notFound?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"若所请求的程序卡页面不存在时，则自动路由到该程序卡，若未配置时则会自动跳转到“id”为“404”的程序卡。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    notFound: 'home'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"text",value:"404 模块主要用于对应用异常访问时的承接及统计等。"}]]},G={title:"HoldBack",content:[[{type:"title",value:"HoldBack"},{type:"sub",value:"FrameworksAppletConfig > holdBack"},{type:"text",value:"阻止主程序退出。（frameworks 程序卡专属配置）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface FrameworksAppletConfig {\n              holdBack?: (backoutCount: number) => boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"需配合 [singleLock] 开启时有效，当用户进行返回操作，且页面即将退出时，会通过该函数（如果被阻止，backCount 为点击返回的次数）进行校验，返回 true 时为阻止应用页面退出，否则会允许应用的直接退出。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    singleLock: true,\n                    holdBack: (event) => {\n                      // 判断是否退出\n                      return true\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"text",value:"如上配置，从其它页面跳转进入到应用时，当点击浏览器返回按钮时并不会退出应用页面，而是会通过 Frameworks Applet 中的 [holdBack] 配置进行判断是否应该被退出，并同时返回用户点击返回按钮的次。"}]]},j={title:"Events",content:[[{type:"title",value:"Events"},{type:"sub",value:"AppletManifest > events"},{type:"text",value:"注册程序卡的事件回调。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            declare interface AppletEvents {\n              transformStart: (applet: Applet) => undefined | 'break'\n              transformEnd: (applet: Applet) => void\n              boot: (applet: Applet) => void\n              load: (applet: Applet) => void\n              loadError: (applet: Applet) => void\n              preload: (applet: Applet) => void\n              destroy: (applet: Applet) => void\n            }\n            declare interface AppletManifest {\n              events?: Partial<AppletEvents>\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"在程序卡中注册生命周期中的事件回调函数。"},{type:"text",value:"\n          <ul>\n            <li><b>transformStart</b> 程序卡转场动画开始事件。需要注意的是 transformStart 可选择返回一个字符串‘break’，此时模块转场将被终止执行。</li>\n            <li><b>transformEnd</b> 程序卡转场动画结束事件。</li>\n            <li><b>boot</b> 程序卡启动事件（每个生命周期内仅一次）。</li>\n            <li><b>load</b> source 类型程序卡的源代码加载完成事件。</li>\n            <li><b>loadError</b> source 类型程序卡的源代码加载错误事件。</li>\n            <li><b>preload</b> 程序卡预加载完事件。</li>\n            <li><b>destroy</b> 程序卡被销毁事件。</li>\n          </ul>\n        "},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    title: 'home'\n                  },\n                  events: {\n                    transformEnd: (applet) => {\n                      // ...\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"在程序卡注册事件中仅提供必要的事件，如需更多事件则可以使用 Applet 对象上的监听函数，请参照 API - Application Events。"},{type:"tips",value:"程序卡配置中的事件都是运行在程序卡容器外的，当程序卡销毁时配置中的环境变量并不会随之消失，因此必须对配置文件中的逻辑质量负责，避免产生副作用，并且合理控制逻辑大小（不建议在此处处理复杂逻辑）。"}]]},U={title:"UseMirroring",content:[[{type:"title",value:"UseMirroring"},{type:"sub",value:"AppletConfig > useMirroring"},{type:"text",value:"持久化保存上次访问的镜像文件，以便下次访问时快速呈现。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              useMirroring?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"当程序卡页面销毁时，将会对其内部 HTML 进行本地化持久存储，当下次访问时会立刻呈现上次访问结果，直到新内容加载完成后消失。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    useMirroring: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"当本地存储溢出时会清空所有 localStorge 本地数据，一般在一些变动频次较低的场景使用，使用前请充分考虑展示逻辑的合理性。"},{type:"tips",value:"镜像的还原不能存储和还原页面中的 Web Components、 ShadowDom 以及 iframe、canvas、object 等嵌入媒体，当使用该选项时应当考虑这些因素。"}]]},_={title:"Transient",content:[[{type:"title",value:"Transient"},{type:"sub",value:"AppletConfig > transient"},{type:"text",value:"标记该程序卡为临时模块。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              transient?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"在程序卡切换到后台时，会被立即销毁，并同时删除程序卡的所有临时配置数据。"},{type:"text",value:"通过新窗口打开（A链接 或 API - pushWindow）的 url 类型程序卡（即无自定义配置的临时模块），会被自动进行该标记。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                demoPage: {\n                  config: {\n                    transient: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"一般当你的程序卡不存在重复利用时可使用该参数，比如无法枚举的通过动态生成的程序卡。"},{type:"tips",value:"该配置项的意义是什么？当 A链接所访问的生成模块时，由于链接无法枚举，因此会累积很多无用的程序卡配置，因此开启该选项能够消除这些无意义的内存消耗。"}],[{type:"title",value:"DisableTransient"},{type:"sub",value:"AppletConfig > disableTransient"},{type:"text",value:"DisableTransient 和 Transient 相呼应，可通过此参数来关闭默认的 Transient 行为。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              disableTransient?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"若在某种特殊情境下，模块无须定义任何配置（或开发者懒于设置）而实际上模块是可枚举的（自动生成的配置也是有意义的，其存在重用的可能而并非临时程序卡），因此配置该选项时可关闭自动清除生成的程序卡配置的机制。"}]]},$={title:"Application.to",content:[[{type:"title",value:"Application.to"},{type:"sub",value:"Application.to"},{type:"text",value:"转场到指定程序卡。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type TransformToOptions = [\n              id: string,\n              param?: string,\n              history?: -1 | 0 | 1,\n              touches?: TouchEvent | TransformActionOrigin\n            ]\n            type to = (...args: TransformToOptions) => Promise<void>\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"<b>id</b>"},{type:"text",value:"跳转到指定 id 的程序卡。"},{type:"text",value:"<b>param</b>"},{type:"text",value:"跳转程序卡所携带的参数（参数字符串）。"},{type:"text",value:"<b>history</b>"},{type:"text",value:"为 -1 时不推入到历史记录，为 0 时替换当前历史记录，为 1 时推入新的历史记录。"},{type:"text",value:"<b>touches</b>"},{type:"text",value:"为发生点击行为的元素点击的 TouchEvent 对象，或直接定义的发生事件 x, y 坐标值的 TransformActionOrigin 对象，用做某些需要根据起始位置而发生的转场动画。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            application.to('home', '?id=100', 1)\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"该函数为一个异步函数，若访问程序卡不存在则会尝试进入 404程序卡， 并将原有携带参以及通过参数“__notFoundId”将该模块 id，一并传递给 404 程序卡。"}]]},J={title:"Application.pushWindow",content:[[{type:"Application.pushWindow",value:"Level"},{type:"sub",value:"Application.pushWindow"},{type:"text",value:"转场到指定程序卡或 url 的页面。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            declare interface TransformActionOrigin {\n              x: number,\n              y: number\n            }\n            type PushWindowOptions = [\n              url: string,\n              title: string,\n              preset: string,\n              cloneAs?: string,\n              touches?: TouchEvent | TransformActionOrigin\n            ]\n            type pushWindow = (url: string, title = '', preset = 'slide', cloneAs?: string, touches?: TouchEvent | TransformActionOrigin) => Promise<void>\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:'同 <a href="?id=applicationTo#doc" preset-effect="slide" clone-as="doc-newWindow-applicationTo">Application.to</a> 相似，pushWindow 的第一个参数不仅可以传入一个程序卡 id，还可以传入一个页面 URL，以此来打开一个新生成的程序卡页面。'},{type:"text",value:"<b>cloneAs</b>"},{type:"text",value:"定义将该程序卡新克隆副本的名称，此时该克隆副本不会替换原有程序卡实例，而是作为一个新的程序卡独立存在。"},{type:"text",value:"<b>preset</b>"},{type:"text",value:"定义该程序卡被打开时所使用的内置的动画效果，其值为内置动画名。"},{type:"text",value:"<b>title</b>"},{type:"text",value:"定义打开程序卡的 title 标题。"},{type:"text",value:"<b>touches</b>"},{type:"text",value:"同 Application.to 中 touches 的部分。"},{type:"text",value:"<b>url</b>"},{type:"text",value:"打开新页面的 url（目标页面将会受到捕捉[capture]逻辑的影响）。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            application.pushWindow('http://www.xxxxx.com/index.html', '首页', 'zoom', 'newHome')\n          </code-highlight>\n        "},{type:"text",value:"若在iframe 页面中想要调用该能力时，可使用 postMessage 发送请求。"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            parent.postMessage({\n              action: 'pushWindow',\n              data: ['https://xxx.com/', 'title']\n            })\n          </code-highlight>\n        "}]]},X={title:"Application.activityApplet",content:[[{type:"title",value:"Application.activityApplet"},{type:"sub",value:"Application.activityApplet"},{type:"text",value:"当前活动的 Applet。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            activityApplet: Applet\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"若当前可视区的程序卡为 home，那么访问该值则会返回 home 程序卡的 Applet 对象。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            const application = await createApplication({\n              applets: {\n                ...\n              }\n            })\n            console.log(application.activityApplet)\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"若当前可视区的程序卡为 SlideView 模式中的程序卡，此时返回的值为为 SlideView 视窗的程序卡，而非 SlideView 视图中的子程序卡。"},{type:"tips",value:"若想获得活动程序卡中的子程序卡可查阅 SlideView 的相关介绍。"}]]},q={title:"Application.preActiveApplet",content:[[{type:"title",value:"Application.preActiveApplet"},{type:"sub",value:"Application.preActiveApplet"},{type:"text",value:"前一个活动的 Applet。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type preActiveApplet = Applet\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"若前一个可视区的程序卡为 home，那么访问该值则会返回 home 程序卡的 Applet 对象。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            const { application } = await createApplication({\n              applets: {\n                ...\n              }\n            })\n            console.log(application.preActiveApplet)\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:'程序卡的获取逻辑与<a href="?id=applicationActiveApplet#doc" preset-effect="slide" clone-as="doc-newWindow-applicationActiveApplet">Application.activeApplet</a>保持一致。'}]]},K={title:"Application Events",content:[[{type:"title",value:"Application Events"},{type:"sub",value:"Application > on"},{type:"text",value:"常用事件监听（on, one, off）。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type ApplicationSafeAreaValue = string | Array&lt;string>\n            type GlobalCSSVariables = { [key: string]: string }\n            type TriggerEventArgsMap = {\n              'safeAreaChange': [ApplicationSafeAreaValue],\n              'globalCSSVariablesChange': [GlobalCSSVariables],\n              'transformStart': [Applet[]],\n              'transformEnd': [Applet[]],\n              'systemDidMount': [Applet],\n              'frameworksDidMount': [Applet],\n              'pullToRefreshReady': [],\n              'exit': [{ backoutCount: number }],\n              'back': [Applet],\n              'error': [e: unknown]\n            }\n            type TriggerEventTypes = keyof TriggerEventArgsMap\n            type TriggerEventCallbackArgs&lt;N extends TriggerEventTypes> = TriggerEventArgsMap[N]\n            type TriggerEventCallback&lt;N extends TriggerEventTypes> = (...args: TriggerEventArgsMap[N]) => void\n            type TriggerEventTypesCallbacks = Record&lt;TriggerEventTypes, TriggerEventCallback&lt;keyof TriggerEventArgsMap>>\n            type on = &lt;T extends TriggerEventTypes, F extends TriggerEventCallback&lt;T>>(type: T, fn: F, groupName?: string) => this\n            type off = &lt;T extends TriggerEventTypes, F extends TriggerEventCallback&lt;T>>(type: T, fn: F) => this\n            type one = on\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"<b>safeAreaChange</b>"},{type:"text",value:"可监听安全边距更新，若 updateSafeArea 被调用时通知，返回安全边距对象。"},{type:"text",value:"<b>globalCSSVariablesChange</b>"},{type:"text",value:"可监听全局样式变量更新，若 updateGlobalCSSVariables 被调用时通知，返回更新样式变量对象。"},{type:"text",value:"<b>transformStart</b>"},{type:"text",value:"当发生窗口切换前将通知，返回窗口程序卡数组。"},{type:"text",value:"<b>transformEnd</b>"},{type:"text",value:"当发生窗口切换完成时将通知，返回窗口程序卡数组。"},{type:"text",value:"<b>systemDidMount</b>"},{type:"text",value:"当系统程序卡执行完成时将通知，并返回 System Applet。"},{type:"text",value:"<b>frameworksDidMount</b>"},{type:"text",value:"当框架程序卡执行完成时将通知，并返回 Frameworks Applet。"},{type:"text",value:"<b>pullToRefreshReady</b>"},{type:"text",value:"当配置使用了下拉刷新，且下拉刷新原子能力准备完成时发出通知。"},{type:"text",value:"<b>exit</b>"},{type:"text",value:"当程序触发退出应用时发出通知，返回尝试退出累积次数。"},{type:"text",value:"<b>back</b>"},{type:"text",value:"当程序触发历史返回时通知，返回目标 Applet。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const { application } = await createApplication({\n              applets: {\n                ...\n              }\n            })\n            application.on('frameworksDidMount', () => {\n              //...\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"Application Events 上的事件使用场景一般不高，比较常用的事件在 Applet Events 上的比较多一些。"}]]},Q={title:"Application.get/add/del",content:[[{type:"title",value:"Application.get"},{type:"sub",value:"Application.get"},{type:"text",value:"获得程序卡对象 Applet。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type get = (id: string) => Promise&lt;Applet>\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"“id”为要获取的程序卡名。"},{type:"text",value:"其返回为一个 Promise。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const home = await application.get('home')\n          </code-highlight>\n        "}],[{type:"title",value:"Application.del"},{type:"sub",value:"Application.del"},{type:"text",value:"删除一个程序卡对象 Applet。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type del = (id: string) => Promise&lt;boolean>\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"“id”为要删除的程序卡名。"},{type:"text",value:"其返回为一个 Promise，删除成功你将获得 true。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const isDel = await application.del('demo')\n          </code-highlight>\n        "}],[{type:"title",value:"Application.add"},{type:"sub",value:"Application.add"},{type:"text",value:"增加一个程序卡对象 Applet。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            declare interface AppletManifest {\n              config: AppletConfig\n              resources?: AppletResources\n              components?: ((w: Window) => CustomElementConstructor)[]\n              events?: Partial<AppletEvents>\n            }\n            type add = (id: string, manifest: AppletManifest) => Applet\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"“id”为要新增的程序卡名。"},{type:"text",value:"其返回为新程序卡对象 Applet。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const newApplet = await application.add('demo', {\n              config: {\n                title: 'title',\n                ...\n              }\n            })\n          </code-highlight>\n        "}]]},Y={title:"Application.exists",content:[[{type:"title",value:"Application.exists"},{type:"sub",value:"Application.exists"},{type:"text",value:"取得当前页面是否为首次载入的历史序列上。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type exists = boolean\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"当你首次访问链接进入应用时，Lath 会记录你当前历史节点的位置，凡是发生页面活动后都可以检测当前位置是否发生了变动，如果该值为 false，则表示历史已经发生变化，即当前历史非首次进入的历史。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            console.log(application.exists)\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"该方法仅记录初次载入的节点位置，例如你在任何页面发生浏览器刷新都会导致该节点重新标记位置。"}]]},Z={title:"Application.updateSafeArea",content:[[{type:"title",value:"Application.updateSafeArea"},{type:"sub",value:"Application.updateSafeArea"},{type:"text",value:"更新应用的安全边距（受同源策略限制）。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type ApplicationSafeAreaValue = string | Array<string>\n            type safeArea = (data: ApplicationSafeAreaValue) => void \n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"其初始值请参照模块配置项 [safeArea]。"},{type:"text",value:"updateSafeArea 参数为一个数组，同 CSS Margin 一样通过顺时针枚举表达。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            application.updateSafeArea(['48px', 0, '60px', 0])\n            application.updateSafeArea(['48px', 0, '60px'])\n            application.updateSafeArea(['60px', 0])\n            application.updateSafeArea(['48px'])\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"在应用中安全距离并不一定指的是系统默认刘海屏，而是由框架程序卡所叠加的安全区域，而当框架交互发生安全边距变化时，则可通过该方法控制各程序卡的显示逻辑。"},{type:"text",value:"非同源程序卡页面不受此控制，但可通过自行建立 postMessage 来同步次操作。另外，在 Application 对象上可通过 “on/one” 来监听 “safeAreaChange” 事件。"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            application.on('safeAreaChange', (data) => {\n              console.log(data)\n              // applet 为跨域页面模块\n              // applet.view 为跨域页面 iframe\n              applet.view.postMessage({\n                action: 'safeAreaChange',\n                data\n              }, '*')\n            }\n          </code-highlight>\n        "},{type:"tips",value:"在配置中的 events 定义函数中以及通过 Application.get 等方法都可直接获取目标程序卡对象 Applet。"}]]},ee={title:"Application.updateGlobalCSSVariables",content:[[{type:"title",value:"Application.updateGlobalCSSVariables"},{type:"sub",value:"Application.updateGlobalCSSVariables"},{type:"text",value:"更新应用的全局 CSS 变量（受同源策略限制）。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type ApplicationSafeAreaValue = string | Array<string>\n            type updateSafeArea = (data: ApplicationSafeAreaValue) => void\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"执行更新时，所有生命周期内的模块都将进行实时的样式变量更新。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            application.updateGlobalCSSVariables({\n              '---common-button-color': '#000000',\n              '---common-button-width': '100%',\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"跨域模块页面需要自行处理，处理方法请参考 Application.updateSafeArea 相关介绍。"}]]},te={title:"Applet.slide",content:[[{type:"title",value:"Applet.slide"},{type:"sub",value:"Applet.slide"},{type:"text",value:"程序坞的控制对象（Applet Snap 效果的模块切换器对象）。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface Slide {\n              to: (id: number | string) => Promise&lt;unknown> \n              index: number\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"“to” 函数能够接受一个序列（对应配置项 defaultSlideViewApplets 中的模块序列）/模块 id。"},{type:"text",value:"“index” 属性可获取当前 SlideView 上所处于激活状态的程序卡的序列。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const applet = await application.get('home')\n            await applet.slide.to('pageA')\n            console.log(applet.slide.index)\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"SlideView 对象，即程序坞，关于他的创建请参照配置项：DefaultSlideViewApplets。"}]]},pe={title:"Applet.view",content:[[{type:"title",value:"Applet.view"},{type:"sub",value:"Applet.view"},{type:"text",value:"程序卡的视图对象。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type view = HTMLElement | HTMLPortalElement | HTMLIFrameElement | null\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"视图的不同的元素类型由 viewType 而决定。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const applet = await application.get('home')\n            console.log(applet.view)\n          </code-highlight>\n        "}]]},ne={title:"Applet.viewType",content:[[{type:"title",value:"Applet.viewType"},{type:"sub",value:"Applet.viewType"},{type:"text",value:"程序卡视图的类型。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type viewType = 'portal' | 'iframe' | 'shadow'\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"根据配置项 source 和 render 生成的程序卡分别对应 “iframe” 和 “shadow” 两种类型，而同时配有 source 和 portal 属性的程序卡则为 “portal” 类型。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const applet = await application.get('home')\n            console.log(applet.viewType)\n          </code-highlight>\n        "}]]},le={title:"Applet.refresh",content:[[{type:"title",value:"Applet.refresh"},{type:"sub",value:"Applet.refresh"},{type:"text",value:"程序卡的视图对象。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type refresh = () => Promise<void>\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"平滑页面刷新，返回一个 Promise 对象。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const applet = await application.get('home')\n            applet.refresh()\n          </code-highlight>\n        "}]]},ae={title:"Applet.sameOrigin",content:[[{type:"title",value:"Applet.sameOrigin"},{type:"sub",value:"Applet.sameOrigin"},{type:"text",value:"程序卡页面是否同源。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type sameOrigin = boolean\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"由 source.src 所配置的程序卡，若为同源返回 true。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const applet = await application.get('home')\n            console.log(applet.sameOrigin)\n          </code-highlight>\n        "}]]},ie={title:"Applet.color",content:[[{type:"title",value:"Applet.color"},{type:"sub",value:"Applet.color"},{type:"text",value:"程序卡的背景色。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type color = string\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"color 来自于 config中配置，若未配置则返回 frameworks Applet 的 color 设置，若依然未配置或使用继承，则根据浏览器是否为 dark模式分别返回黑白两色。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const applet = await application.get('home')\n            console.log(applet.color)\n          </code-highlight>\n        "}]]},oe={title:"Applet Events",content:[[{type:"title",value:"Applet Events"},{type:"sub",value:"Applet > on"},{type:"text",value:"常用事件监听（on, one, off）。"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type ApplicationSafeAreaValue = string | Array&lt;string>\n            type GlobalCSSVariables = { [key: string]: string }\n            type TriggerEventArgsMap = {\n              show: [],\n              hide: [],\n              willShow: [],\n              willHide: [],\n              destroy: [],\n              pullToRefreshEnd: [],\n              pullToRefreshCancel: [],\n            }\n            type TriggerEventTypes = keyof TriggerEventArgsMap\n            type TriggerEventCallbackArgs&lt;N extends TriggerEventTypes> = TriggerEventArgsMap[N]\n            type TriggerEventCallback&lt;N extends TriggerEventTypes> = (...args: TriggerEventArgsMap[N]) => void\n            type TriggerEventTypesCallbacks = Record&lt;TriggerEventTypes, TriggerEventCallback&lt;keyof TriggerEventArgsMap>>\n            type on = &lt;T extends TriggerEventTypes, F extends TriggerEventCallback&lt;T>>(type: T, fn: F, groupName?: string) => this\n            type off = &lt;T extends TriggerEventTypes, F extends TriggerEventCallback&lt;T>>(type: T, fn: F) => this\n            type one = on\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"<b>show</b>"},{type:"text",value:"程序卡显示。"},{type:"text",value:"<b>hide</b>"},{type:"text",value:"程序卡消失。"},{type:"text",value:"<b>willShow</b>"},{type:"text",value:"程序卡即将显示。"},{type:"text",value:"<b>willHide</b>"},{type:"text",value:"程序卡即将消失。"},{type:"text",value:"<b>destroy</b>"},{type:"text",value:"程序卡被销毁。"},{type:"text",value:"<b>pullToRefreshEnd</b>"},{type:"text",value:"程序卡下拉刷新结束。"},{type:"text",value:"<b>pullToRefreshCancel</b>"},{type:"text",value:"程序卡下拉刷新取消。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const applet = await application.get('home')\n            applet.on('willShow', () => {\n              //...\n            })\n          </code-highlight>\n        "}]]},he={title:"Tutorial",content:[[{type:"title",value:"制作滑动卡片效果"},{type:"brief",value:"滑动切卡效果就是将多个 Applet 并排一列，通过左右的滑动手势实现 Applet 之间的切换。"},{type:"text",value:'\n          <div style="display: flex; width: 100%; box-sizing: border-box; height: 300px; padding: 10px; border-radius: 18px; background: linear-gradient(300deg, #ed6f89, #ff8351);">\n            <div style="min-width: 90%; height: 260px; border-radius: 18px; margin: 10px 0 0 -50%; border: 1px solid rgba(0,0,0,.1); background: #ff170045; color: #fff2ee70; line-height: 260px; font-size: 90px; text-indent: 20px;">PageA</div>\n            <div style="min-width: 90%; height: 260px; border-radius: 18px; margin: 10px 0 0 10px; border: 1px solid rgba(0,0,0,.1); background: #ff000021; color:#000; line-height: 260px; font-size: 70px; text-indent: 20px;">PageB</div>\n          </div>\n        '},{type:"text",value:"这会很容易让我们联想到 <b>Tab</b> 功能，但他们存在一些微的小区别，比如 Tab 一般是不具有滑动手势的。"},{type:"text",value:'我们在实现这个效果前需要确定滑动卡片的效果是由哪个视图承接的，即实现该效果的 Applet 是谁，同时在这个视图中所嵌套的并排可滑动的 Applet 是谁？确定好这些之后我们就可以开始创建效果了，用到配置项 <a applet-to="defaultSlideViewApplets" clone-as="popDocs">defaultSlideViewApplets</a>'},{type:"text",value:"假使我们有三个 Applet 分别命名为 A、 B 、C，我们希望有一个视图可以同时承载 ABC 三个 Applet，并使它们能够呈现 Slider 效果。"},{type:"text",value:"我们新建一个 Applet D，它并不具备任何自身的视图，而仅是作为空容器将 ABC三个 Applet 引入进来，那么此时我们导航进入到 D时就可看到一个 Slider 效果的视图了，如果我们希望访问到 B，则只需先访问 D 再访问 B，若已经存在 D 则可直接访问 B 即可。"},{type:"code",value:"\n        <code-highlight type=\"ts\">\n          createApplication({\n            applets: {\n              frameworks: {\n                config: {\n                  index: 'D'\n                }\n              },\n              A: {\n                config: {\n                  source: {\n                    src: './a.html'\n                  }\n                }\n              },\n              B: {\n                config: {\n                  source: {\n                    src: './b.html'\n                  }\n                }\n              },\n              C: {\n                config: {\n                  source: {\n                    src: './c.html'\n                  }\n                }\n              },\n              D: {\n                config: {\n                  defaultSlideViewApplets: [\n                    {\n                      id: \"A\",\n                      activate: 'instant'\n                    },\n                    {\n                      id: \"B\",\n                      activate: 'lazy'\n                    },\n                    {\n                      id: \"C\",\n                      activate: 'lazy'\n                    }\n                  ]\n                }\n              }\n            }\n          })\n        </code-highlight>\n        "}]]}}}]);