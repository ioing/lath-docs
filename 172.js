"use strict";(self.webpackChunklath_docs=self.webpackChunklath_docs||[]).push([[172],{172:(e,t,n)=>{n.r(t),n.d(t,{allowHost:()=>A,appletManifestProcess:()=>S,apply:()=>N,background:()=>y,capture:()=>T,color:()=>r,components:()=>w,customEffect:()=>d,defaultSlideViewApplets:()=>I,events:()=>G,free:()=>h,globalCSSVariables:()=>D,holdBack:()=>R,index:()=>p,inject:()=>C,install:()=>i,level:()=>s,limit:()=>f,mainScrollId:()=>z,mediaGuard:()=>b,modality:()=>u,noShadowDom:()=>E,notFound:()=>O,openSlideViewLeftHolder:()=>M,portal:()=>x,preIndex:()=>j,prerender:()=>m,presetEffect:()=>c,pullToRefresh:()=>P,render:()=>L,resource:()=>v,safeArea:()=>W,sandbox:()=>k,singleFlow:()=>H,singleLock:()=>F,source:()=>o,start:()=>a,tapStatusBarToScrollToTop:()=>V,timeout:()=>g,title:()=>l,transient:()=>q,tunneling:()=>B,useMirroring:()=>U});const i={title:"Install & Preface",content:[[{type:"title",value:"Install"},{type:"text",value:"Using <b>npm / yarn</b> to install"},{type:"code",value:'\n          <code-highlight type="bash">\n            $ npm install lath --save\n            // or\n            $ yarn add lath\n          </code-highlight>\n        '},{type:"text",value:"Lath is an experience enhancement container with very small initial dependencies, only about <b>5kb</b>. Its core capabilities are atomic, and dependencies are only dynamically loaded when needed."}],[{type:"title",value:"Why use it?"},{type:"text",value:'It can take your page experience to the next level and achieve the effect comparable to native Apps, such as <a to-applet="doc?id=pullToRefresh" clone-as="popDoc">Preload secondary pages</a>, <a to-applet="doc?id=modality" clone-as="popDoc">Sheets Bottom</a> interactive effect, <a to-applet="doc?id=pullToRefresh" clone-as="popDoc">smooth flicker-free pull-down refresh</a>, to achieve seamless<a to-applet="doc?id=presetEffect" clone-as="popDoc">Page segue effects</a>and smooth<a to-applet="doc?id=presetEffect" clone-as="popDoc">Page horizontal sliding effect</a>and many other implementation schemes.'},{type:"text",value:"When you want to get all of this, you do not need to make changes to the original logic and framework, or even block the page performance when the initial page loads."},{type:"text",value:"Lath has a very good design in window management. It can not only automatically help you to recycle resources, but also automatically control the event process between pages. The applications created with it are truly Web Apps that are comparable to Native Apps."},{type:"text",value:"Get Started Next!"}]]},a={title:"Install & Preface",content:[[{type:"title",value:"Concept"},{type:"text",value:"Before getting started quickly, let's first understand the basic concepts."},{type:"text",value:"\n          <ul>\n            <li><b>Application</b>: A Lath application is composed of several Applets.</li>\n            <li><b>Applet</b>: An Applet is composed of one page or one View and its related configuration files.</li>\n            <li><b>FrameworksApplet</b>: Each Lath Application must have a frame-type Applet, which mainly carries public capabilities, such as navigation bars and so on.</li>\n          </ul>\n        "},{type:"tips",value:"Lath application is actually a SPA (single page application), its corresponding routing view can be a slice view inside itself or an external page view, no matter what type of view it is, it is used as an applet the entity content exists."}],[{type:"title",value:"Apply"},{type:"text",value:"Suppose we want to make a SPA (single page application) now, and we have made each routing page corresponding to the application, then we only need to assemble it in the following way:"},{type:"text",value:"Use the <b>&lt;define-application></b> container as the root node to wrap the entire content of the page, so that the page is declared as a Lath application, and then use <b>&lt;define-applet></b> container inside it to wrap a specific routing view (we can understand it as a page in a traditional SPA) so that the wrapping view is declared as a view of an Applet entity."},{type:"code",value:"\n          <code-highlight type='html'>\n            &lt;body>\n              &lt;define-application default-applet=\"appletA\">\n                &lt;define-applet applet-id=\"appletA\">\n                  &lt;div>\n                    This is the content of 'appletA'\n                  &lt;/div>\n                &lt;/define-applet>\n                &lt;define-applet applet-id=\"appletB\">\n                  &lt;div>\n                    This is the content of 'appletB'\n                  &lt;/div>\n                &lt;/define-applet>\n              &lt;/define-application>\n            &lt;/body>\n          </code-highlight>\n        "},{type:"text",value:"\n          <ul>\n            <li>The attribute <b>“default-applet”</b> on &lt;define-application> can specify an applet name as the default view when the application is initialized, that is, the earliest view visible to the user.</li>\n            <li>The attribute <b>“applet-id”</b> on &lt;define-applet> is the declared applet name</li>\n          </ul>\n        "},{type:"tips",value:'"default-applet" is the applet declared by &lt;define-applet> in the &lt;define-application> package. When the page is opened in the browser, only the specified applet view is visible, and other views are not visible.'},{type:"text",value:"Using lable wrapping is the first step in creating a Lath application. Next, we also need to configure properties for each declared applet, such as setting a title for each applet."},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            import { createApplication } from 'lath'\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    title: 'Lath Demo'\n                  }\n                },\n                appletA: {\n                  config: {\n                    title: 'Page A'\n                  }\n                },\n                appletB: {\n                  config: {\n                    title: 'Page B'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"text",value:'We use the &lt;define-application> container to declare the application, but to actually start the application we also need to execute the <a to-applet="doc?id=install" clone-as="popDoc">createApplication</a> method, and pass in the Applet related configuration.'},{type:"text",value:'Unsurprisingly we will get a "magic" page, at which point we can do this via the A link or <a to-applet="doc?id=applicationTo" clone-as="popDoc">Application.to</a> etc. methods are routed to a defined Applet view.'},{type:"hr"},{type:"text",value:"In general, we will not integrate all the routing pages that may be loaded in the application into one page at one time, but hope to load on demand, then we only need to express it through the configuration information:"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            import { createApplication } from 'lath'\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    title: 'Lath Demo'\n                  }\n                },\n                home: {\n                  config: {\n                    title: 'home',\n                    source: {\n                      src: 'https://www.yoursite.com/home.html' \n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"text",value:'Applet views can be declared not only through &lt;define-applet>, but also through configuration items <a to-applet="doc?id=source" clone-as="popDoc">source</a>.'},{type:"text",value:"When using source to define an applet view, there is no need to declare it with &lt;define-applet>."},{type:"tips",value:"Generally, we will declare the frameworks Applets and the first screen Applet by the method of &lt;define-applet>, and the other Applets will be declared by configuring the 'source' method, which can ensure the maximum loading speed of the first screen."}],[{type:"title",value:"Common Problems"},{type:"text",value:"<b>Where does the scroll event go when declared with &lt;define-applet>?</b>"},{type:"text",value:'Each Applet view is equivalent to a complete page content, and it should have its own scroll container, so when declared with &lt;define-applet>, its internal logic related to scroll events needs to be moved from "body" Except, the modification is bound to its own &lt;define-applet>  tag element.'},{type:"hr"},{type:"text",value:"<b>How to introduce cross-domain page views?</b>"},{type:"text",value:'When using source to declare an Applet\'s view, if its src page points to a cross-domain page, the ability of the proxy type in the page will be limited. To solve this problem, you can also introduce Lath in the reference page and enable the option <a to-applet="doc?id=tunneling" clone-as="popDoc">PresetConfig > tunneling</a> to lift some restriction.'},{type:"hr"},{type:"text",value:"<b>Does Lath have timing requirements?</b>"},{type:"text",value:"Lath as an experience enhancement container, is not necessary on the first screen, so we recommend executing the 'createApplication' method after the first screen is loaded, so as not to block the rendering of the first screen content."},{type:"hr"},{type:"text",value:"<b>Typescript&JSX warning?</b>"},{type:"text",value:"When using Typescript in the React environment, we need to define the type of the container's label, otherwise 'ts' will generate a warning. At this time, add 'the type.d.ts' file to the project."},{type:"code",value:"\n          <code-highlight type='ts'>\n            // type.d.ts\n            import 'lath'\n            declare namespace JSX {\n              interface IntrinsicElements {\n                'define-applet': {\n                  children: Element\n                  'applet-id': string\n                }\n                'define-application': {\n                  children: Element\n                  'default-applet': string\n                }\n              }\n            }\n          </code-highlight>\n        "}]]},l={title:"Title",content:[[{type:"title",value:"title"},{type:"sub",value:"AppletConfig > title"},{type:"text",value:"Applet titles, mainly used for the display of browser window titles."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              title?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"When the window is switched, the configuration item acts as the Title tab in the page."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    title: 'Home Page'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"tips",value:"When the system Applets, framework Applets and home page Applets are set to title at the same time, their display weights are: home page > framework > system. In fact, this option for the system type Applet is unnecessary because it never takes effect."}]]},o={title:"Source",content:[[{type:"title",value:"Source"},{type:"sub",value:"AppletConfig > source"},{type:"text",value:"Define the HTML source code for the applet, which will run inside the container created by Lath."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            interface AppletBaseConfig {\n              source?: EitherOr<{\n                src?: string\n                html?: string | (() => Promise<string> | string)\n              }, 'src', 'html'>,\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"Can be divided into Source Mode and Link Mode."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"text",value:"<b>Source Mode</b>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    title: \'Home Page\',\n                    source: {\n                      html: `\n                        &lt;html lang="en">\n                        &lt;head>&lt;/head>\n                        &lt;body>\n                          Hello World!\n                        &lt;/body>\n                        &lt;/html>\n                        `\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"text",value:"<b>Link Mode</b>"},{type:"code",value:"\n          <code-highlight type=\"js\">\n            export default {\n              config: {\n                  title: 'Home Page',\n                  source: {\n                  src: 'http://yoursite.com'\n                }\n              }\n            }\n          </code-highlight>\n        "},{type:"text",value:"Choose one of the two modes. And if they coexist, the src Link Mode will take precedence."},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"tips",value:"When using Link Mode, you need to comply with the same-origin policy, otherwise some capabilities will not be enabled, such as Capture, Apply, Inject, etc. If you need to use these features, you need to also connect the target page to Lath and turn on the 'tunneling' mode, which can be referred to \"PresetConfig > tunneling\"."}]]},p={title:"Index",content:[[{type:"title",value:"Index"},{type:"sub",value:"AppletConfig > index"},{type:"text",value:"Define the applet as default entrance for an App. (frameworks Applet exclusive configuration)"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              index?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:'When starting the Lath application, it will first start the frameworks applet, and then start the home page applet according to the "index" configuration.'},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    index: 'home'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"text",value:" The applet named 'home' will firstly be initialized when the app starts."}]]},h={title:"Free",content:[[{type:"title",value:"Free"},{type:"sub",value:"AppletConfig > free"},{type:"text",value:"Define the window display type of the APPLETS."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              free?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"When free equals true, the APPLET runs in 'full-screen mode', that is, it's not bound by the framework card.(Applets[id = frameworks])."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    free: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"Suppose the framework card is a module with tabBar function, at this time the applet will directly cover the entire framework card to run, otherwise the applet will run inside the framework card. (That is, the tabBar is overridden on the framework card)."}]]},s={title:"Level",content:[[{type:"title",value:"Level"},{type:"sub",value:"AppletConfig > level"},{type:"text",value:"The Applet View Window displays the hierarchy."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              level?: number\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"Generally, the level of the above-the-fold Applet is 0, and it increases gradually according to the access depth."},{type:"text",value:"The Applet hierarchy will also reflect the effect of the transition animation: from small to large, it is a forward animation； and vice versa, from large to small, it is a reverse animation."},{type:"text",value:"When the history rolls back to the Applet with level 0, the singleLock event will be triggered. For details, please refer to the relevant description in the [singleLock] configuration."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    level: 1\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"If the two modules to be jumped are modules of the same level, the transition animation effect will be automatically turned off."},{type:"tips",value:"Why are sibling module animations turned off? The main scene when the animation of the same level module is turned off is for tab switching. Generally, a window animation effect is not required for tab switching, but animation effects may be required when switching from windows at other level."}]]},r={title:"Color",content:[[{type:"title",value:"Color"},{type:"sub",value:"AppletConfig > color"},{type:"text",value:"Define the initial window background color of the Applets."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              color?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"The default background color can present a good visual transition when the Applet is not loaded."},{type:"text",value:"The default value automatically fills in black/white based on whether the browser is in 'Dark Mode'."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    color: '#000'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"Please choose an appropriate background color to fill the Applet window to ensure visual consistency."},{type:"tips",value:"When the background color does not match the Applet content, the user is likely to see a flicker."}]]},c={title:"Animate Effect",content:[[{type:"title",value:"Animate Effect"},{type:"sub",value:"AppletConfig > animation"},{type:"text",value:"Applet windows transition preset animation effect."},{type:"text",value:'\n          Demo:\n          <ul>\n            <li>\n              <svg t="1661238867400" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="25438" width="200" height="200"><path d="M512 17.066667C238.933333 17.066667 17.066667 238.933333 17.066667 512S238.933333 1006.933333 512 1006.933333 1006.933333 785.066667 1006.933333 512 785.066667 17.066667 512 17.066667z m358.4 477.866666c0 54.613333-47.786667 102.4-102.4 102.4h-276.48l44.373333 44.373334c37.546667 37.546667 37.546667 95.573333 0 129.706666-17.066667 17.066667-40.96 27.306667-64.853333 27.306667s-47.786667-10.24-64.853333-27.306667L170.666667 535.893333c-23.893333-23.893333-23.893333-61.44 0-85.333333l235.52-235.52c34.133333-34.133333 95.573333-34.133333 129.706666 0 37.546667 37.546667 37.546667 95.573333 0 129.706667l-44.373333 47.786666h276.48c54.613333 0 102.4 44.373333 102.4 102.4z" fill="#707070" p-id="25439"></path></svg>\n              <a href="#empty" preset-effect="slide-left" clone-as="empty-left">slide-left</a>\n            </li>\n            <li>\n              <svg t="1661238590211" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="15411" width="200" height="200"><path d="M512 1006.933333c273.066667 0 494.933333-221.866667 494.933333-494.933333S785.066667 17.066667 512 17.066667 17.066667 238.933333 17.066667 512 238.933333 1006.933333 512 1006.933333z m-358.4-477.866666c0-54.613333 47.786667-102.4 102.4-102.4h276.48l-44.373333-44.373334c-37.546667-37.546667-37.546667-95.573333 0-129.706666 17.066667-17.066667 40.96-27.306667 64.853333-27.306667s47.786667 10.24 64.853333 27.306667l235.52 235.52c23.893333 23.893333 23.893333 61.44 0 85.333333l-235.52 235.52c-34.133333 34.133333-95.573333 34.133333-129.706666 0-37.546667-37.546667-37.546667-95.573333 0-129.706667l44.373333-47.786666H256c-54.613333 0-102.4-44.373333-102.4-102.4z" fill="#707070" p-id="15412"></path></svg>\n              <a href="#empty" preset-effect="slide-right" clone-as="empty-right">slide-right</a>\n            </li>\n            <li>\n              <svg t="1661238767871" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="20430" width="200" height="200"><path d="M512 0C228.693333 0 0 228.693333 0 512s228.693333 512 512 512 512-228.693333 512-512S795.306667 0 512 0z m279.893333 556.373333c-34.133333 34.133333-95.573333 34.133333-129.706666 0L614.4 508.586667V785.066667c0 58.026667-44.373333 102.4-102.4 102.4s-102.4-44.373333-102.4-102.4v-273.066667l-44.373333 44.373333c-34.133333 34.133333-95.573333 34.133333-129.706667 0-37.546667-37.546667-37.546667-95.573333 0-129.706666l235.52-235.52c23.893333-23.893333 61.44-23.893333 85.333333 0l235.52 235.52c17.066667 17.066667 27.306667 40.96 27.306667 64.853333s-10.24 47.786667-27.306667 64.853333z" fill="#707070" p-id="20431"></path></svg>\n              <a href="#empty" preset-effect="slide-up" clone-as="empty-up">slide-up</a>\n            </li>\n            <li>\n              <svg t="1661238893748" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="25711" width="200" height="200"><path d="M512 0C228.693333 0 0 228.693333 0 512s228.693333 512 512 512 512-228.693333 512-512S795.306667 0 512 0z m276.48 597.333333l-235.52 235.52c-10.24 13.653333-27.306667 20.48-40.96 20.48s-30.72-6.826667-40.96-17.066666l-235.52-235.52c-20.48-20.48-30.72-44.373333-30.72-68.266667s10.24-47.786667 27.306667-64.853333c34.133333-34.133333 95.573333-34.133333 129.706666 0L409.6 512V238.933333c0-58.026667 44.373333-102.4 102.4-102.4s102.4 44.373333 102.4 102.4v273.066667l44.373333-44.373333c34.133333-34.133333 95.573333-34.133333 129.706667 0 37.546667 37.546667 37.546667 95.573333 0 129.706666z" fill="#707070" p-id="25712"></path></svg>\n              <a href="#empty" preset-effect="slide-down" clone-as="empty-down">slide-down</a>\n            </li>\n            <li>\n              <svg t="1661238015684" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="6735" width="200" height="200"><path d="M789.333333 64a170.666667 170.666667 0 0 1 170.666667 170.666667v311.466666a8.533333 8.533333 0 0 1-8.533333 8.533334h-46.933334a8.533333 8.533333 0 0 1-8.533333-8.533334V234.666667a106.666667 106.666667 0 0 0-102.037333-106.56L789.333333 128H234.666667a106.666667 106.666667 0 0 0-106.56 102.037333L128 234.666667v554.666666a106.666667 106.666667 0 0 0 102.037333 106.56L234.666667 896h311.466666c4.693333 0 8.533333 3.84 8.533334 8.533333v46.933334a8.533333 8.533333 0 0 1-8.533334 8.533333H234.666667a170.666667 170.666667 0 0 1-170.666667-170.666667V234.666667a170.666667 170.666667 0 0 1 170.666667-170.666667h554.666666z m85.333334 554.666667a85.333333 85.333333 0 0 1 85.333333 85.333333v170.666667a85.333333 85.333333 0 0 1-85.333333 85.333333h-170.666667a85.333333 85.333333 0 0 1-85.333333-85.333333v-170.666667a85.333333 85.333333 0 0 1 85.333333-85.333333h170.666667z m0 64h-170.666667a21.333333 21.333333 0 0 0-21.184 18.837333L682.666667 704v170.666667a21.333333 21.333333 0 0 0 18.837333 21.184L704 896h170.666667a21.333333 21.333333 0 0 0 21.184-18.837333L896 874.666667v-170.666667a21.333333 21.333333 0 0 0-18.837333-21.184L874.666667 682.666667zM460.8 192c4.693333 0 8.533333 3.84 8.533333 8.533333v46.933334a8.533333 8.533333 0 0 1-8.533333 8.533333h-159.530667l229.162667 229.184-45.248 45.248L256 301.269333V460.8a8.533333 8.533333 0 0 1-8.533333 8.533333H200.533333a8.533333 8.533333 0 0 1-8.533333-8.533333V256a64 64 0 0 1 60.245333-63.893333L256 192h204.8z" fill="#707070" p-id="6736"></path></svg>\n              <a href="#empty" preset-effect="zoom" clone-as="empty-zoom">zoom</a>\n            </li>\n            <li>\n              <svg t="1661237566437" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3402" width="200" height="200"><path d="M640 896h85.333333v-85.333333h-85.333333v85.333333z m170.666667-512h85.333333v-85.333333h-85.333333v85.333333zM128 213.333333v597.333334c0 47.146667 38.186667 85.333333 85.333333 85.333333h170.666667v-85.333333h-170.666667V213.333333h170.666667V128h-170.666667c-47.146667 0-85.333333 38.186667-85.333333 85.333333z m682.666667-85.333333v85.333333h85.333333c0-47.146667-38.186667-85.333333-85.333333-85.333333zM469.333333 981.333333h85.333334V42.666667h-85.333334v938.666666z m341.333334-256h85.333333v-85.333333h-85.333333v85.333333z m-170.666667-512h85.333333V128h-85.333333v85.333333z m170.666667 341.333334h85.333333v-85.333334h-85.333333v85.333334z m0 341.333333c47.146667 0 85.333333-38.186667 85.333333-85.333333h-85.333333v85.333333z" p-id="3403" fill="#707070"></path></svg>\n              <a href="#empty" preset-effect="flip" clone-as="empty-flip">flip</a>\n            </li>\n            <li>\n              <svg t="1661239202576" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="40451" width="200" height="200"><path d="M731.0336 859.8528V164.1472c0-40.1408-48.5376-60.3136-77.0048-31.8464L306.176 480.1536c-17.6128 17.6128-17.6128 46.1824 0 63.7952l347.8528 347.8528c28.4672 28.3648 77.0048 8.2944 77.0048-31.9488z" p-id="40452" fill="#707070"></path></svg>\n              <a href="#empty" preset-effect="flip-left" clone-as="empty-flip-left">flip-left</a>\n            </li>\n            <li>\n              <svg t="1661239231548" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="40762" width="200" height="200"><path d="M292.9664 164.1472v695.808c0 40.1408 48.5376 60.3136 77.0048 31.8464L717.824 543.8464c17.6128-17.6128 17.6128-46.1824 0-63.7952L369.9712 132.1984c-28.4672-28.3648-77.0048-8.2944-77.0048 31.9488z" p-id="40763" fill="#707070"></path></svg>\n              <a href="#empty" preset-effect="flip-right" clone-as="empty-flip-right">flip-right</a>\n            </li>\n            <li>\n              <svg t="1661239272632" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="41033" width="200" height="200"><path d="M164.1472 731.0336h695.808c40.1408 0 60.3136-48.5376 31.8464-77.0048L543.8464 306.176c-17.6128-17.6128-46.1824-17.6128-63.7952 0L132.1984 654.0288c-28.3648 28.4672-8.2944 77.0048 31.9488 77.0048z" p-id="41034" fill="#707070"></path></svg>\n              <a href="#empty" preset-effect="flip-up" clone-as="empty-flip-up">flip-up</a>\n            </li>\n            <li>\n              <svg t="1661239101001" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="29928" width="200" height="200"><path d="M65.582671 288.791335l446.417329 446.41733 446.417329-446.41733z" p-id="29929" fill="#707070"></path></svg>\n              <a href="#empty" preset-effect="flip-down" clone-as="empty-flip-down">flip-down</a>\n            </li>\n            <li>\n              <svg t="1661239016758" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="28039" width="200" height="200"><path d="M810.666667 128H213.333333a85.333333 85.333333 0 0 0-85.333333 85.333333v597.333334a85.333333 85.333333 0 0 0 85.333333 85.333333h597.333334a85.333333 85.333333 0 0 0 85.333333-85.333333V213.333333a85.333333 85.333333 0 0 0-85.333333-85.333333zM213.333333 810.666667v-122.026667L335.36 810.666667z m227.413334 0L213.333333 583.253333v-105.813333L546.56 810.666667z m211.2 0L213.333333 371.626667V266.24L757.76 810.666667zM810.666667 757.76L266.24 213.333333h105.386667L810.666667 652.373333z m0-213.333333L477.44 213.333333h105.386667L810.666667 441.173333z m0-211.2L688.64 213.333333H810.666667z" p-id="28040" fill="#707070"></path></svg>\n              <a href="#empty" preset-effect="fade" clone-as="empty-fade">fade</a>\n            </li>\n          </ul>\n        '},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type AnimationPrestType = 'inherit'\n            | 'fade' | 'zoom' | 'sheets-bottom'\n            | 'flip' | 'flip-left' | 'flip-down' | 'flip-right' | 'flip-up'\n            | 'slide' | 'slide-left' | 'slide-right' | 'slide-up' | 'slide-down'\n            interface AppletBaseConfig {\n              animation?: AnimationPrestType\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"Lath provides a choice of common animation effects, just specify your preset effect name to achieve cool windows animation."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    animation: 'slide'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"If the Applet animation effect is not set, the animation effect in the frameworks Applet will be inherited by default."},{type:"text",value:"When a hyperlink that is not defined as an Applet opens a new window, the default window effect is 'slide'."},{type:"tips",value:"Each pre-made animation includes a forward animation and a backward animation which effect will be determined by the direction of your browsing history and the [level] level between the Applets."}]]},d={title:"Custom Effect",content:[[{type:"title",value:"Custom Effect"},{type:"sub",value:"AppletConfig > animation"},{type:"text",value:"Customize Applet window animations."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type AnimationFunction = (e: TransformAnimateEvent) => undefined | Promise&lt;boolean>\n            type AnimationPrestType = 'inherit'\n            | 'fade' | 'zoom' | 'sheets-bottom'\n            | 'flip' | 'flip-left' | 'flip-down' | 'flip-right' | 'flip-up'\n            | 'slide' | 'slide-left' | 'slide-right' | 'slide-up' | 'slide-down'\n            type AnimationConfig = AnimationPrestType | boolean | Array&lt;AnimationPrestType> | [AnimationFunction, AnimationFunction]\n            interface AppletBaseConfig {\n              animation?: AnimationConfig\n            }\n          </code-highlight>\n        "},{type:"text",value:"TransformAnimateEvent is an available object provided in custom animations."},{type:"code",value:'\n          <code-highlight type="ts">\n            interface TransformActionOrigin {\n              x: number,\n              y: number\n            }\n            interface TransformAnimateEvent {\n              x: number\n              y: number\n              in: Animate\n              out: Animate\n              view: Array&lt;HTMLElement>\n              width: number\n              height: number\n              viewport: Array&lt;HTMLElement>\n              applets: Array&lt;Applet>\n              reverse: boolean\n              direction: number\n              backset: number\n              origin: string | Array&lt;number>\n              attach: string | Array&lt;number>\n              touches: TransformActionOrigin | undefined\n              historyDirection: number\n              callback: (stillness: boolean) => void\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"The first function in the array is forward animation and the second function is reverse animation. If the value is a function, the animation can be controlled by parameters, such as 'direction', 'historyDirection', etc."},{type:"text",value:"The Applet hierarchy will also reflect the effect of the transition animation: from small to large, it is a forward animation; and vice versa, from large to small, it is a reverse animation."},{type:"text",value:"When the history rolls back to the Applet with level 0, the singleLock event will be triggered. For details, please refer to the relevant description in the [singleLock] configuration."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            const getAnimate = (type: number) => {\n              return (e: TransformAnimateEvent) => {\n                let inO: number, outO: number, inV: Animate, outV: Animate\n                switch (type) {\n                  case 0:\n                    inO = 1\n                    outO = 0\n                    inV = e.in\n                    outV = e.out\n                    break\n                  case 1:\n                  default:\n                    inO = 0\n                    outO = 1\n                    inV = outV = e.in\n                }\n                inV.duration(0).ease('ease-out-expo').to(0, 0, 0).opacity(inO).end(function () {\n                  outV.duration(767).opacity(outO).end(function () {\n                    e.callback(false)\n                  })\n                })\n                return undefined\n              }\n            }\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    animation: [getAnimate(0), getAnimate(1)]\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"We can see that by using the information provided in 'TransformAnimateEvent', the fade forward and backward animation can be done."}]]},u={title:"Modality",content:[[{type:"title",value:"Modality"},{type:"sub",value:"AppletConfig > modality"},{type:"text",value:"Whether the Applet is displayed in the form of a modal box."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type ModalityType = 'sheets:bottom'\n            interface AppletBaseConfig {\n              modality?: ModalityType\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"Currently only the <b>sheets:bottom</b> type of modal effect is supported, which appears as an overlay window that pops up from the bottom."},{type:"text",value:"The <b>sheets:bottom</b> type also provides a custom option <b>SheetsBottomOptions</b>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type ModalityType = 'sheets:bottom'\n            type SheetsBottomOptions = {\n              top?: string,\n              maskOpacity?: number\n              blockedHolderWidth?: number | 'string'\n              alwaysPopUp?: boolean\n              maskClosable?: boolean\n            }\n            interface AppletBaseConfig {\n              modality?: ModalityType\n              sheetsBottomOptions?: SheetsBottomOptions\n            }\n          </code-highlight>\n        "},{type:"text",value:"\n          <ul>\n            <li>\n              <b>top</b>: The edge distance from the top of the view to the top of the window, CSS units are supported.\n            </li>\n            <li>\n              <b>maskOpacity</b>: The opacity of the background black mash, default is 0.3.\n            </li>\n            <li>\n              <b>blockedHolderWidth</b>: The safe margin of the left finger edge sliding (the size of the margin will cover the interactive area), and the boundary value determines the sensitivity of the left sliding closing.\n            </li>\n            <li>\n              <b>alwaysPopUp</b>: Whether to always keep the popup animation when the window is switched, the default is off, and the window remains still when the scene is switched.\n            </li>\n            <li>\n              <b>maskClosable</b>: Click whether the background mask is allowed to close the window, the default is closed.\n            </li>\n          </ul>\n        "},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                pageA: {\n                  config: {\n                    modality: 'sheets:bottom'\n                    sheetsBottomOptions: {\n                      top: '10%',\n                      maskOpacity: 0.5,\n                      blockedHolderWidth: 20,\n                      alwaysPopUp: false,\n                      maskClosable: true\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"Note that the sheetsBottomOptions option is a further feature description when the modality option is 'sheets:bottom', which needs to be used in conjunction and is not valid when used alone."}]]},y={title:"Background",content:[[{type:"title",value:"Background"},{type:"sub",value:"AppletConfig > background"},{type:"text",value:"Whether the Applet is allowed to run in the background."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            interface AppletBaseConfig {\n              background?: boolean | 'auto'\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"<b>value = false</b>"},{type:"text",value:"Module transitions are destroyed immediately after the transition animation ends."},{type:"text",value:"<b>value = true</b>"},{type:"text",value:"Modules are not destroyed (only if the page load succeeds); the exception is when 'timeout' times out, before startup."},{type:"text",value:"<b>value = 'auto'</b>"},{type:"text",value:"When Automatic Mode is set, the module would intelligently determine whether to destroy, and is destroyed when the following conditions are triggered:"},{type:"text",value:"\n          <ul>\n            <li>When the page is set with SRC and the source is different</li>\n            <li>When the page contains objects such as 'embed, applet, iframe'</li>\n            <li>When the page contains video or audio tags, and there is an error in automatically pausing playback when mediaGuard is enabled</li>\n            <li>There are node churn operations in the page that occur more than 10 times in 3 seconds</li>\n            <li>When the total node operations in the page run more than 1000 times in the background</li>\n          </ul>\n        "},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    background: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:" If an Applet enters the Modality type non-full-screen Applet such as 'Sheets Bottom', it will not be executed even if it meets the destruction conditions."}]]},g={title:"Timeout",content:[[{type:"title",value:"Timeout"},{type:"sub",value:"AppletConfig > timeout"},{type:"text",value:"The valid duration of the Applet life cycle, in milliseconds."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              timeout?: number\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"When the Applet meets the cache conditions or is set to allow background running (background=true), the Applet will check the expiration status before the second entry, and will perform an update operation when it is checked that the Applet has expired."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    timeout: 36000\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"If the value is set to 0, background running (background=true) will not take effect."}]]},f={title:"Limit",content:[[{type:"title",value:"Limit"},{type:"sub",value:"frameworksAppletConfig > limit"},{type:"text",value:"Define the maximum number of Applet that the App can cache in the background. (Frameworks Applet exclusive configuration)."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    limit: 10\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"Default is 5, maximum is 100. It is expressed as the Applet that can be cached in the background at most at the same time in the application. When it exceeds, the modules accessed firstly will be destroyed in turn according to the order of access. If the module is configured with background running (background=true), it will not be affected by this rule."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    limit: 10\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"The number of limits will affect the memory usage of the application when it is running, and it is generally recommended to be 5-20."}]]},v={title:"Resource",content:[[{type:"title",value:"Resource"},{type:"sub",value:"AppletManifest > resource"},{type:"text",value:"Static resources that the Applet depends on when it runs."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletResources {\n              script?: Array&lt;string>\n              image?: Array&lt;string>\n              worker?: Array&lt;string>\n              video?: Array&lt;string>\n              audio?: Array&lt;string>\n              font?: Array&lt;string>\n              style?: Array&lt;string>\n              html?: Array&lt;string>\n            }\n            interface AppletManifest {\n              resource?: AppletResources\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"When switching from the current Applet to the next Applet, if the current Applet is configured with pre-rendering dependencies (prerender=[${nextApplet}]), the static resources are preloaded before the new Applet is loaded, such as the 'script', 'css tags' in HTML, etc., do not need to be declared and configured for the static resources of these internal links, but for the content dynamically loaded through scripts during the running of the page, such as fonts in CSS, dynamically generated media materials, etc., The preloading cannot be completed. At this time, the resources that may be loaded can be preloaded through the resource configuration item."},{type:"text",value:"The Applet hierarchy will also reflect the effect of the transition animation, from small to large, it is a forward animation; and vice versa, from large to small, it is a reverse animation."},{type:"text",value:"When the history rolls back to the Applet with level 0, the singleLock event will be triggered. For details, please refer to the relevant description in the [singleLock] configuration."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  resource: [\n                    image: [\n                      'https://yourCDN.com/001.jpg',\n                      'https://yourCDN.com/002.jpg',\n                      'https://yourCDN.com/003.jpg'\n                    ]\n                  ],\n                  config: {\n                    title: 'Home Page'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"The preload work is not performed immediately, but is loaded sequentially when the browser is idle."},{type:"tips",value:"Unknown types that do not exist in the AppletResources type can try preloading with the script type."}]]},m={title:"Prerender",content:[[{type:"title",value:"Prerender"},{type:"sub",value:"AppletConfig > prerender"},{type:"text",value:"Preloading & pre-rendering of Applets."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              prerender?: Array&lt;string>\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"If there are links to other Applet in the current Applet, and you want to preload these Applets, you can set this property. The page will preload the dependent Applet in the background when it is idle, including the preloading of static resources such as CSS and JS in the document."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  prerender: [${AppletName}, ${AppletName}]\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"When the preload is executed, the loading of the static resources of the internal link will be saved when the user accesses the Applet, but the dynamic data request of the script will not be advanced. If you want to load the data in advance, you need to use it with the previous Applet. The [inject] capability or the  'postMessage' capability is prepended."},{type:"tips",value:"Under 'prerender' condition, the browser cannot complete the pre-rendering work, and its current capability expression is closer to 'prefetch'. However, we hope to reserve the pre-rendering capability in the future, so it still retains this option as 'prerender'."}]]},w={title:"Components",content:[[{type:"title",value:"Components"},{type:"sub",value:"AppletManifest > components"},{type:"text",value:"Applet pages that belong to the same origin can share Web Components with the main Applet page."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletManifest {\n              components?: ((w: Window) => CustomElementConstructor)[]\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"As a future-oriented component standard, Web Components are not only easy to share, but also can greatly improve the experience performance of the page."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            export const getCodeHighlighter = (shadowWindow): CustomElementConstructor => {\n              class CodeHighlighter extends shadowWindow.HTMLElement {\n                constructor () {\n                  super()\n                  const shadowRoot = this.attachShadow({ mode: 'open' })\n                  shadowRoot.appendChild(tmpl.content.cloneNode(true))\n                  ...\n                }\n              }\n      \n              return CodeHighlighter as unknown as CustomElementConstructor\n            }\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    title: 'Home Page'\n                  },\n                  components: [getCodeHighlighter]\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"Since Web Components are to be shared into each Applet Container, we need to register the component in the window variable of the Applet when we encapsulate the component."}]]},b={title:"MediaGuard",content:[[{type:"title",value:"MediaGuard"},{type:"sub",value:"AppletConfig > mediaGuard"},{type:"text",value:"When this setting is enabled, the video and audio in the same-origin Applet will be intelligently controlled. When the module is hidden, the audio/video being played will be automatically paused, otherwise, the paused audio/video will be resumed when module is visible."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              mediaGuard?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"In general scenarios, automatic media control can help you automatically process the media status. If the automatic processing fails, the Applet will be forcibly destroyed, except for background running (background=true)."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    mediaGuard: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"Without this option, you can also manage manually via window visibility events - refer to API - Application - Events."}]]},x={title:"Portal",content:[[{type:"title",value:"Portal"},{type:"sub",value:"AppletConfig > portal"},{type:"text",value:"When the Applet with this property is enabled, when the browser supports the portal feature, the activation operation of the portal will be performed after the transition animation ends, and the Applet page will run in a new context after activation."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              portal?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"The source configuration of the Applet should be in link mode and in the same domain as the main application."},{type:"text",value:"For an Applet set to portal, is [free] option should generally also be set to true."},{type:"text",value:"When the browser dose not support the portal capability, it will automatically downgrade to the general container mode."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    portal: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"This option is suitable for Applets with independent functions and no connection with the main application (such as apply, inject, etc.), otherwise, the configuration of these dependent contexts will be invalid."}]]},A={title:"AllowHost",content:[[{type:"title",value:"AllowHost"},{type:"sub",value:"frameworksAppletConfig > allowHost"},{type:"text",value:"When [capture] is not set, insecure host addresses can be filtered out by this configuration, and vice versa. （frameworks Applet exclusive configuration)"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              allowHost?: Array&lt;string>\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"This configuration is mainly used to prevent the application from accessing foreign websites as expected by splicing url parameters to prevent harm."},{type:"text",value:"This configuration is ignored when the frameworks module has [capture] set."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                frameworks: {\n                  allowHost: [\n                    'aaa.com',\n                    'bbb.com',\n                    'ccc.com'\n                  ]\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"Generally, the jump behavior of A link in the Applet page will be automatically captured as a new window in the application to open, but sometimes this is not expected in all cases, so this option can be used to control an effective domain, when the domain does not match, it will not open a new window in the application, but directly open a new browser window for access."},{type:"tips",value:"If your application may have accessible addresses entered by the user, you will most likely need this configuration to force new pages to be accessed as a new browser window."}]]},k={title:"Sandbox",content:[[{type:"title",value:"Sandbox"},{type:"sub",value:"AppletConfig > sandbox"},{type:"text",value:"Sandbox restrictions for Applet containers."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type SandboxOptions = Array&lt;'allow-same-origin' | 'allow-scripts' | 'allow-forms' | 'allow-modals' | 'allow-orientation-lock' | 'allow-popups'\n            | 'allow-pointer-lock' | 'allow-popups-to-escape-sandbox' | 'allow-presentation' | 'allow-top-navigation' | 'allow-top-navigation-by-user-activation'\n            | 'allow-downloads-without-user-activation' | 'allow-storage-access-by-user-activation' | 'allow-top-navigation-by-user-activation' | string>\n            interface AppletBaseConfig {\n              sandbox?: SandboxOptions\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"This option is only available for Applets that have the [source] option set."},{type:"text",value:"For more information on Sandbox, please refer to the W3C definition."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    sandbox: 'allow-modals'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"If your Applet page is a third-party link, you can use this option to restrict its unnecessary permissions for security reasons."}]]},T={title:"Capture",content:[[{type:"title",value:"Capture"},{type:"sub",value:"AppletConfig > capture"},{type:"text",value:"Capture jump links in other Applets, and jump to this Applet if they match."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              capture?: string | ((resolve: {\n                pathname: string\n                origin: string\n                host: string\n                hash: string\n                href: string\n                search: string\n                port: string\n                searchParams: URLSearchParams\n              }, url: string) => boolean)\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"Capture can accept a 'url path', or a capture function, which can be captured when jumping behavior is performed in other Applets."},{type:"text",value:"When the capture function returns true, it means that the jump link is matched, and the link target will be replaced by the Applet."},{type:"text",value:"After capture, if the jump link carries parameters, the carried parameters will be passed to the capture Applet together."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    capture: (resolve) => {\n                      return resolve.path === '/abc/abc'\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"Whether the Applet is loaded in advance is an important prerequisite for the capture program to work. Therefore, in order to ensure that the capture  Applet has been loaded in advance, it is necessary to include the dependency Applet in the previous Applet configuration option [prerender]."},{type:"text",value:"When this option is turned on, all link jump behavior that can be captured will be handed over to this option to determine whether to open a new window in the application, which means that your rules need to strictly protect the security of the application."},{type:"text",value:"If the frameworks Applet enables this option, all Applets do not set this option will be handled by the frameworks Applet by default, and it should be noted that the configuration time [allowHost] will be invalid, because capture will be processed first."},{type:"tips",value:"The capturer Applet can be captured normally only when the current Applet is opened with link-new-viewport in [apply], otherwise it will not enter the capture logic, but this option is enabled by default unless you turn it off."}]]},S={title:"AppletManifestProcess",content:[[{type:"title",value:"AppletManifestProcess"},{type:"sub",value:"frameworlksAppletConfig > appletManifestProcess"},{type:"text",value:"When the Applet is loaded, its configuration file will be processed by this function before returning. (Frameworks Applet exclusive configuration)"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              appletManifestProcess?: (config: AppletManifest) => AppletManifest\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"The handler function will be passed the current handler card configuration and receive a new one."},{type:"text",value:"All Applet configuration can be rewritten through this configuration, such as setting uniform animation effects or verifying some security options."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    appletManifestProcess: (manify) => {\n                      ... process\n                      return newManify\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"There are some complex options in the Applet configuration, such as 'inject', 'components', etc., through which the reusable configuration can be managed uniformly."}]]},C={title:"Inject",content:[[{type:"title",value:"Inject"},{type:"sub",value:"AppletConfig > inject"},{type:"text",value:"When it is a same-origin Applet page, the set global varialbles and methods can be injected into the Applet page before the Applet page is loaded, such as injecting some 'JSBridge', common variables or rewriting global objects."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              inject?: (w: Window, m: Applet) => void\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"For example, the link jump in the Applet is carried out through 'JSBridge', so Lath cannot automatically capture it, so now you want to rewrite the logic, then you can use this option to rewrite it."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    inject: (appletWindow, applet) => {\n                      appletWindow.open = (url) => {\n                        return applet.application.pushWindow(url).catch(() => {\n                          window.open(url)\n                        })\n                      }\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"It should be noted that the 'inject' option is restricted by the same domain, so it cannot be used in cross-domain scenarios."},{type:"text",value:"'injcect' is a powerful capability, and you can develop incredible capabilities based on it."}]]},L={title:"Render",content:[[{type:"title",value:"Render"},{type:"sub",value:"AppletConfig > render"},{type:"text",value:"In addition to defining the Applet view through the configuration item [source], you can also directly render elements to the Applet through the render method."},{type:"text",value:"Views for system modules and framework modules (system/frameworks Applets) can only be defined using render."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              render?: (target: HTMLElement) => void\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"The 'render' function passes in the root node of the Applet, and developers can directly insert the rendering view into the node."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    render: (target) => {\n                      target.innerHTML = `\n                        &lt;p>Hello World&lt;/p>\n                      `\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"The best practice solution for using the 'render' function is to separate the business logic from the module configuration, and use dynamic 'import' parts of the business logic."}]]},W={title:"SafeArea",content:[[{type:"title",value:"SafeArea"},{type:"sub",value:"AppletConfig > safeArea"},{type:"text",value:"定义全局的 CSS 应用安全边距变量。（frameworks 程序卡专属配置）"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type ApplicationSafeAreaValue = string | Array<string>\n            interface AppletBaseConfig {\n              safeArea?: ApplicationSafeAreaValue | (() => ApplicationSafeAreaValue)\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"值为数字时，分别按顺序表示 顶部、右侧、底部、左侧 的安全边距。"},{type:"text",value:"设置该值后将会在程序卡的全局样式中注入 CSS 全局变量：--application-safe-area-top、--application-safe-area-right、--application-safe-area-bottom、--application-safe-area-left 四个对应的安全边距值。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    safeArea: ['44px', '0px', '0px', '0px']\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"text",value:"如果需要动态的修改这个值则可以通过发送“safeAreaChange”事件来进行更新。"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            application.trigger('safeAreaChange', ['88px', '0px', '0px', '0px'])\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"当 frameworks 程序卡带有头部导航时，为了能让程序卡正常预留导航栏高度，使用该配置能动态调整该高度。"}]]},D={title:"GlobalCSSVariables",content:[[{type:"title",value:"GlobalCSSVariables"},{type:"sub",value:"FrameworksAppletConfig > globalCSSVariables"},{type:"text",value:"Set global CSS variables for the application. (Frameworks Applet exclusive configuration)"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            type GlobalCSSVariables = { [key: string]: string }\n            interface AppletBaseConfig {\n              globalCSSVariables?: GlobalCSSVariables | (() => GlobalCSSVariables)\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"Similar to [safeArea], it can only take effect under the same domain Applet page."},{type:"text",value:'If you need to dynamically modify or increase this value, you can update it through the "API-updateGlobalCSSVariables" event.'},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    globalCSSVariables: {\n                      '--main-color': '#fff',\n                      '--title-font-size': '28px'\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:'Use with "API-updateGlobalCSSVariables" to create a smooth theme transition effect.'}]]},B={title:"Tunneling",content:[[{type:"title",value:"Tunneling"},{type:"sub",value:"PresetConfig > tunneling"},{type:"text",value:'Set the app to "Tunnel Mode". (Preconfigured items before the app starts.)'},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface PresetConfig {\n              tunneling?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"tips",value:"If you access a cross-domain Applet under the current domain, the cross-domain Applet cannot be implemented due to the same-origin policy, the global style variable update, and the ability in [Apply] (such as a new window)."},{type:"text",value:"Some of the limitations of the cross-domain Applet page are addressed by plugging the cross-domain Applet page to Lath and turning on [tunneling]."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              tunneling: true,\n              applets: {\n                ...\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:'When the page is connected to Lath and [tunneling] is turned on, the page itself is a separate application, but when the page is embedded in another Lath application as a Applet, the page opened through the A link (i.e. pushWindow) will not be opened within the application, but will proxied to open in the parent application, if the parent application is also embedded Lath application, and also opened [tunneling] will continue to "tunnel" upwards.'}]]},E={title:"UnuseShadowDom",content:[[{type:"title",value:"UnusedShadowDom"},{type:"sub",value:"PresetConfig > noShadowDom"},{type:"text",value:"Whether the framework uses ShadowDom mode. (Preconfigured items before the app starts)"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface PresetConfig {\n              noShadowDom?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"tips",value:"For more information about ShadowDom, check out the introduction to W3C."},{type:"text",value:"If you start the application by 'createApplication' to specify the \"index\" mode, the preset Applet node will be moved directly to ShadowDom, which will cause the absence of styles and dependencies outside the node (such as some dependent script event binding elements and dynamically injected global styles, etc.)."},{type:"text",value:"ShadowDom mode has been turned off by default, you do not need to set the change option, if you do not have the above problems, and there will be no interference between the Applets of the Slice, you can turn off the Change option, at this time the same page of the slice to produce the Applet is related to each other."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              tunneling: true,\n              applets: {\n                ...\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"This configuration is rarely used, but it would be better if you could use '&lt;define-applet>' instead."}]]},I={title:"DefaultSlideViewApplets",content:[[{type:"title",value:"DefaultSlideViewApplets"},{type:"sub",value:"AppletConfig > defaultSlideViewApplets"},{type:"text",value:"The slideView for the Snap transition effect, we call it SlideView."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type SlideViewApplets = Array<{\n              id: string,\n              activate: 'lazy' | 'instant' | 'passive'\n            }>\n            interface AppletBaseConfig {\n              defaultSlideViewApplets?: SlideViewApplets\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"'id' indicates the name of the Applet to be loaded."},{type:"text",value:"'activate' indicates the activation type of the Applet, which is divided into the following three types:"},{type:"text",value:"\n          <ul>\n            <li>lazy: Load Applet page content when the browser is idle.</li>\n            <li>instant: Instantly loads the Applet page content.</li>\n            <li>passive: Load the Applet page content when activated.</li>\n          </ul>\n        "},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n        <code-highlight type="ts">\n          createApplication({\n            applets: {\n              frameworks: {\n                config: {\n                  defaultSlideViewApplets: [\n                    {\n                      id: "appletA",\n                      activate: \'instant\'\n                    },\n                    {\n                      id: "appletB",\n                      activate: \'lazy\'\n                    }\n                  ]\n                }\n              }\n            }\n          })\n        </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"Applet with 'defaultSlideViewApplets' will no longer have their own views (except frameworks Applet), but other Applet views are nested within them, so this configuration conflicts with [source] and should not be set at the same time."},{type:"tips",value:'In addition, use "API-Applet.slide.to" to slide the slideView to the specified Applet position.'}],[{type:"title",value:"OpenSlideViewLeftHolder"},{type:"sub",value:"AppletConfig > openSlideViewLeftHolder"},{type:"text",value:"When enabled, under the 'SlideView' effect (when 'defaultSlideViewApplets' is configured), the leftmost edge will allow to exit the application when swiping."},{type:"tips",value:"This configuration is mainly used to unblock the exit under the first history record. If the browsing history is greater than 1, there is no edge sliding blockage in most cases. If it is not enabled, only edge elasticity is triggered and it will not go back to the previous level when edge sliding may occur in iOS devices."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              openSlideViewLeftHolder?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"The default value is false."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    defaultSlideViewApplets: [\n                      {\n                        id: "appletA",\n                        activate: \'instant\'\n                      },\n                      {\n                        id: "appletB",\n                        activate: \'lazy\'\n                      }\n                    ],\n                    openSlideViewLeftHolder: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"When this option is turned on ,it should be noted that a 20px non-feedback area will be generated on the left edge of the Applet, and this safe operating distance should be reserved during development."}]]},M={title:"OpenSlideViewLeftHolder",content:[[{type:"title",value:"OpenSlideViewLeftHolder"},{type:"sub",value:"AppletConfig > openSlideViewLeftHolder"},{type:"text",value:"开启后，在 SlideView 效果下（defaultSlideViewApplets 配置时），最左侧边缘滑动时会允许退出应用。'When enabled, under the 'SlideView' effect (when 'defaultSlideViewApplets' is configured), the leftmost edge will allow to exist the application when swiping."},{type:"tips",value:"This configuration is mainly used to unblock the exit under the first history record. If the browsing history is greater than 1, there is no edge sliding blockage in most cases. If it is not enabled, the edge elasticity may occur in iOS devices when edge sliding without falling back to the previous level."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              openSlideViewLeftHolder?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"该值默认为 false。"},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    defaultSlideViewApplets: [\n                      {\n                        id: "appletA",\n                        activate: \'instant\'\n                      },\n                      {\n                        id: "appletB",\n                        activate: \'lazy\'\n                      }\n                    ],\n                    openSlideViewLeftHolder: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"When this option is turned on, it should be noted that a 20px non-feedback area will be generated on the left edge of the Applet, and this safe operating distance should be reserved during development."}]]},P={title:"PullToRefresh",content:[[{type:"title",value:"PullToRefresh"},{type:"sub",value:"AppletConfig > pullToRefresh"},{type:"text",value:"When enabled, a seamless page refresh will be triggered when the main scroll container continues to pull down gestures."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              pullToRefresh?: boolean\n              pullToRefreshTargetScrollId?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:'The premise of enabling this option is that "FrameworksApplet" also enables this option, otherwise it will not take effect.'},{type:"text",value:'Pull-to-refresh will be associated with a scroll container, the container "id" can be specified by "pullToRefreshTargetScrollId".'},{type:"text",value:'If no container is specified, it will be associated with the main scroll container by default. For the main scroll bar, please refer to the configuration item "mainScrollID".By default, the main scroll is associated with the &lt;define-applet> container of the Applet.'},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    pullToRefresh: true,\n                    pullToRefreshTargetScrollId: 'root'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:'Note the specified scroll container "id" cannot exist in ShadowDom.'}]]},V={title:"TapStatusBarToScrollToTop",content:[[{type:"title",value:"TapStatusBarToScrollToTop"},{type:"sub",value:"AppletConfig > tapStatusBarToScrollToTop"},{type:"text",value:"When turned on, when you click on the status bar at the top of the window, the main scroll container scrolls to the top."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              tapStatusBarToScrollToTop?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"This option will be reflected on the main scroll, the main scroll bar refers to the configuration item \"mainScrollID\", the default main scroll is associated as the 'body' container of the Applet."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    tapStatusBarToScrollToTop: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:'The launch of this option depends on the configuration item "mainScrollID".'}]]},z={title:"MainScrollId",content:[[{type:"title",value:"MainScrollId"},{type:"sub",value:"AppletConfig > mainScrollId"},{type:"text",value:"Specify the main scroll container for the Applet, which can be used in conjunction with [tapStatusBarToScrollToTop] and [pullToRefresh]."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              mainScrollId?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"If no main scroll container is specified, the default &lt;define-applet> is the main scroll."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    mainScrollId: 'root'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"Note that the specified scroll container \"id\" cannot exist in the 'ShadowDom'."}]]},N={title:"Apply&UnApply",content:[[{type:"title",value:"Apply&UnApply"},{type:"sub",value:"AppletConfig > apply"},{type:"text",value:"Enable presetable capabilities in the same-origin Applet."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            type AppletApplyMabyeOptions = 'smart-setTimeout' | 'smart-setInterval' | 'link-new-viewport' | 'tap-highlight'\n            type AppletApplyOptions = Array&lt;AppletApplyMabyeOptions>\n            type AppletApplyOptionsParam = {\n              'tap-highlight'?: {\n                selector: string\n              }\n            }\n            interface AppletBaseConfig {\n              apply?: AppletApplyOptions\n              applyOptions?: AppletApplyOptionsParam\n              unApply?: AppletApplyOptions\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"'apply' presets the following available capabilities:"},{type:"text",value:"\n          <ul>\n            <li><b>smart-setTimeout</b> When the Applet window is not visible or is in the process of window animation, all 'setTimeout' will automatically pause execution until the module animation stops and automatically resumes execution.</li>\n            <li><b>smart-setInterval</b> same as 'smart-setTimeout'</li>\n            <li><b>link-new-viewport</b> When the 'a link' or the 'window.open' method is used to open the page in the Applet page, the Lath container will automatically capture and intercept, and generate a new Applet from the page content, and then load and display it. If the 'a link' is set with target='_parent' or target='_top', it will not be captured and will be opened in a new browser window. In the 'a link', you can also set the animation effect and set the clone as a new module preset-effect=\"preset animation name\", clone-as=\"new module name\"</li>\n            <li><b>tap-highlight</b> All 'a links' will automatically add a translucent mask highlighting effect when clicked.</li>\n          </ul>\n        "},{type:"tips",value:"When using the 'clone-as' attribute on the 'a link', the purpose is to allow the same Applet to be opened with multiple avatars, such as the article details Applet. When its parameters are different, multiple articles can be opened with avatars at the same time, rather than in the same instance to update the article."},{type:"text",value:"The options above are enabled by default. If you do not want to enable them, you can use the 'unApply' configuration item."},{type:"text",value:"'unApply' is the opposite of the 'apply' option, which disables the ability to preconfigure in the configuration."},{type:"text",value:'\'applyOptions\' can add available parameters for each capability. Currently, a highlight selector "selector" can be provided for "tap-highlight". When the click element matches, the highlight effect will be added, and "tap-highlight" will be added to the element. Properties that can be used for CSS style customization.'},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    unApply: ['link-new-viewport'],\n                    applyOptions: {\n                      'tap-highlight': {\n                        selector: '.link'\n                      }\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:'Note that using "link-new-viewport" does not capture the jump behavior implemented by the "location.href" method.'}]]},H={title:"SingleFlow",content:[[{type:"title",value:"SingleFlow"},{type:"sub",value:"FrameworksAppletConfig > singleFlow"},{type:"text",value:"Turn on historical hierarchical flow direction control. (Frameworks Applet exclusive configuration)"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface FrameworksAppletConfig {\n              singleFlow?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"Only the historical fallback direction of the Applet is allowed to fall back to the Applet with a smaller level, if the returned Applet level is greater than or equal to the current Applet level, the Applet is directly skipped and continues to return to the earlier Applet in the history until the conditions are met."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    singleFlow: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"For example, from the Applet that generates the order function to the  Applet that pays the order, after the successful payment enters the 'My Order Module Applet', when it is completed to roll back, it can be returned directly to the order card by opening the configuration item and combining the Applet level rules, so that it can directly return to the order to generate the Applet, without going through the various Applets in the order completion process."}]]},F={title:"SingleLock",content:[[{type:"title",value:"SingleLock"},{type:"sub",value:"FrameworksAppletConfig > singleLock"},{type:"text",value:"When an Applet falls back to the program exit (level === 0 Applet),the organization history continues to fallback when the return operation is performed."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface FrameworksAppletConfig {\n              singleLock?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"When a fallback is locked, continuing to fallback begins recording the number of fallbacks and can be used to decide whether the Applet is allowed to exit through the [holdBack] configuration in 'frameworks Applets'."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    singleLock: true,\n                    holdBack: (event) => {\n                      // Determine whether to exit\n                      return true\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"text",value:"As configured above, when jumping from other pages to the application, when the browser back button is clicked, it will not exit the application page, but will be judged whether it should be exited through the [holdBack] configuration in frameworks applet, and the number of times the user clicks the back button is returned."}]]},j={title:"PreIndex",content:[[{type:"title",value:"PreIndex"},{type:"sub",value:"FrameworksAppletConfig > preIndex"},{type:"text",value:"When accessing a Applet via a link, a pre-positioned Applet can be inserted before. (Frameworks Applet exclusive configuration)"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface FrameworksAppletConfig {\n              preIndex?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"When anchoring to a Applet by visiting the page url, you can set a pre-Applet through this configuration item. At this time, when accessing the url link, the anchored Applet will still be preferentially accessed, but when the browser is clicked to return, it does not exit immediately, but falls back from the anchor Applet to the front Applet inserted through this configuration item."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    preIndex: 'home'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"text",value:"When the Applet anchored by the access link is equal to [preIndex] or [index], the pre-Applet will not be inserted again before."}]]},O={title:"NotFound",content:[[{type:"title",value:"NotFound"},{type:"sub",value:"FrameworksAppletConfig > notFound"},{type:"text",value:"404 Applet (frameworks Applet exclusive configuration)"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface FrameworksAppletConfig {\n              notFound?: string\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:'If the requested Applet page does not exist, it will be automatically routed to the Applet, and if it is not configured, it will automatically jump to the Apple whose "id" is "404".'},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    notFound: 'home'\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"text",value:"The 404 module is mainly used for the acceptance and statistics of abnormal access to the application."}]]},R={title:"HoldBack",content:[[{type:"title",value:"HoldBack"},{type:"sub",value:"FrameworksAppletConfig > holdBack"},{type:"text",value:"Prevent the main program from exiting. (Frameworks Applet exclusive configuration)"},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface FrameworksAppletConfig {\n              holdBack?: (backoutCount: number) => boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"It is valid when [singleLock] is turned on. When the user performs a return operation and the page is about to exit, it will be verified through this function (if it is blocked, 'backCount' is the number of clicks to return). When it returns 'true', it prevents the application page from exiting. Otherwise, the direct exit of the application will be allowed."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                frameworks: {\n                  config: {\n                    singleLock: true,\n                    holdBack: (event) => {\n                      // decide whether to quit\n                      return true\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"text",value:"As configured above, when jumping from other pages to enter the application, when you click the browser back button, you will not exit the application page, but will judge whether it should be exited through the [holdBack] configuration in the 'Frameworks Applet', and return the back button clicked times to the user at the same time."}]]},G={title:"Events",content:[[{type:"title",value:"Events"},{type:"sub",value:"AppletManifest > events"},{type:"text",value:"Register event callbacks for Applets."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            declare interface AppletEvents {\n              transformStart: (applet: Applet) => undefined | 'break'\n              transformEnd: (applet: Applet) => void\n              boot: (applet: Applet) => void\n              load: (applet: Applet) => void\n              loadError: (applet: Applet) => void\n              preload: (applet: Applet) => void\n              destroy: (applet: Applet) => void\n            }\n            declare interface AppletManifest {\n              events?: Partial<AppletEvents>\n            }\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"Register the event callback function in the life cycle in the Applet."},{type:"text",value:"\n          <ul>\n            <li><b>transformStart</b> Applet transition animation start event. Note that 'transformStart' can optionally return a string 'break', at which point the block transition will be terminated.</li>\n            <li><b>transformEnd</b> Applet transition animation end event.</li>\n            <li><b>boot</b> Applet start event (only once per lifetime).</li>\n            <li><b>load</b> The source code loading completion event of 'source' type Applet.</li>\n            <li><b>loadError</b> The source code loading error event of 'source' type Applet.</li>\n            <li><b>preload</b> Applet preload finished event.</li>\n            <li><b>destroy</b> Applet destroyed event.</li>\n          </ul>\n        "},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:"\n          <code-highlight type=\"ts\">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    title: 'home'\n                  },\n                  events: {\n                    transformEnd: (applet) => {\n                      // ...\n                    }\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        "},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"Only the necessary events are provided in the Applet registration event, you can use the listener function on the Applet object to cover more events. Please refer to 'API-Application Events'."},{type:"tips",value:"The events in the Applet configuration all run outside the Applet container. When the Applet is destroyed, the environment variables in the configuration will not disappear. Therefore, you must be responsible for the quality of the logic in the configuration file, avoid side effects, and be reasonable. Controls the logic size (complex logic is not recommended here)."}]]},U={title:"UseMirroring",content:[[{type:"title",value:"UseMirroring"},{type:"sub",value:"AppletConfig > useMirroring"},{type:"text",value:"Persists the last accessed image file for quick rendering on the next access."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              useMirroring?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"When an Applet page is destroyed, its internal HTML is localized and persistently stored, and the last access result is rendered immediately on the next visit until the new content is loaded and disappears."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                home: {\n                  config: {\n                    useMirroring: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"When the local storage overflows, all localStorage local data is cleared, which is generally used in some scenarios with low frequency of change, so please fully consider the rationality of the logic before use."},{type:"tips",value:"Mirror restore cannot store and restore 'Web Components', 'ShadowDom', and embedded media such as 'iframe', 'canvases', 'objects', etc. in pages, and should be considered when using this option."}]]},q={title:"Transient",content:[[{type:"title",value:"Transient"},{type:"sub",value:"AppletConfig > transient"},{type:"text",value:"Mark the Applet as a temporary module."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              transient?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"When the Applet switches to the background, it is immediately destroyed and all temporary configuration data for the Applet is deleted at the same time."},{type:"text",value:"URL-type Applets (i.e. temporary modules without custom configuration) opened through a new window (A link or API - pushWindow) are automatically marked."},{type:"hr"},{type:"text",value:"<h3>Example</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            createApplication({\n              applets: {\n                demoPage: {\n                  config: {\n                    transient: true\n                  }\n                }\n              }\n            })\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Notes</h3>"},{type:"text",value:"This parameter can generally be used when there is no reuse of your Applet, such as dynamically generated Applets that cannot be enumerated."},{type:"tips",value:"What is the significance of this configuration item? When a build module accessed by the A link accumulates a lot of useless Applet configurations because the links cannot be enumerated, turning on this option eliminates these meaningless memory consumption."}],[{type:"title",value:"DisableTransient"},{type:"sub",value:"AppletConfig > disableTransient"},{type:"text",value:"'DisableTransient' echoes 'Transient', and this parameter allows you to turn off the default 'Transient' behavior."},{type:"hr"},{type:"text",value:"<h3>Types</h3>"},{type:"code",value:'\n          <code-highlight type="ts">\n            interface AppletBaseConfig {\n              disableTransient?: boolean\n            }\n          </code-highlight>\n        '},{type:"hr"},{type:"text",value:"<h3>Details</h3>"},{type:"text",value:"If, in a particular case, the module does not need to define any configuration (or the developers is lazy to set it) and the module is actually enumerable (the automatically generated configuration is also meaningful, and there is a possibility of reuse rather than temporary Applets), so configuring this option turns off the mechanism for automatically clearing the generated Applet configuration."}]]}}}]);